
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Members
 * 
 */
export type Members = $Result.DefaultSelection<Prisma.$MembersPayload>
/**
 * Model Suppliers
 * 
 */
export type Suppliers = $Result.DefaultSelection<Prisma.$SuppliersPayload>
/**
 * Model Categories
 * 
 */
export type Categories = $Result.DefaultSelection<Prisma.$CategoriesPayload>
/**
 * Model DosageForms
 * 
 */
export type DosageForms = $Result.DefaultSelection<Prisma.$DosageFormsPayload>
/**
 * Model Medicines
 * 
 */
export type Medicines = $Result.DefaultSelection<Prisma.$MedicinesPayload>
/**
 * Model Sales
 * 
 */
export type Sales = $Result.DefaultSelection<Prisma.$SalesPayload>
/**
 * Model Expenses
 * 
 */
export type Expenses = $Result.DefaultSelection<Prisma.$ExpensesPayload>
/**
 * Model Returns
 * 
 */
export type Returns = $Result.DefaultSelection<Prisma.$ReturnsPayload>
/**
 * Model Customers
 * 
 */
export type Customers = $Result.DefaultSelection<Prisma.$CustomersPayload>
/**
 * Model SupplierCredits
 * 
 */
export type SupplierCredits = $Result.DefaultSelection<Prisma.$SupplierCreditsPayload>
/**
 * Model CustomerCredit
 * 
 */
export type CustomerCredit = $Result.DefaultSelection<Prisma.$CustomerCreditPayload>
/**
 * Model Objectives
 * 
 */
export type Objectives = $Result.DefaultSelection<Prisma.$ObjectivesPayload>
/**
 * Model KeyResults
 * 
 */
export type KeyResults = $Result.DefaultSelection<Prisma.$KeyResultsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Status: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const PaymentStatus: {
  UNPAID: 'UNPAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PAID: 'PAID'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const PaymentMethod: {
  NONE: 'NONE',
  CASH: 'CASH',
  CREDIT: 'CREDIT',
  CBE: 'CBE',
  COOP: 'COOP',
  AWASH: 'AWASH',
  EBIRR: 'EBIRR'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.members`: Exposes CRUD operations for the **Members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.members.findMany()
    * ```
    */
  get members(): Prisma.MembersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.suppliers`: Exposes CRUD operations for the **Suppliers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.suppliers.findMany()
    * ```
    */
  get suppliers(): Prisma.SuppliersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **Categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.CategoriesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dosageForms`: Exposes CRUD operations for the **DosageForms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DosageForms
    * const dosageForms = await prisma.dosageForms.findMany()
    * ```
    */
  get dosageForms(): Prisma.DosageFormsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicines`: Exposes CRUD operations for the **Medicines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medicines
    * const medicines = await prisma.medicines.findMany()
    * ```
    */
  get medicines(): Prisma.MedicinesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sales`: Exposes CRUD operations for the **Sales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sales.findMany()
    * ```
    */
  get sales(): Prisma.SalesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expenses`: Exposes CRUD operations for the **Expenses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expenses.findMany()
    * ```
    */
  get expenses(): Prisma.ExpensesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.returns`: Exposes CRUD operations for the **Returns** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Returns
    * const returns = await prisma.returns.findMany()
    * ```
    */
  get returns(): Prisma.ReturnsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customers`: Exposes CRUD operations for the **Customers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customers.findMany()
    * ```
    */
  get customers(): Prisma.CustomersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.supplierCredits`: Exposes CRUD operations for the **SupplierCredits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SupplierCredits
    * const supplierCredits = await prisma.supplierCredits.findMany()
    * ```
    */
  get supplierCredits(): Prisma.SupplierCreditsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerCredit`: Exposes CRUD operations for the **CustomerCredit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerCredits
    * const customerCredits = await prisma.customerCredit.findMany()
    * ```
    */
  get customerCredit(): Prisma.CustomerCreditDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.objectives`: Exposes CRUD operations for the **Objectives** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Objectives
    * const objectives = await prisma.objectives.findMany()
    * ```
    */
  get objectives(): Prisma.ObjectivesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.keyResults`: Exposes CRUD operations for the **KeyResults** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeyResults
    * const keyResults = await prisma.keyResults.findMany()
    * ```
    */
  get keyResults(): Prisma.KeyResultsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Members: 'Members',
    Suppliers: 'Suppliers',
    Categories: 'Categories',
    DosageForms: 'DosageForms',
    Medicines: 'Medicines',
    Sales: 'Sales',
    Expenses: 'Expenses',
    Returns: 'Returns',
    Customers: 'Customers',
    SupplierCredits: 'SupplierCredits',
    CustomerCredit: 'CustomerCredit',
    Objectives: 'Objectives',
    KeyResults: 'KeyResults'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "members" | "suppliers" | "categories" | "dosageForms" | "medicines" | "sales" | "expenses" | "returns" | "customers" | "supplierCredits" | "customerCredit" | "objectives" | "keyResults"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Members: {
        payload: Prisma.$MembersPayload<ExtArgs>
        fields: Prisma.MembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MembersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MembersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          findFirst: {
            args: Prisma.MembersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MembersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          findMany: {
            args: Prisma.MembersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>[]
          }
          create: {
            args: Prisma.MembersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          createMany: {
            args: Prisma.MembersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MembersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>[]
          }
          delete: {
            args: Prisma.MembersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          update: {
            args: Prisma.MembersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          deleteMany: {
            args: Prisma.MembersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MembersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MembersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>[]
          }
          upsert: {
            args: Prisma.MembersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          aggregate: {
            args: Prisma.MembersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMembers>
          }
          groupBy: {
            args: Prisma.MembersGroupByArgs<ExtArgs>
            result: $Utils.Optional<MembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.MembersCountArgs<ExtArgs>
            result: $Utils.Optional<MembersCountAggregateOutputType> | number
          }
        }
      }
      Suppliers: {
        payload: Prisma.$SuppliersPayload<ExtArgs>
        fields: Prisma.SuppliersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuppliersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuppliersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>
          }
          findFirst: {
            args: Prisma.SuppliersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuppliersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>
          }
          findMany: {
            args: Prisma.SuppliersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>[]
          }
          create: {
            args: Prisma.SuppliersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>
          }
          createMany: {
            args: Prisma.SuppliersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SuppliersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>[]
          }
          delete: {
            args: Prisma.SuppliersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>
          }
          update: {
            args: Prisma.SuppliersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>
          }
          deleteMany: {
            args: Prisma.SuppliersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuppliersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SuppliersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>[]
          }
          upsert: {
            args: Prisma.SuppliersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuppliersPayload>
          }
          aggregate: {
            args: Prisma.SuppliersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuppliers>
          }
          groupBy: {
            args: Prisma.SuppliersGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuppliersGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuppliersCountArgs<ExtArgs>
            result: $Utils.Optional<SuppliersCountAggregateOutputType> | number
          }
        }
      }
      Categories: {
        payload: Prisma.$CategoriesPayload<ExtArgs>
        fields: Prisma.CategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findFirst: {
            args: Prisma.CategoriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findMany: {
            args: Prisma.CategoriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>[]
          }
          create: {
            args: Prisma.CategoriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          createMany: {
            args: Prisma.CategoriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>[]
          }
          delete: {
            args: Prisma.CategoriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          update: {
            args: Prisma.CategoriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          deleteMany: {
            args: Prisma.CategoriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoriesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>[]
          }
          upsert: {
            args: Prisma.CategoriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.CategoriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriesCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      DosageForms: {
        payload: Prisma.$DosageFormsPayload<ExtArgs>
        fields: Prisma.DosageFormsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DosageFormsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DosageFormsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>
          }
          findFirst: {
            args: Prisma.DosageFormsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DosageFormsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>
          }
          findMany: {
            args: Prisma.DosageFormsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>[]
          }
          create: {
            args: Prisma.DosageFormsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>
          }
          createMany: {
            args: Prisma.DosageFormsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DosageFormsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>[]
          }
          delete: {
            args: Prisma.DosageFormsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>
          }
          update: {
            args: Prisma.DosageFormsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>
          }
          deleteMany: {
            args: Prisma.DosageFormsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DosageFormsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DosageFormsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>[]
          }
          upsert: {
            args: Prisma.DosageFormsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DosageFormsPayload>
          }
          aggregate: {
            args: Prisma.DosageFormsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDosageForms>
          }
          groupBy: {
            args: Prisma.DosageFormsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DosageFormsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DosageFormsCountArgs<ExtArgs>
            result: $Utils.Optional<DosageFormsCountAggregateOutputType> | number
          }
        }
      }
      Medicines: {
        payload: Prisma.$MedicinesPayload<ExtArgs>
        fields: Prisma.MedicinesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicinesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicinesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>
          }
          findFirst: {
            args: Prisma.MedicinesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicinesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>
          }
          findMany: {
            args: Prisma.MedicinesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>[]
          }
          create: {
            args: Prisma.MedicinesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>
          }
          createMany: {
            args: Prisma.MedicinesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicinesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>[]
          }
          delete: {
            args: Prisma.MedicinesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>
          }
          update: {
            args: Prisma.MedicinesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>
          }
          deleteMany: {
            args: Prisma.MedicinesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicinesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicinesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>[]
          }
          upsert: {
            args: Prisma.MedicinesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinesPayload>
          }
          aggregate: {
            args: Prisma.MedicinesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicines>
          }
          groupBy: {
            args: Prisma.MedicinesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicinesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicinesCountArgs<ExtArgs>
            result: $Utils.Optional<MedicinesCountAggregateOutputType> | number
          }
        }
      }
      Sales: {
        payload: Prisma.$SalesPayload<ExtArgs>
        fields: Prisma.SalesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>
          }
          findFirst: {
            args: Prisma.SalesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>
          }
          findMany: {
            args: Prisma.SalesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>[]
          }
          create: {
            args: Prisma.SalesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>
          }
          createMany: {
            args: Prisma.SalesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SalesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>[]
          }
          delete: {
            args: Prisma.SalesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>
          }
          update: {
            args: Prisma.SalesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>
          }
          deleteMany: {
            args: Prisma.SalesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SalesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>[]
          }
          upsert: {
            args: Prisma.SalesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalesPayload>
          }
          aggregate: {
            args: Prisma.SalesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSales>
          }
          groupBy: {
            args: Prisma.SalesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalesCountArgs<ExtArgs>
            result: $Utils.Optional<SalesCountAggregateOutputType> | number
          }
        }
      }
      Expenses: {
        payload: Prisma.$ExpensesPayload<ExtArgs>
        fields: Prisma.ExpensesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpensesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpensesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          findFirst: {
            args: Prisma.ExpensesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpensesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          findMany: {
            args: Prisma.ExpensesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>[]
          }
          create: {
            args: Prisma.ExpensesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          createMany: {
            args: Prisma.ExpensesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpensesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>[]
          }
          delete: {
            args: Prisma.ExpensesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          update: {
            args: Prisma.ExpensesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          deleteMany: {
            args: Prisma.ExpensesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpensesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExpensesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>[]
          }
          upsert: {
            args: Prisma.ExpensesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          aggregate: {
            args: Prisma.ExpensesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpenses>
          }
          groupBy: {
            args: Prisma.ExpensesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpensesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpensesCountArgs<ExtArgs>
            result: $Utils.Optional<ExpensesCountAggregateOutputType> | number
          }
        }
      }
      Returns: {
        payload: Prisma.$ReturnsPayload<ExtArgs>
        fields: Prisma.ReturnsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReturnsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReturnsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>
          }
          findFirst: {
            args: Prisma.ReturnsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReturnsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>
          }
          findMany: {
            args: Prisma.ReturnsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>[]
          }
          create: {
            args: Prisma.ReturnsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>
          }
          createMany: {
            args: Prisma.ReturnsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReturnsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>[]
          }
          delete: {
            args: Prisma.ReturnsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>
          }
          update: {
            args: Prisma.ReturnsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>
          }
          deleteMany: {
            args: Prisma.ReturnsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReturnsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReturnsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>[]
          }
          upsert: {
            args: Prisma.ReturnsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReturnsPayload>
          }
          aggregate: {
            args: Prisma.ReturnsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReturns>
          }
          groupBy: {
            args: Prisma.ReturnsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReturnsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReturnsCountArgs<ExtArgs>
            result: $Utils.Optional<ReturnsCountAggregateOutputType> | number
          }
        }
      }
      Customers: {
        payload: Prisma.$CustomersPayload<ExtArgs>
        fields: Prisma.CustomersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>
          }
          findFirst: {
            args: Prisma.CustomersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>
          }
          findMany: {
            args: Prisma.CustomersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>[]
          }
          create: {
            args: Prisma.CustomersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>
          }
          createMany: {
            args: Prisma.CustomersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>[]
          }
          delete: {
            args: Prisma.CustomersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>
          }
          update: {
            args: Prisma.CustomersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>
          }
          deleteMany: {
            args: Prisma.CustomersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>[]
          }
          upsert: {
            args: Prisma.CustomersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomersPayload>
          }
          aggregate: {
            args: Prisma.CustomersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomers>
          }
          groupBy: {
            args: Prisma.CustomersGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomersGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomersCountArgs<ExtArgs>
            result: $Utils.Optional<CustomersCountAggregateOutputType> | number
          }
        }
      }
      SupplierCredits: {
        payload: Prisma.$SupplierCreditsPayload<ExtArgs>
        fields: Prisma.SupplierCreditsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierCreditsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierCreditsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>
          }
          findFirst: {
            args: Prisma.SupplierCreditsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierCreditsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>
          }
          findMany: {
            args: Prisma.SupplierCreditsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>[]
          }
          create: {
            args: Prisma.SupplierCreditsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>
          }
          createMany: {
            args: Prisma.SupplierCreditsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplierCreditsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>[]
          }
          delete: {
            args: Prisma.SupplierCreditsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>
          }
          update: {
            args: Prisma.SupplierCreditsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>
          }
          deleteMany: {
            args: Prisma.SupplierCreditsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierCreditsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SupplierCreditsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>[]
          }
          upsert: {
            args: Prisma.SupplierCreditsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierCreditsPayload>
          }
          aggregate: {
            args: Prisma.SupplierCreditsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplierCredits>
          }
          groupBy: {
            args: Prisma.SupplierCreditsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierCreditsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCreditsCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCreditsCountAggregateOutputType> | number
          }
        }
      }
      CustomerCredit: {
        payload: Prisma.$CustomerCreditPayload<ExtArgs>
        fields: Prisma.CustomerCreditFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerCreditFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerCreditFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>
          }
          findFirst: {
            args: Prisma.CustomerCreditFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerCreditFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>
          }
          findMany: {
            args: Prisma.CustomerCreditFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>[]
          }
          create: {
            args: Prisma.CustomerCreditCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>
          }
          createMany: {
            args: Prisma.CustomerCreditCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreditCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>[]
          }
          delete: {
            args: Prisma.CustomerCreditDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>
          }
          update: {
            args: Prisma.CustomerCreditUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>
          }
          deleteMany: {
            args: Prisma.CustomerCreditDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerCreditUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerCreditUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>[]
          }
          upsert: {
            args: Prisma.CustomerCreditUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCreditPayload>
          }
          aggregate: {
            args: Prisma.CustomerCreditAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerCredit>
          }
          groupBy: {
            args: Prisma.CustomerCreditGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerCreditGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCreditCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCreditCountAggregateOutputType> | number
          }
        }
      }
      Objectives: {
        payload: Prisma.$ObjectivesPayload<ExtArgs>
        fields: Prisma.ObjectivesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObjectivesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObjectivesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>
          }
          findFirst: {
            args: Prisma.ObjectivesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObjectivesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>
          }
          findMany: {
            args: Prisma.ObjectivesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>[]
          }
          create: {
            args: Prisma.ObjectivesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>
          }
          createMany: {
            args: Prisma.ObjectivesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObjectivesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>[]
          }
          delete: {
            args: Prisma.ObjectivesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>
          }
          update: {
            args: Prisma.ObjectivesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>
          }
          deleteMany: {
            args: Prisma.ObjectivesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ObjectivesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ObjectivesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>[]
          }
          upsert: {
            args: Prisma.ObjectivesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectivesPayload>
          }
          aggregate: {
            args: Prisma.ObjectivesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateObjectives>
          }
          groupBy: {
            args: Prisma.ObjectivesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ObjectivesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObjectivesCountArgs<ExtArgs>
            result: $Utils.Optional<ObjectivesCountAggregateOutputType> | number
          }
        }
      }
      KeyResults: {
        payload: Prisma.$KeyResultsPayload<ExtArgs>
        fields: Prisma.KeyResultsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeyResultsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeyResultsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>
          }
          findFirst: {
            args: Prisma.KeyResultsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeyResultsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>
          }
          findMany: {
            args: Prisma.KeyResultsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>[]
          }
          create: {
            args: Prisma.KeyResultsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>
          }
          createMany: {
            args: Prisma.KeyResultsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeyResultsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>[]
          }
          delete: {
            args: Prisma.KeyResultsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>
          }
          update: {
            args: Prisma.KeyResultsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>
          }
          deleteMany: {
            args: Prisma.KeyResultsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeyResultsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KeyResultsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>[]
          }
          upsert: {
            args: Prisma.KeyResultsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyResultsPayload>
          }
          aggregate: {
            args: Prisma.KeyResultsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeyResults>
          }
          groupBy: {
            args: Prisma.KeyResultsGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeyResultsGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeyResultsCountArgs<ExtArgs>
            result: $Utils.Optional<KeyResultsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    members?: MembersOmit
    suppliers?: SuppliersOmit
    categories?: CategoriesOmit
    dosageForms?: DosageFormsOmit
    medicines?: MedicinesOmit
    sales?: SalesOmit
    expenses?: ExpensesOmit
    returns?: ReturnsOmit
    customers?: CustomersOmit
    supplierCredits?: SupplierCreditsOmit
    customerCredit?: CustomerCreditOmit
    objectives?: ObjectivesOmit
    keyResults?: KeyResultsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    credits: number
    medicines: number
    customerCredits: number
    updatedCustomerCredits: number
    updatedSupplierCredits: number
    createdSales: number
    updatedSales: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    credits?: boolean | UsersCountOutputTypeCountCreditsArgs
    medicines?: boolean | UsersCountOutputTypeCountMedicinesArgs
    customerCredits?: boolean | UsersCountOutputTypeCountCustomerCreditsArgs
    updatedCustomerCredits?: boolean | UsersCountOutputTypeCountUpdatedCustomerCreditsArgs
    updatedSupplierCredits?: boolean | UsersCountOutputTypeCountUpdatedSupplierCreditsArgs
    createdSales?: boolean | UsersCountOutputTypeCountCreatedSalesArgs
    updatedSales?: boolean | UsersCountOutputTypeCountUpdatedSalesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCreditsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicinesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCustomerCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerCreditWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUpdatedCustomerCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerCreditWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUpdatedSupplierCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCreditsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCreatedSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUpdatedSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalesWhereInput
  }


  /**
   * Count Type SuppliersCountOutputType
   */

  export type SuppliersCountOutputType = {
    SupplierCredits: number
    Medicines: number
  }

  export type SuppliersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SupplierCredits?: boolean | SuppliersCountOutputTypeCountSupplierCreditsArgs
    Medicines?: boolean | SuppliersCountOutputTypeCountMedicinesArgs
  }

  // Custom InputTypes
  /**
   * SuppliersCountOutputType without action
   */
  export type SuppliersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuppliersCountOutputType
     */
    select?: SuppliersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SuppliersCountOutputType without action
   */
  export type SuppliersCountOutputTypeCountSupplierCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCreditsWhereInput
  }

  /**
   * SuppliersCountOutputType without action
   */
  export type SuppliersCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicinesWhereInput
  }


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    Medicines: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Medicines?: boolean | CategoriesCountOutputTypeCountMedicinesArgs
  }

  // Custom InputTypes
  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicinesWhereInput
  }


  /**
   * Count Type DosageFormsCountOutputType
   */

  export type DosageFormsCountOutputType = {
    Medicines: number
    Sales: number
    Returns: number
  }

  export type DosageFormsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Medicines?: boolean | DosageFormsCountOutputTypeCountMedicinesArgs
    Sales?: boolean | DosageFormsCountOutputTypeCountSalesArgs
    Returns?: boolean | DosageFormsCountOutputTypeCountReturnsArgs
  }

  // Custom InputTypes
  /**
   * DosageFormsCountOutputType without action
   */
  export type DosageFormsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageFormsCountOutputType
     */
    select?: DosageFormsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DosageFormsCountOutputType without action
   */
  export type DosageFormsCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicinesWhereInput
  }

  /**
   * DosageFormsCountOutputType without action
   */
  export type DosageFormsCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalesWhereInput
  }

  /**
   * DosageFormsCountOutputType without action
   */
  export type DosageFormsCountOutputTypeCountReturnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReturnsWhereInput
  }


  /**
   * Count Type MedicinesCountOutputType
   */

  export type MedicinesCountOutputType = {
    Sales: number
    Returns: number
  }

  export type MedicinesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sales?: boolean | MedicinesCountOutputTypeCountSalesArgs
    Returns?: boolean | MedicinesCountOutputTypeCountReturnsArgs
  }

  // Custom InputTypes
  /**
   * MedicinesCountOutputType without action
   */
  export type MedicinesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicinesCountOutputType
     */
    select?: MedicinesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicinesCountOutputType without action
   */
  export type MedicinesCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalesWhereInput
  }

  /**
   * MedicinesCountOutputType without action
   */
  export type MedicinesCountOutputTypeCountReturnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReturnsWhereInput
  }


  /**
   * Count Type CustomersCountOutputType
   */

  export type CustomersCountOutputType = {
    Sales: number
    CustomerCredit: number
  }

  export type CustomersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sales?: boolean | CustomersCountOutputTypeCountSalesArgs
    CustomerCredit?: boolean | CustomersCountOutputTypeCountCustomerCreditArgs
  }

  // Custom InputTypes
  /**
   * CustomersCountOutputType without action
   */
  export type CustomersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomersCountOutputType
     */
    select?: CustomersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomersCountOutputType without action
   */
  export type CustomersCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalesWhereInput
  }

  /**
   * CustomersCountOutputType without action
   */
  export type CustomersCountOutputTypeCountCustomerCreditArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerCreditWhereInput
  }


  /**
   * Count Type ObjectivesCountOutputType
   */

  export type ObjectivesCountOutputType = {
    KeyResults: number
  }

  export type ObjectivesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    KeyResults?: boolean | ObjectivesCountOutputTypeCountKeyResultsArgs
  }

  // Custom InputTypes
  /**
   * ObjectivesCountOutputType without action
   */
  export type ObjectivesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectivesCountOutputType
     */
    select?: ObjectivesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObjectivesCountOutputType without action
   */
  export type ObjectivesCountOutputTypeCountKeyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyResultsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    FirstName: string | null
    LastName: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
    status: $Enums.Status | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    FirstName: string | null
    LastName: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
    status: $Enums.Status | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    FirstName: number
    LastName: number
    username: number
    password: number
    role: number
    status: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    FirstName?: true
    LastName?: true
    username?: true
    password?: true
    role?: true
    status?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    FirstName?: true
    LastName?: true
    username?: true
    password?: true
    role?: true
    status?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    FirstName?: true
    LastName?: true
    username?: true
    password?: true
    role?: true
    status?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status: $Enums.Status
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    FirstName?: boolean
    LastName?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    member?: boolean | Users$memberArgs<ExtArgs>
    credits?: boolean | Users$creditsArgs<ExtArgs>
    medicines?: boolean | Users$medicinesArgs<ExtArgs>
    customerCredits?: boolean | Users$customerCreditsArgs<ExtArgs>
    updatedCustomerCredits?: boolean | Users$updatedCustomerCreditsArgs<ExtArgs>
    updatedSupplierCredits?: boolean | Users$updatedSupplierCreditsArgs<ExtArgs>
    createdSales?: boolean | Users$createdSalesArgs<ExtArgs>
    updatedSales?: boolean | Users$updatedSalesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    FirstName?: boolean
    LastName?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    FirstName?: boolean
    LastName?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    FirstName?: boolean
    LastName?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "FirstName" | "LastName" | "username" | "password" | "role" | "status", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | Users$memberArgs<ExtArgs>
    credits?: boolean | Users$creditsArgs<ExtArgs>
    medicines?: boolean | Users$medicinesArgs<ExtArgs>
    customerCredits?: boolean | Users$customerCreditsArgs<ExtArgs>
    updatedCustomerCredits?: boolean | Users$updatedCustomerCreditsArgs<ExtArgs>
    updatedSupplierCredits?: boolean | Users$updatedSupplierCreditsArgs<ExtArgs>
    createdSales?: boolean | Users$createdSalesArgs<ExtArgs>
    updatedSales?: boolean | Users$updatedSalesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      member: Prisma.$MembersPayload<ExtArgs> | null
      credits: Prisma.$SupplierCreditsPayload<ExtArgs>[]
      medicines: Prisma.$MedicinesPayload<ExtArgs>[]
      customerCredits: Prisma.$CustomerCreditPayload<ExtArgs>[]
      updatedCustomerCredits: Prisma.$CustomerCreditPayload<ExtArgs>[]
      updatedSupplierCredits: Prisma.$SupplierCreditsPayload<ExtArgs>[]
      createdSales: Prisma.$SalesPayload<ExtArgs>[]
      updatedSales: Prisma.$SalesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      FirstName: string
      LastName: string
      username: string
      password: string
      role: $Enums.Role
      status: $Enums.Status
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UsersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsersUpdateManyAndReturnArgs>(args: SelectSubset<T, UsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends Users$memberArgs<ExtArgs> = {}>(args?: Subset<T, Users$memberArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    credits<T extends Users$creditsArgs<ExtArgs> = {}>(args?: Subset<T, Users$creditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicines<T extends Users$medicinesArgs<ExtArgs> = {}>(args?: Subset<T, Users$medicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customerCredits<T extends Users$customerCreditsArgs<ExtArgs> = {}>(args?: Subset<T, Users$customerCreditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedCustomerCredits<T extends Users$updatedCustomerCreditsArgs<ExtArgs> = {}>(args?: Subset<T, Users$updatedCustomerCreditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedSupplierCredits<T extends Users$updatedSupplierCreditsArgs<ExtArgs> = {}>(args?: Subset<T, Users$updatedSupplierCreditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdSales<T extends Users$createdSalesArgs<ExtArgs> = {}>(args?: Subset<T, Users$createdSalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedSales<T extends Users$updatedSalesArgs<ExtArgs> = {}>(args?: Subset<T, Users$updatedSalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly FirstName: FieldRef<"Users", 'String'>
    readonly LastName: FieldRef<"Users", 'String'>
    readonly username: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'Role'>
    readonly status: FieldRef<"Users", 'Status'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users updateManyAndReturn
   */
  export type UsersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.member
   */
  export type Users$memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    where?: MembersWhereInput
  }

  /**
   * Users.credits
   */
  export type Users$creditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    where?: SupplierCreditsWhereInput
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    cursor?: SupplierCreditsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierCreditsScalarFieldEnum | SupplierCreditsScalarFieldEnum[]
  }

  /**
   * Users.medicines
   */
  export type Users$medicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    where?: MedicinesWhereInput
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    cursor?: MedicinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * Users.customerCredits
   */
  export type Users$customerCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    where?: CustomerCreditWhereInput
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    cursor?: CustomerCreditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerCreditScalarFieldEnum | CustomerCreditScalarFieldEnum[]
  }

  /**
   * Users.updatedCustomerCredits
   */
  export type Users$updatedCustomerCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    where?: CustomerCreditWhereInput
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    cursor?: CustomerCreditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerCreditScalarFieldEnum | CustomerCreditScalarFieldEnum[]
  }

  /**
   * Users.updatedSupplierCredits
   */
  export type Users$updatedSupplierCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    where?: SupplierCreditsWhereInput
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    cursor?: SupplierCreditsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierCreditsScalarFieldEnum | SupplierCreditsScalarFieldEnum[]
  }

  /**
   * Users.createdSales
   */
  export type Users$createdSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    where?: SalesWhereInput
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    cursor?: SalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Users.updatedSales
   */
  export type Users$updatedSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    where?: SalesWhereInput
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    cursor?: SalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Members
   */

  export type AggregateMembers = {
    _count: MembersCountAggregateOutputType | null
    _avg: MembersAvgAggregateOutputType | null
    _sum: MembersSumAggregateOutputType | null
    _min: MembersMinAggregateOutputType | null
    _max: MembersMaxAggregateOutputType | null
  }

  export type MembersAvgAggregateOutputType = {
    salary: number | null
  }

  export type MembersSumAggregateOutputType = {
    salary: number | null
  }

  export type MembersMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    FirstName: string | null
    LastName: string | null
    phone: string | null
    position: string | null
    address: string | null
    certificate: string | null
    Photo: string | null
    gender: $Enums.Gender | null
    dob: Date | null
    salary: number | null
    joining_date: Date | null
    status: $Enums.Status | null
    role: $Enums.Role | null
    biography: string | null
  }

  export type MembersMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    FirstName: string | null
    LastName: string | null
    phone: string | null
    position: string | null
    address: string | null
    certificate: string | null
    Photo: string | null
    gender: $Enums.Gender | null
    dob: Date | null
    salary: number | null
    joining_date: Date | null
    status: $Enums.Status | null
    role: $Enums.Role | null
    biography: string | null
  }

  export type MembersCountAggregateOutputType = {
    id: number
    user_id: number
    FirstName: number
    LastName: number
    phone: number
    position: number
    address: number
    certificate: number
    Photo: number
    gender: number
    dob: number
    salary: number
    joining_date: number
    status: number
    role: number
    biography: number
    _all: number
  }


  export type MembersAvgAggregateInputType = {
    salary?: true
  }

  export type MembersSumAggregateInputType = {
    salary?: true
  }

  export type MembersMinAggregateInputType = {
    id?: true
    user_id?: true
    FirstName?: true
    LastName?: true
    phone?: true
    position?: true
    address?: true
    certificate?: true
    Photo?: true
    gender?: true
    dob?: true
    salary?: true
    joining_date?: true
    status?: true
    role?: true
    biography?: true
  }

  export type MembersMaxAggregateInputType = {
    id?: true
    user_id?: true
    FirstName?: true
    LastName?: true
    phone?: true
    position?: true
    address?: true
    certificate?: true
    Photo?: true
    gender?: true
    dob?: true
    salary?: true
    joining_date?: true
    status?: true
    role?: true
    biography?: true
  }

  export type MembersCountAggregateInputType = {
    id?: true
    user_id?: true
    FirstName?: true
    LastName?: true
    phone?: true
    position?: true
    address?: true
    certificate?: true
    Photo?: true
    gender?: true
    dob?: true
    salary?: true
    joining_date?: true
    status?: true
    role?: true
    biography?: true
    _all?: true
  }

  export type MembersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to aggregate.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembersMaxAggregateInputType
  }

  export type GetMembersAggregateType<T extends MembersAggregateArgs> = {
        [P in keyof T & keyof AggregateMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembers[P]>
      : GetScalarType<T[P], AggregateMembers[P]>
  }




  export type MembersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MembersWhereInput
    orderBy?: MembersOrderByWithAggregationInput | MembersOrderByWithAggregationInput[]
    by: MembersScalarFieldEnum[] | MembersScalarFieldEnum
    having?: MembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembersCountAggregateInputType | true
    _avg?: MembersAvgAggregateInputType
    _sum?: MembersSumAggregateInputType
    _min?: MembersMinAggregateInputType
    _max?: MembersMaxAggregateInputType
  }

  export type MembersGroupByOutputType = {
    id: string
    user_id: string
    FirstName: string
    LastName: string
    phone: string | null
    position: string
    address: string | null
    certificate: string | null
    Photo: string | null
    gender: $Enums.Gender | null
    dob: Date | null
    salary: number
    joining_date: Date
    status: $Enums.Status
    role: $Enums.Role
    biography: string | null
    _count: MembersCountAggregateOutputType | null
    _avg: MembersAvgAggregateOutputType | null
    _sum: MembersSumAggregateOutputType | null
    _min: MembersMinAggregateOutputType | null
    _max: MembersMaxAggregateOutputType | null
  }

  type GetMembersGroupByPayload<T extends MembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembersGroupByOutputType[P]>
            : GetScalarType<T[P], MembersGroupByOutputType[P]>
        }
      >
    >


  export type MembersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    FirstName?: boolean
    LastName?: boolean
    phone?: boolean
    position?: boolean
    address?: boolean
    certificate?: boolean
    Photo?: boolean
    gender?: boolean
    dob?: boolean
    salary?: boolean
    joining_date?: boolean
    status?: boolean
    role?: boolean
    biography?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["members"]>

  export type MembersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    FirstName?: boolean
    LastName?: boolean
    phone?: boolean
    position?: boolean
    address?: boolean
    certificate?: boolean
    Photo?: boolean
    gender?: boolean
    dob?: boolean
    salary?: boolean
    joining_date?: boolean
    status?: boolean
    role?: boolean
    biography?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["members"]>

  export type MembersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    FirstName?: boolean
    LastName?: boolean
    phone?: boolean
    position?: boolean
    address?: boolean
    certificate?: boolean
    Photo?: boolean
    gender?: boolean
    dob?: boolean
    salary?: boolean
    joining_date?: boolean
    status?: boolean
    role?: boolean
    biography?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["members"]>

  export type MembersSelectScalar = {
    id?: boolean
    user_id?: boolean
    FirstName?: boolean
    LastName?: boolean
    phone?: boolean
    position?: boolean
    address?: boolean
    certificate?: boolean
    Photo?: boolean
    gender?: boolean
    dob?: boolean
    salary?: boolean
    joining_date?: boolean
    status?: boolean
    role?: boolean
    biography?: boolean
  }

  export type MembersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "FirstName" | "LastName" | "phone" | "position" | "address" | "certificate" | "Photo" | "gender" | "dob" | "salary" | "joining_date" | "status" | "role" | "biography", ExtArgs["result"]["members"]>
  export type MembersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type MembersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type MembersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $MembersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Members"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      FirstName: string
      LastName: string
      phone: string | null
      position: string
      address: string | null
      certificate: string | null
      Photo: string | null
      gender: $Enums.Gender | null
      dob: Date | null
      salary: number
      joining_date: Date
      status: $Enums.Status
      role: $Enums.Role
      biography: string | null
    }, ExtArgs["result"]["members"]>
    composites: {}
  }

  type MembersGetPayload<S extends boolean | null | undefined | MembersDefaultArgs> = $Result.GetResult<Prisma.$MembersPayload, S>

  type MembersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MembersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MembersCountAggregateInputType | true
    }

  export interface MembersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Members'], meta: { name: 'Members' } }
    /**
     * Find zero or one Members that matches the filter.
     * @param {MembersFindUniqueArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MembersFindUniqueArgs>(args: SelectSubset<T, MembersFindUniqueArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Members that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MembersFindUniqueOrThrowArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MembersFindUniqueOrThrowArgs>(args: SelectSubset<T, MembersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindFirstArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MembersFindFirstArgs>(args?: SelectSubset<T, MembersFindFirstArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindFirstOrThrowArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MembersFindFirstOrThrowArgs>(args?: SelectSubset<T, MembersFindFirstOrThrowArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.members.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.members.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const membersWithIdOnly = await prisma.members.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MembersFindManyArgs>(args?: SelectSubset<T, MembersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Members.
     * @param {MembersCreateArgs} args - Arguments to create a Members.
     * @example
     * // Create one Members
     * const Members = await prisma.members.create({
     *   data: {
     *     // ... data to create a Members
     *   }
     * })
     * 
     */
    create<T extends MembersCreateArgs>(args: SelectSubset<T, MembersCreateArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Members.
     * @param {MembersCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const members = await prisma.members.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MembersCreateManyArgs>(args?: SelectSubset<T, MembersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MembersCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const members = await prisma.members.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const membersWithIdOnly = await prisma.members.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MembersCreateManyAndReturnArgs>(args?: SelectSubset<T, MembersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Members.
     * @param {MembersDeleteArgs} args - Arguments to delete one Members.
     * @example
     * // Delete one Members
     * const Members = await prisma.members.delete({
     *   where: {
     *     // ... filter to delete one Members
     *   }
     * })
     * 
     */
    delete<T extends MembersDeleteArgs>(args: SelectSubset<T, MembersDeleteArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Members.
     * @param {MembersUpdateArgs} args - Arguments to update one Members.
     * @example
     * // Update one Members
     * const members = await prisma.members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MembersUpdateArgs>(args: SelectSubset<T, MembersUpdateArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Members.
     * @param {MembersDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MembersDeleteManyArgs>(args?: SelectSubset<T, MembersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const members = await prisma.members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MembersUpdateManyArgs>(args: SelectSubset<T, MembersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members and returns the data updated in the database.
     * @param {MembersUpdateManyAndReturnArgs} args - Arguments to update many Members.
     * @example
     * // Update many Members
     * const members = await prisma.members.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Members and only return the `id`
     * const membersWithIdOnly = await prisma.members.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MembersUpdateManyAndReturnArgs>(args: SelectSubset<T, MembersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Members.
     * @param {MembersUpsertArgs} args - Arguments to update or create a Members.
     * @example
     * // Update or create a Members
     * const members = await prisma.members.upsert({
     *   create: {
     *     // ... data to create a Members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Members we want to update
     *   }
     * })
     */
    upsert<T extends MembersUpsertArgs>(args: SelectSubset<T, MembersUpsertArgs<ExtArgs>>): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.members.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MembersCountArgs>(
      args?: Subset<T, MembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembersAggregateArgs>(args: Subset<T, MembersAggregateArgs>): Prisma.PrismaPromise<GetMembersAggregateType<T>>

    /**
     * Group by Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembersGroupByArgs['orderBy'] }
        : { orderBy?: MembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Members model
   */
  readonly fields: MembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MembersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Members model
   */
  interface MembersFieldRefs {
    readonly id: FieldRef<"Members", 'String'>
    readonly user_id: FieldRef<"Members", 'String'>
    readonly FirstName: FieldRef<"Members", 'String'>
    readonly LastName: FieldRef<"Members", 'String'>
    readonly phone: FieldRef<"Members", 'String'>
    readonly position: FieldRef<"Members", 'String'>
    readonly address: FieldRef<"Members", 'String'>
    readonly certificate: FieldRef<"Members", 'String'>
    readonly Photo: FieldRef<"Members", 'String'>
    readonly gender: FieldRef<"Members", 'Gender'>
    readonly dob: FieldRef<"Members", 'DateTime'>
    readonly salary: FieldRef<"Members", 'Float'>
    readonly joining_date: FieldRef<"Members", 'DateTime'>
    readonly status: FieldRef<"Members", 'Status'>
    readonly role: FieldRef<"Members", 'Role'>
    readonly biography: FieldRef<"Members", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Members findUnique
   */
  export type MembersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where: MembersWhereUniqueInput
  }

  /**
   * Members findUniqueOrThrow
   */
  export type MembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where: MembersWhereUniqueInput
  }

  /**
   * Members findFirst
   */
  export type MembersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }

  /**
   * Members findFirstOrThrow
   */
  export type MembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }

  /**
   * Members findMany
   */
  export type MembersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }

  /**
   * Members create
   */
  export type MembersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * The data needed to create a Members.
     */
    data: XOR<MembersCreateInput, MembersUncheckedCreateInput>
  }

  /**
   * Members createMany
   */
  export type MembersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MembersCreateManyInput | MembersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Members createManyAndReturn
   */
  export type MembersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MembersCreateManyInput | MembersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Members update
   */
  export type MembersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * The data needed to update a Members.
     */
    data: XOR<MembersUpdateInput, MembersUncheckedUpdateInput>
    /**
     * Choose, which Members to update.
     */
    where: MembersWhereUniqueInput
  }

  /**
   * Members updateMany
   */
  export type MembersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MembersUpdateManyMutationInput, MembersUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MembersWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Members updateManyAndReturn
   */
  export type MembersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * The data used to update Members.
     */
    data: XOR<MembersUpdateManyMutationInput, MembersUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MembersWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Members upsert
   */
  export type MembersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * The filter to search for the Members to update in case it exists.
     */
    where: MembersWhereUniqueInput
    /**
     * In case the Members found by the `where` argument doesn't exist, create a new Members with this data.
     */
    create: XOR<MembersCreateInput, MembersUncheckedCreateInput>
    /**
     * In case the Members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembersUpdateInput, MembersUncheckedUpdateInput>
  }

  /**
   * Members delete
   */
  export type MembersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter which Members to delete.
     */
    where: MembersWhereUniqueInput
  }

  /**
   * Members deleteMany
   */
  export type MembersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MembersWhereInput
    /**
     * Limit how many Members to delete.
     */
    limit?: number
  }

  /**
   * Members without action
   */
  export type MembersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Members
     */
    omit?: MembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembersInclude<ExtArgs> | null
  }


  /**
   * Model Suppliers
   */

  export type AggregateSuppliers = {
    _count: SuppliersCountAggregateOutputType | null
    _min: SuppliersMinAggregateOutputType | null
    _max: SuppliersMaxAggregateOutputType | null
  }

  export type SuppliersMinAggregateOutputType = {
    id: string | null
    supplier_name: string | null
    contact_info: string | null
    payment_info_cbe: string | null
    payment_info_coop: string | null
    payment_info_boa: string | null
    payment_info_awash: string | null
    payment_info_ebirr: string | null
    location: string | null
    email: string | null
  }

  export type SuppliersMaxAggregateOutputType = {
    id: string | null
    supplier_name: string | null
    contact_info: string | null
    payment_info_cbe: string | null
    payment_info_coop: string | null
    payment_info_boa: string | null
    payment_info_awash: string | null
    payment_info_ebirr: string | null
    location: string | null
    email: string | null
  }

  export type SuppliersCountAggregateOutputType = {
    id: number
    supplier_name: number
    contact_info: number
    payment_info_cbe: number
    payment_info_coop: number
    payment_info_boa: number
    payment_info_awash: number
    payment_info_ebirr: number
    location: number
    email: number
    _all: number
  }


  export type SuppliersMinAggregateInputType = {
    id?: true
    supplier_name?: true
    contact_info?: true
    payment_info_cbe?: true
    payment_info_coop?: true
    payment_info_boa?: true
    payment_info_awash?: true
    payment_info_ebirr?: true
    location?: true
    email?: true
  }

  export type SuppliersMaxAggregateInputType = {
    id?: true
    supplier_name?: true
    contact_info?: true
    payment_info_cbe?: true
    payment_info_coop?: true
    payment_info_boa?: true
    payment_info_awash?: true
    payment_info_ebirr?: true
    location?: true
    email?: true
  }

  export type SuppliersCountAggregateInputType = {
    id?: true
    supplier_name?: true
    contact_info?: true
    payment_info_cbe?: true
    payment_info_coop?: true
    payment_info_boa?: true
    payment_info_awash?: true
    payment_info_ebirr?: true
    location?: true
    email?: true
    _all?: true
  }

  export type SuppliersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to aggregate.
     */
    where?: SuppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SuppliersOrderByWithRelationInput | SuppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SuppliersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuppliersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuppliersMaxAggregateInputType
  }

  export type GetSuppliersAggregateType<T extends SuppliersAggregateArgs> = {
        [P in keyof T & keyof AggregateSuppliers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuppliers[P]>
      : GetScalarType<T[P], AggregateSuppliers[P]>
  }




  export type SuppliersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuppliersWhereInput
    orderBy?: SuppliersOrderByWithAggregationInput | SuppliersOrderByWithAggregationInput[]
    by: SuppliersScalarFieldEnum[] | SuppliersScalarFieldEnum
    having?: SuppliersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuppliersCountAggregateInputType | true
    _min?: SuppliersMinAggregateInputType
    _max?: SuppliersMaxAggregateInputType
  }

  export type SuppliersGroupByOutputType = {
    id: string
    supplier_name: string
    contact_info: string
    payment_info_cbe: string | null
    payment_info_coop: string | null
    payment_info_boa: string | null
    payment_info_awash: string | null
    payment_info_ebirr: string | null
    location: string
    email: string | null
    _count: SuppliersCountAggregateOutputType | null
    _min: SuppliersMinAggregateOutputType | null
    _max: SuppliersMaxAggregateOutputType | null
  }

  type GetSuppliersGroupByPayload<T extends SuppliersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuppliersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuppliersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuppliersGroupByOutputType[P]>
            : GetScalarType<T[P], SuppliersGroupByOutputType[P]>
        }
      >
    >


  export type SuppliersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_name?: boolean
    contact_info?: boolean
    payment_info_cbe?: boolean
    payment_info_coop?: boolean
    payment_info_boa?: boolean
    payment_info_awash?: boolean
    payment_info_ebirr?: boolean
    location?: boolean
    email?: boolean
    SupplierCredits?: boolean | Suppliers$SupplierCreditsArgs<ExtArgs>
    Medicines?: boolean | Suppliers$MedicinesArgs<ExtArgs>
    _count?: boolean | SuppliersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suppliers"]>

  export type SuppliersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_name?: boolean
    contact_info?: boolean
    payment_info_cbe?: boolean
    payment_info_coop?: boolean
    payment_info_boa?: boolean
    payment_info_awash?: boolean
    payment_info_ebirr?: boolean
    location?: boolean
    email?: boolean
  }, ExtArgs["result"]["suppliers"]>

  export type SuppliersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_name?: boolean
    contact_info?: boolean
    payment_info_cbe?: boolean
    payment_info_coop?: boolean
    payment_info_boa?: boolean
    payment_info_awash?: boolean
    payment_info_ebirr?: boolean
    location?: boolean
    email?: boolean
  }, ExtArgs["result"]["suppliers"]>

  export type SuppliersSelectScalar = {
    id?: boolean
    supplier_name?: boolean
    contact_info?: boolean
    payment_info_cbe?: boolean
    payment_info_coop?: boolean
    payment_info_boa?: boolean
    payment_info_awash?: boolean
    payment_info_ebirr?: boolean
    location?: boolean
    email?: boolean
  }

  export type SuppliersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "supplier_name" | "contact_info" | "payment_info_cbe" | "payment_info_coop" | "payment_info_boa" | "payment_info_awash" | "payment_info_ebirr" | "location" | "email", ExtArgs["result"]["suppliers"]>
  export type SuppliersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SupplierCredits?: boolean | Suppliers$SupplierCreditsArgs<ExtArgs>
    Medicines?: boolean | Suppliers$MedicinesArgs<ExtArgs>
    _count?: boolean | SuppliersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SuppliersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SuppliersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SuppliersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Suppliers"
    objects: {
      SupplierCredits: Prisma.$SupplierCreditsPayload<ExtArgs>[]
      Medicines: Prisma.$MedicinesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      supplier_name: string
      contact_info: string
      payment_info_cbe: string | null
      payment_info_coop: string | null
      payment_info_boa: string | null
      payment_info_awash: string | null
      payment_info_ebirr: string | null
      location: string
      email: string | null
    }, ExtArgs["result"]["suppliers"]>
    composites: {}
  }

  type SuppliersGetPayload<S extends boolean | null | undefined | SuppliersDefaultArgs> = $Result.GetResult<Prisma.$SuppliersPayload, S>

  type SuppliersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SuppliersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuppliersCountAggregateInputType | true
    }

  export interface SuppliersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Suppliers'], meta: { name: 'Suppliers' } }
    /**
     * Find zero or one Suppliers that matches the filter.
     * @param {SuppliersFindUniqueArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuppliersFindUniqueArgs>(args: SelectSubset<T, SuppliersFindUniqueArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Suppliers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SuppliersFindUniqueOrThrowArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuppliersFindUniqueOrThrowArgs>(args: SelectSubset<T, SuppliersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersFindFirstArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuppliersFindFirstArgs>(args?: SelectSubset<T, SuppliersFindFirstArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Suppliers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersFindFirstOrThrowArgs} args - Arguments to find a Suppliers
     * @example
     * // Get one Suppliers
     * const suppliers = await prisma.suppliers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuppliersFindFirstOrThrowArgs>(args?: SelectSubset<T, SuppliersFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.suppliers.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.suppliers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suppliersWithIdOnly = await prisma.suppliers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SuppliersFindManyArgs>(args?: SelectSubset<T, SuppliersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Suppliers.
     * @param {SuppliersCreateArgs} args - Arguments to create a Suppliers.
     * @example
     * // Create one Suppliers
     * const Suppliers = await prisma.suppliers.create({
     *   data: {
     *     // ... data to create a Suppliers
     *   }
     * })
     * 
     */
    create<T extends SuppliersCreateArgs>(args: SelectSubset<T, SuppliersCreateArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Suppliers.
     * @param {SuppliersCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const suppliers = await prisma.suppliers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuppliersCreateManyArgs>(args?: SelectSubset<T, SuppliersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Suppliers and returns the data saved in the database.
     * @param {SuppliersCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const suppliers = await prisma.suppliers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Suppliers and only return the `id`
     * const suppliersWithIdOnly = await prisma.suppliers.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SuppliersCreateManyAndReturnArgs>(args?: SelectSubset<T, SuppliersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Suppliers.
     * @param {SuppliersDeleteArgs} args - Arguments to delete one Suppliers.
     * @example
     * // Delete one Suppliers
     * const Suppliers = await prisma.suppliers.delete({
     *   where: {
     *     // ... filter to delete one Suppliers
     *   }
     * })
     * 
     */
    delete<T extends SuppliersDeleteArgs>(args: SelectSubset<T, SuppliersDeleteArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Suppliers.
     * @param {SuppliersUpdateArgs} args - Arguments to update one Suppliers.
     * @example
     * // Update one Suppliers
     * const suppliers = await prisma.suppliers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuppliersUpdateArgs>(args: SelectSubset<T, SuppliersUpdateArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Suppliers.
     * @param {SuppliersDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.suppliers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuppliersDeleteManyArgs>(args?: SelectSubset<T, SuppliersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const suppliers = await prisma.suppliers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuppliersUpdateManyArgs>(args: SelectSubset<T, SuppliersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers and returns the data updated in the database.
     * @param {SuppliersUpdateManyAndReturnArgs} args - Arguments to update many Suppliers.
     * @example
     * // Update many Suppliers
     * const suppliers = await prisma.suppliers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Suppliers and only return the `id`
     * const suppliersWithIdOnly = await prisma.suppliers.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SuppliersUpdateManyAndReturnArgs>(args: SelectSubset<T, SuppliersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Suppliers.
     * @param {SuppliersUpsertArgs} args - Arguments to update or create a Suppliers.
     * @example
     * // Update or create a Suppliers
     * const suppliers = await prisma.suppliers.upsert({
     *   create: {
     *     // ... data to create a Suppliers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Suppliers we want to update
     *   }
     * })
     */
    upsert<T extends SuppliersUpsertArgs>(args: SelectSubset<T, SuppliersUpsertArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.suppliers.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SuppliersCountArgs>(
      args?: Subset<T, SuppliersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuppliersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuppliersAggregateArgs>(args: Subset<T, SuppliersAggregateArgs>): Prisma.PrismaPromise<GetSuppliersAggregateType<T>>

    /**
     * Group by Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuppliersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuppliersGroupByArgs['orderBy'] }
        : { orderBy?: SuppliersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuppliersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuppliersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Suppliers model
   */
  readonly fields: SuppliersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Suppliers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuppliersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SupplierCredits<T extends Suppliers$SupplierCreditsArgs<ExtArgs> = {}>(args?: Subset<T, Suppliers$SupplierCreditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Medicines<T extends Suppliers$MedicinesArgs<ExtArgs> = {}>(args?: Subset<T, Suppliers$MedicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Suppliers model
   */
  interface SuppliersFieldRefs {
    readonly id: FieldRef<"Suppliers", 'String'>
    readonly supplier_name: FieldRef<"Suppliers", 'String'>
    readonly contact_info: FieldRef<"Suppliers", 'String'>
    readonly payment_info_cbe: FieldRef<"Suppliers", 'String'>
    readonly payment_info_coop: FieldRef<"Suppliers", 'String'>
    readonly payment_info_boa: FieldRef<"Suppliers", 'String'>
    readonly payment_info_awash: FieldRef<"Suppliers", 'String'>
    readonly payment_info_ebirr: FieldRef<"Suppliers", 'String'>
    readonly location: FieldRef<"Suppliers", 'String'>
    readonly email: FieldRef<"Suppliers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Suppliers findUnique
   */
  export type SuppliersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where: SuppliersWhereUniqueInput
  }

  /**
   * Suppliers findUniqueOrThrow
   */
  export type SuppliersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where: SuppliersWhereUniqueInput
  }

  /**
   * Suppliers findFirst
   */
  export type SuppliersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SuppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SuppliersOrderByWithRelationInput | SuppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SuppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SuppliersScalarFieldEnum | SuppliersScalarFieldEnum[]
  }

  /**
   * Suppliers findFirstOrThrow
   */
  export type SuppliersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SuppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SuppliersOrderByWithRelationInput | SuppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SuppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SuppliersScalarFieldEnum | SuppliersScalarFieldEnum[]
  }

  /**
   * Suppliers findMany
   */
  export type SuppliersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SuppliersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SuppliersOrderByWithRelationInput | SuppliersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SuppliersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SuppliersScalarFieldEnum | SuppliersScalarFieldEnum[]
  }

  /**
   * Suppliers create
   */
  export type SuppliersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * The data needed to create a Suppliers.
     */
    data: XOR<SuppliersCreateInput, SuppliersUncheckedCreateInput>
  }

  /**
   * Suppliers createMany
   */
  export type SuppliersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SuppliersCreateManyInput | SuppliersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Suppliers createManyAndReturn
   */
  export type SuppliersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * The data used to create many Suppliers.
     */
    data: SuppliersCreateManyInput | SuppliersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Suppliers update
   */
  export type SuppliersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * The data needed to update a Suppliers.
     */
    data: XOR<SuppliersUpdateInput, SuppliersUncheckedUpdateInput>
    /**
     * Choose, which Suppliers to update.
     */
    where: SuppliersWhereUniqueInput
  }

  /**
   * Suppliers updateMany
   */
  export type SuppliersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SuppliersUpdateManyMutationInput, SuppliersUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SuppliersWhereInput
    /**
     * Limit how many Suppliers to update.
     */
    limit?: number
  }

  /**
   * Suppliers updateManyAndReturn
   */
  export type SuppliersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SuppliersUpdateManyMutationInput, SuppliersUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SuppliersWhereInput
    /**
     * Limit how many Suppliers to update.
     */
    limit?: number
  }

  /**
   * Suppliers upsert
   */
  export type SuppliersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * The filter to search for the Suppliers to update in case it exists.
     */
    where: SuppliersWhereUniqueInput
    /**
     * In case the Suppliers found by the `where` argument doesn't exist, create a new Suppliers with this data.
     */
    create: XOR<SuppliersCreateInput, SuppliersUncheckedCreateInput>
    /**
     * In case the Suppliers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuppliersUpdateInput, SuppliersUncheckedUpdateInput>
  }

  /**
   * Suppliers delete
   */
  export type SuppliersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
    /**
     * Filter which Suppliers to delete.
     */
    where: SuppliersWhereUniqueInput
  }

  /**
   * Suppliers deleteMany
   */
  export type SuppliersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SuppliersWhereInput
    /**
     * Limit how many Suppliers to delete.
     */
    limit?: number
  }

  /**
   * Suppliers.SupplierCredits
   */
  export type Suppliers$SupplierCreditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    where?: SupplierCreditsWhereInput
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    cursor?: SupplierCreditsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierCreditsScalarFieldEnum | SupplierCreditsScalarFieldEnum[]
  }

  /**
   * Suppliers.Medicines
   */
  export type Suppliers$MedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    where?: MedicinesWhereInput
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    cursor?: MedicinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * Suppliers without action
   */
  export type SuppliersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suppliers
     */
    select?: SuppliersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Suppliers
     */
    omit?: SuppliersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuppliersInclude<ExtArgs> | null
  }


  /**
   * Model Categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to aggregate.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriesWhereInput
    orderBy?: CategoriesOrderByWithAggregationInput | CategoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: CategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: string
    name: string
    _count: CategoriesCountAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Medicines?: boolean | Categories$MedicinesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type CategoriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["categories"]>

  export type CategoriesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["categories"]>

  export type CategoriesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoriesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["categories"]>
  export type CategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Medicines?: boolean | Categories$MedicinesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoriesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categories"
    objects: {
      Medicines: Prisma.$MedicinesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }

  type CategoriesGetPayload<S extends boolean | null | undefined | CategoriesDefaultArgs> = $Result.GetResult<Prisma.$CategoriesPayload, S>

  type CategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface CategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categories'], meta: { name: 'Categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {CategoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriesFindUniqueArgs>(args: SelectSubset<T, CategoriesFindUniqueArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categories that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriesFindFirstArgs>(args?: SelectSubset<T, CategoriesFindFirstArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriesFindManyArgs>(args?: SelectSubset<T, CategoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categories.
     * @param {CategoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
     */
    create<T extends CategoriesCreateArgs>(args: SelectSubset<T, CategoriesCreateArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoriesCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categories = await prisma.categories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriesCreateManyArgs>(args?: SelectSubset<T, CategoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoriesCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categories = await prisma.categories.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoriesWithIdOnly = await prisma.categories.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriesCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Categories.
     * @param {CategoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
     */
    delete<T extends CategoriesDeleteArgs>(args: SelectSubset<T, CategoriesDeleteArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categories.
     * @param {CategoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriesUpdateArgs>(args: SelectSubset<T, CategoriesUpdateArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriesDeleteManyArgs>(args?: SelectSubset<T, CategoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriesUpdateManyArgs>(args: SelectSubset<T, CategoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoriesUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoriesWithIdOnly = await prisma.categories.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoriesUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Categories.
     * @param {CategoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
     */
    upsert<T extends CategoriesUpsertArgs>(args: SelectSubset<T, CategoriesUpsertArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoriesCountArgs>(
      args?: Subset<T, CategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categories model
   */
  readonly fields: CategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Medicines<T extends Categories$MedicinesArgs<ExtArgs> = {}>(args?: Subset<T, Categories$MedicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categories model
   */
  interface CategoriesFieldRefs {
    readonly id: FieldRef<"Categories", 'String'>
    readonly name: FieldRef<"Categories", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categories findUnique
   */
  export type CategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }

  /**
   * Categories findUniqueOrThrow
   */
  export type CategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }

  /**
   * Categories findFirst
   */
  export type CategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * Categories findFirstOrThrow
   */
  export type CategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * Categories findMany
   */
  export type CategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * Categories create
   */
  export type CategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a Categories.
     */
    data: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
  }

  /**
   * Categories createMany
   */
  export type CategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoriesCreateManyInput | CategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categories createManyAndReturn
   */
  export type CategoriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoriesCreateManyInput | CategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categories update
   */
  export type CategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a Categories.
     */
    data: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
    /**
     * Choose, which Categories to update.
     */
    where: CategoriesWhereUniqueInput
  }

  /**
   * Categories updateMany
   */
  export type CategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoriesWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Categories updateManyAndReturn
   */
  export type CategoriesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoriesWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Categories upsert
   */
  export type CategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the Categories to update in case it exists.
     */
    where: CategoriesWhereUniqueInput
    /**
     * In case the Categories found by the `where` argument doesn't exist, create a new Categories with this data.
     */
    create: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
    /**
     * In case the Categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
  }

  /**
   * Categories delete
   */
  export type CategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter which Categories to delete.
     */
    where: CategoriesWhereUniqueInput
  }

  /**
   * Categories deleteMany
   */
  export type CategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoriesWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Categories.Medicines
   */
  export type Categories$MedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    where?: MedicinesWhereInput
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    cursor?: MedicinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * Categories without action
   */
  export type CategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categories
     */
    omit?: CategoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriesInclude<ExtArgs> | null
  }


  /**
   * Model DosageForms
   */

  export type AggregateDosageForms = {
    _count: DosageFormsCountAggregateOutputType | null
    _min: DosageFormsMinAggregateOutputType | null
    _max: DosageFormsMaxAggregateOutputType | null
  }

  export type DosageFormsMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DosageFormsMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DosageFormsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DosageFormsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DosageFormsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DosageFormsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DosageFormsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DosageForms to aggregate.
     */
    where?: DosageFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DosageForms to fetch.
     */
    orderBy?: DosageFormsOrderByWithRelationInput | DosageFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DosageFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DosageForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DosageForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DosageForms
    **/
    _count?: true | DosageFormsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DosageFormsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DosageFormsMaxAggregateInputType
  }

  export type GetDosageFormsAggregateType<T extends DosageFormsAggregateArgs> = {
        [P in keyof T & keyof AggregateDosageForms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDosageForms[P]>
      : GetScalarType<T[P], AggregateDosageForms[P]>
  }




  export type DosageFormsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DosageFormsWhereInput
    orderBy?: DosageFormsOrderByWithAggregationInput | DosageFormsOrderByWithAggregationInput[]
    by: DosageFormsScalarFieldEnum[] | DosageFormsScalarFieldEnum
    having?: DosageFormsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DosageFormsCountAggregateInputType | true
    _min?: DosageFormsMinAggregateInputType
    _max?: DosageFormsMaxAggregateInputType
  }

  export type DosageFormsGroupByOutputType = {
    id: string
    name: string
    _count: DosageFormsCountAggregateOutputType | null
    _min: DosageFormsMinAggregateOutputType | null
    _max: DosageFormsMaxAggregateOutputType | null
  }

  type GetDosageFormsGroupByPayload<T extends DosageFormsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DosageFormsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DosageFormsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DosageFormsGroupByOutputType[P]>
            : GetScalarType<T[P], DosageFormsGroupByOutputType[P]>
        }
      >
    >


  export type DosageFormsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Medicines?: boolean | DosageForms$MedicinesArgs<ExtArgs>
    Sales?: boolean | DosageForms$SalesArgs<ExtArgs>
    Returns?: boolean | DosageForms$ReturnsArgs<ExtArgs>
    _count?: boolean | DosageFormsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dosageForms"]>

  export type DosageFormsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["dosageForms"]>

  export type DosageFormsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["dosageForms"]>

  export type DosageFormsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type DosageFormsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["dosageForms"]>
  export type DosageFormsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Medicines?: boolean | DosageForms$MedicinesArgs<ExtArgs>
    Sales?: boolean | DosageForms$SalesArgs<ExtArgs>
    Returns?: boolean | DosageForms$ReturnsArgs<ExtArgs>
    _count?: boolean | DosageFormsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DosageFormsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DosageFormsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DosageFormsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DosageForms"
    objects: {
      Medicines: Prisma.$MedicinesPayload<ExtArgs>[]
      Sales: Prisma.$SalesPayload<ExtArgs>[]
      Returns: Prisma.$ReturnsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["dosageForms"]>
    composites: {}
  }

  type DosageFormsGetPayload<S extends boolean | null | undefined | DosageFormsDefaultArgs> = $Result.GetResult<Prisma.$DosageFormsPayload, S>

  type DosageFormsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DosageFormsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DosageFormsCountAggregateInputType | true
    }

  export interface DosageFormsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DosageForms'], meta: { name: 'DosageForms' } }
    /**
     * Find zero or one DosageForms that matches the filter.
     * @param {DosageFormsFindUniqueArgs} args - Arguments to find a DosageForms
     * @example
     * // Get one DosageForms
     * const dosageForms = await prisma.dosageForms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DosageFormsFindUniqueArgs>(args: SelectSubset<T, DosageFormsFindUniqueArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DosageForms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DosageFormsFindUniqueOrThrowArgs} args - Arguments to find a DosageForms
     * @example
     * // Get one DosageForms
     * const dosageForms = await prisma.dosageForms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DosageFormsFindUniqueOrThrowArgs>(args: SelectSubset<T, DosageFormsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DosageForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsFindFirstArgs} args - Arguments to find a DosageForms
     * @example
     * // Get one DosageForms
     * const dosageForms = await prisma.dosageForms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DosageFormsFindFirstArgs>(args?: SelectSubset<T, DosageFormsFindFirstArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DosageForms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsFindFirstOrThrowArgs} args - Arguments to find a DosageForms
     * @example
     * // Get one DosageForms
     * const dosageForms = await prisma.dosageForms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DosageFormsFindFirstOrThrowArgs>(args?: SelectSubset<T, DosageFormsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DosageForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DosageForms
     * const dosageForms = await prisma.dosageForms.findMany()
     * 
     * // Get first 10 DosageForms
     * const dosageForms = await prisma.dosageForms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dosageFormsWithIdOnly = await prisma.dosageForms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DosageFormsFindManyArgs>(args?: SelectSubset<T, DosageFormsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DosageForms.
     * @param {DosageFormsCreateArgs} args - Arguments to create a DosageForms.
     * @example
     * // Create one DosageForms
     * const DosageForms = await prisma.dosageForms.create({
     *   data: {
     *     // ... data to create a DosageForms
     *   }
     * })
     * 
     */
    create<T extends DosageFormsCreateArgs>(args: SelectSubset<T, DosageFormsCreateArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DosageForms.
     * @param {DosageFormsCreateManyArgs} args - Arguments to create many DosageForms.
     * @example
     * // Create many DosageForms
     * const dosageForms = await prisma.dosageForms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DosageFormsCreateManyArgs>(args?: SelectSubset<T, DosageFormsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DosageForms and returns the data saved in the database.
     * @param {DosageFormsCreateManyAndReturnArgs} args - Arguments to create many DosageForms.
     * @example
     * // Create many DosageForms
     * const dosageForms = await prisma.dosageForms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DosageForms and only return the `id`
     * const dosageFormsWithIdOnly = await prisma.dosageForms.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DosageFormsCreateManyAndReturnArgs>(args?: SelectSubset<T, DosageFormsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DosageForms.
     * @param {DosageFormsDeleteArgs} args - Arguments to delete one DosageForms.
     * @example
     * // Delete one DosageForms
     * const DosageForms = await prisma.dosageForms.delete({
     *   where: {
     *     // ... filter to delete one DosageForms
     *   }
     * })
     * 
     */
    delete<T extends DosageFormsDeleteArgs>(args: SelectSubset<T, DosageFormsDeleteArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DosageForms.
     * @param {DosageFormsUpdateArgs} args - Arguments to update one DosageForms.
     * @example
     * // Update one DosageForms
     * const dosageForms = await prisma.dosageForms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DosageFormsUpdateArgs>(args: SelectSubset<T, DosageFormsUpdateArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DosageForms.
     * @param {DosageFormsDeleteManyArgs} args - Arguments to filter DosageForms to delete.
     * @example
     * // Delete a few DosageForms
     * const { count } = await prisma.dosageForms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DosageFormsDeleteManyArgs>(args?: SelectSubset<T, DosageFormsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DosageForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DosageForms
     * const dosageForms = await prisma.dosageForms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DosageFormsUpdateManyArgs>(args: SelectSubset<T, DosageFormsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DosageForms and returns the data updated in the database.
     * @param {DosageFormsUpdateManyAndReturnArgs} args - Arguments to update many DosageForms.
     * @example
     * // Update many DosageForms
     * const dosageForms = await prisma.dosageForms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DosageForms and only return the `id`
     * const dosageFormsWithIdOnly = await prisma.dosageForms.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DosageFormsUpdateManyAndReturnArgs>(args: SelectSubset<T, DosageFormsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DosageForms.
     * @param {DosageFormsUpsertArgs} args - Arguments to update or create a DosageForms.
     * @example
     * // Update or create a DosageForms
     * const dosageForms = await prisma.dosageForms.upsert({
     *   create: {
     *     // ... data to create a DosageForms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DosageForms we want to update
     *   }
     * })
     */
    upsert<T extends DosageFormsUpsertArgs>(args: SelectSubset<T, DosageFormsUpsertArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DosageForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsCountArgs} args - Arguments to filter DosageForms to count.
     * @example
     * // Count the number of DosageForms
     * const count = await prisma.dosageForms.count({
     *   where: {
     *     // ... the filter for the DosageForms we want to count
     *   }
     * })
    **/
    count<T extends DosageFormsCountArgs>(
      args?: Subset<T, DosageFormsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DosageFormsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DosageForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DosageFormsAggregateArgs>(args: Subset<T, DosageFormsAggregateArgs>): Prisma.PrismaPromise<GetDosageFormsAggregateType<T>>

    /**
     * Group by DosageForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DosageFormsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DosageFormsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DosageFormsGroupByArgs['orderBy'] }
        : { orderBy?: DosageFormsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DosageFormsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDosageFormsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DosageForms model
   */
  readonly fields: DosageFormsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DosageForms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DosageFormsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Medicines<T extends DosageForms$MedicinesArgs<ExtArgs> = {}>(args?: Subset<T, DosageForms$MedicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Sales<T extends DosageForms$SalesArgs<ExtArgs> = {}>(args?: Subset<T, DosageForms$SalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Returns<T extends DosageForms$ReturnsArgs<ExtArgs> = {}>(args?: Subset<T, DosageForms$ReturnsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DosageForms model
   */
  interface DosageFormsFieldRefs {
    readonly id: FieldRef<"DosageForms", 'String'>
    readonly name: FieldRef<"DosageForms", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DosageForms findUnique
   */
  export type DosageFormsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * Filter, which DosageForms to fetch.
     */
    where: DosageFormsWhereUniqueInput
  }

  /**
   * DosageForms findUniqueOrThrow
   */
  export type DosageFormsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * Filter, which DosageForms to fetch.
     */
    where: DosageFormsWhereUniqueInput
  }

  /**
   * DosageForms findFirst
   */
  export type DosageFormsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * Filter, which DosageForms to fetch.
     */
    where?: DosageFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DosageForms to fetch.
     */
    orderBy?: DosageFormsOrderByWithRelationInput | DosageFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DosageForms.
     */
    cursor?: DosageFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DosageForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DosageForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DosageForms.
     */
    distinct?: DosageFormsScalarFieldEnum | DosageFormsScalarFieldEnum[]
  }

  /**
   * DosageForms findFirstOrThrow
   */
  export type DosageFormsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * Filter, which DosageForms to fetch.
     */
    where?: DosageFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DosageForms to fetch.
     */
    orderBy?: DosageFormsOrderByWithRelationInput | DosageFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DosageForms.
     */
    cursor?: DosageFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DosageForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DosageForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DosageForms.
     */
    distinct?: DosageFormsScalarFieldEnum | DosageFormsScalarFieldEnum[]
  }

  /**
   * DosageForms findMany
   */
  export type DosageFormsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * Filter, which DosageForms to fetch.
     */
    where?: DosageFormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DosageForms to fetch.
     */
    orderBy?: DosageFormsOrderByWithRelationInput | DosageFormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DosageForms.
     */
    cursor?: DosageFormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DosageForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DosageForms.
     */
    skip?: number
    distinct?: DosageFormsScalarFieldEnum | DosageFormsScalarFieldEnum[]
  }

  /**
   * DosageForms create
   */
  export type DosageFormsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * The data needed to create a DosageForms.
     */
    data: XOR<DosageFormsCreateInput, DosageFormsUncheckedCreateInput>
  }

  /**
   * DosageForms createMany
   */
  export type DosageFormsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DosageForms.
     */
    data: DosageFormsCreateManyInput | DosageFormsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DosageForms createManyAndReturn
   */
  export type DosageFormsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * The data used to create many DosageForms.
     */
    data: DosageFormsCreateManyInput | DosageFormsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DosageForms update
   */
  export type DosageFormsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * The data needed to update a DosageForms.
     */
    data: XOR<DosageFormsUpdateInput, DosageFormsUncheckedUpdateInput>
    /**
     * Choose, which DosageForms to update.
     */
    where: DosageFormsWhereUniqueInput
  }

  /**
   * DosageForms updateMany
   */
  export type DosageFormsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DosageForms.
     */
    data: XOR<DosageFormsUpdateManyMutationInput, DosageFormsUncheckedUpdateManyInput>
    /**
     * Filter which DosageForms to update
     */
    where?: DosageFormsWhereInput
    /**
     * Limit how many DosageForms to update.
     */
    limit?: number
  }

  /**
   * DosageForms updateManyAndReturn
   */
  export type DosageFormsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * The data used to update DosageForms.
     */
    data: XOR<DosageFormsUpdateManyMutationInput, DosageFormsUncheckedUpdateManyInput>
    /**
     * Filter which DosageForms to update
     */
    where?: DosageFormsWhereInput
    /**
     * Limit how many DosageForms to update.
     */
    limit?: number
  }

  /**
   * DosageForms upsert
   */
  export type DosageFormsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * The filter to search for the DosageForms to update in case it exists.
     */
    where: DosageFormsWhereUniqueInput
    /**
     * In case the DosageForms found by the `where` argument doesn't exist, create a new DosageForms with this data.
     */
    create: XOR<DosageFormsCreateInput, DosageFormsUncheckedCreateInput>
    /**
     * In case the DosageForms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DosageFormsUpdateInput, DosageFormsUncheckedUpdateInput>
  }

  /**
   * DosageForms delete
   */
  export type DosageFormsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
    /**
     * Filter which DosageForms to delete.
     */
    where: DosageFormsWhereUniqueInput
  }

  /**
   * DosageForms deleteMany
   */
  export type DosageFormsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DosageForms to delete
     */
    where?: DosageFormsWhereInput
    /**
     * Limit how many DosageForms to delete.
     */
    limit?: number
  }

  /**
   * DosageForms.Medicines
   */
  export type DosageForms$MedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    where?: MedicinesWhereInput
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    cursor?: MedicinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * DosageForms.Sales
   */
  export type DosageForms$SalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    where?: SalesWhereInput
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    cursor?: SalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * DosageForms.Returns
   */
  export type DosageForms$ReturnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    where?: ReturnsWhereInput
    orderBy?: ReturnsOrderByWithRelationInput | ReturnsOrderByWithRelationInput[]
    cursor?: ReturnsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReturnsScalarFieldEnum | ReturnsScalarFieldEnum[]
  }

  /**
   * DosageForms without action
   */
  export type DosageFormsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DosageForms
     */
    select?: DosageFormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DosageForms
     */
    omit?: DosageFormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DosageFormsInclude<ExtArgs> | null
  }


  /**
   * Model Medicines
   */

  export type AggregateMedicines = {
    _count: MedicinesCountAggregateOutputType | null
    _avg: MedicinesAvgAggregateOutputType | null
    _sum: MedicinesSumAggregateOutputType | null
    _min: MedicinesMinAggregateOutputType | null
    _max: MedicinesMaxAggregateOutputType | null
  }

  export type MedicinesAvgAggregateOutputType = {
    medicine_weight: number | null
    quantity: number | null
    unit_price: number | null
    sell_price: number | null
    total_price: number | null
  }

  export type MedicinesSumAggregateOutputType = {
    medicine_weight: number | null
    quantity: number | null
    unit_price: number | null
    sell_price: number | null
    total_price: number | null
  }

  export type MedicinesMinAggregateOutputType = {
    id: string | null
    medicine_name: string | null
    brand_name: string | null
    batch_number: string | null
    category_id: string | null
    dosage_form_id: string | null
    medicine_weight: number | null
    quantity: number | null
    supplier_id: string | null
    invoice_number: string | null
    unit_price: number | null
    sell_price: number | null
    total_price: number | null
    expire_date: Date | null
    required_prescription: boolean | null
    payment_method: $Enums.PaymentMethod | null
    Payment_file: string | null
    details: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicinesMaxAggregateOutputType = {
    id: string | null
    medicine_name: string | null
    brand_name: string | null
    batch_number: string | null
    category_id: string | null
    dosage_form_id: string | null
    medicine_weight: number | null
    quantity: number | null
    supplier_id: string | null
    invoice_number: string | null
    unit_price: number | null
    sell_price: number | null
    total_price: number | null
    expire_date: Date | null
    required_prescription: boolean | null
    payment_method: $Enums.PaymentMethod | null
    Payment_file: string | null
    details: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicinesCountAggregateOutputType = {
    id: number
    medicine_name: number
    brand_name: number
    batch_number: number
    category_id: number
    dosage_form_id: number
    medicine_weight: number
    quantity: number
    supplier_id: number
    invoice_number: number
    unit_price: number
    sell_price: number
    total_price: number
    expire_date: number
    required_prescription: number
    payment_method: number
    Payment_file: number
    details: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicinesAvgAggregateInputType = {
    medicine_weight?: true
    quantity?: true
    unit_price?: true
    sell_price?: true
    total_price?: true
  }

  export type MedicinesSumAggregateInputType = {
    medicine_weight?: true
    quantity?: true
    unit_price?: true
    sell_price?: true
    total_price?: true
  }

  export type MedicinesMinAggregateInputType = {
    id?: true
    medicine_name?: true
    brand_name?: true
    batch_number?: true
    category_id?: true
    dosage_form_id?: true
    medicine_weight?: true
    quantity?: true
    supplier_id?: true
    invoice_number?: true
    unit_price?: true
    sell_price?: true
    total_price?: true
    expire_date?: true
    required_prescription?: true
    payment_method?: true
    Payment_file?: true
    details?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicinesMaxAggregateInputType = {
    id?: true
    medicine_name?: true
    brand_name?: true
    batch_number?: true
    category_id?: true
    dosage_form_id?: true
    medicine_weight?: true
    quantity?: true
    supplier_id?: true
    invoice_number?: true
    unit_price?: true
    sell_price?: true
    total_price?: true
    expire_date?: true
    required_prescription?: true
    payment_method?: true
    Payment_file?: true
    details?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicinesCountAggregateInputType = {
    id?: true
    medicine_name?: true
    brand_name?: true
    batch_number?: true
    category_id?: true
    dosage_form_id?: true
    medicine_weight?: true
    quantity?: true
    supplier_id?: true
    invoice_number?: true
    unit_price?: true
    sell_price?: true
    total_price?: true
    expire_date?: true
    required_prescription?: true
    payment_method?: true
    Payment_file?: true
    details?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicinesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicines to aggregate.
     */
    where?: MedicinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medicines
    **/
    _count?: true | MedicinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicinesMaxAggregateInputType
  }

  export type GetMedicinesAggregateType<T extends MedicinesAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicines[P]>
      : GetScalarType<T[P], AggregateMedicines[P]>
  }




  export type MedicinesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicinesWhereInput
    orderBy?: MedicinesOrderByWithAggregationInput | MedicinesOrderByWithAggregationInput[]
    by: MedicinesScalarFieldEnum[] | MedicinesScalarFieldEnum
    having?: MedicinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicinesCountAggregateInputType | true
    _avg?: MedicinesAvgAggregateInputType
    _sum?: MedicinesSumAggregateInputType
    _min?: MedicinesMinAggregateInputType
    _max?: MedicinesMaxAggregateInputType
  }

  export type MedicinesGroupByOutputType = {
    id: string
    medicine_name: string
    brand_name: string | null
    batch_number: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price: number | null
    total_price: number
    expire_date: Date
    required_prescription: boolean
    payment_method: $Enums.PaymentMethod
    Payment_file: string | null
    details: string | null
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: MedicinesCountAggregateOutputType | null
    _avg: MedicinesAvgAggregateOutputType | null
    _sum: MedicinesSumAggregateOutputType | null
    _min: MedicinesMinAggregateOutputType | null
    _max: MedicinesMaxAggregateOutputType | null
  }

  type GetMedicinesGroupByPayload<T extends MedicinesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicinesGroupByOutputType[P]>
            : GetScalarType<T[P], MedicinesGroupByOutputType[P]>
        }
      >
    >


  export type MedicinesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicine_name?: boolean
    brand_name?: boolean
    batch_number?: boolean
    category_id?: boolean
    dosage_form_id?: boolean
    medicine_weight?: boolean
    quantity?: boolean
    supplier_id?: boolean
    invoice_number?: boolean
    unit_price?: boolean
    sell_price?: boolean
    total_price?: boolean
    expire_date?: boolean
    required_prescription?: boolean
    payment_method?: boolean
    Payment_file?: boolean
    details?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    Sales?: boolean | Medicines$SalesArgs<ExtArgs>
    Returns?: boolean | Medicines$ReturnsArgs<ExtArgs>
    _count?: boolean | MedicinesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicines"]>

  export type MedicinesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicine_name?: boolean
    brand_name?: boolean
    batch_number?: boolean
    category_id?: boolean
    dosage_form_id?: boolean
    medicine_weight?: boolean
    quantity?: boolean
    supplier_id?: boolean
    invoice_number?: boolean
    unit_price?: boolean
    sell_price?: boolean
    total_price?: boolean
    expire_date?: boolean
    required_prescription?: boolean
    payment_method?: boolean
    Payment_file?: boolean
    details?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicines"]>

  export type MedicinesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicine_name?: boolean
    brand_name?: boolean
    batch_number?: boolean
    category_id?: boolean
    dosage_form_id?: boolean
    medicine_weight?: boolean
    quantity?: boolean
    supplier_id?: boolean
    invoice_number?: boolean
    unit_price?: boolean
    sell_price?: boolean
    total_price?: boolean
    expire_date?: boolean
    required_prescription?: boolean
    payment_method?: boolean
    Payment_file?: boolean
    details?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicines"]>

  export type MedicinesSelectScalar = {
    id?: boolean
    medicine_name?: boolean
    brand_name?: boolean
    batch_number?: boolean
    category_id?: boolean
    dosage_form_id?: boolean
    medicine_weight?: boolean
    quantity?: boolean
    supplier_id?: boolean
    invoice_number?: boolean
    unit_price?: boolean
    sell_price?: boolean
    total_price?: boolean
    expire_date?: boolean
    required_prescription?: boolean
    payment_method?: boolean
    Payment_file?: boolean
    details?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicinesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "medicine_name" | "brand_name" | "batch_number" | "category_id" | "dosage_form_id" | "medicine_weight" | "quantity" | "supplier_id" | "invoice_number" | "unit_price" | "sell_price" | "total_price" | "expire_date" | "required_prescription" | "payment_method" | "Payment_file" | "details" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["medicines"]>
  export type MedicinesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    Sales?: boolean | Medicines$SalesArgs<ExtArgs>
    Returns?: boolean | Medicines$ReturnsArgs<ExtArgs>
    _count?: boolean | MedicinesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicinesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type MedicinesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $MedicinesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medicines"
    objects: {
      category: Prisma.$CategoriesPayload<ExtArgs>
      dosage_form: Prisma.$DosageFormsPayload<ExtArgs>
      supplier: Prisma.$SuppliersPayload<ExtArgs>
      createdBy: Prisma.$UsersPayload<ExtArgs>
      Sales: Prisma.$SalesPayload<ExtArgs>[]
      Returns: Prisma.$ReturnsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      medicine_name: string
      brand_name: string | null
      batch_number: string | null
      category_id: string
      dosage_form_id: string
      medicine_weight: number | null
      quantity: number
      supplier_id: string
      invoice_number: string
      unit_price: number
      sell_price: number | null
      total_price: number
      expire_date: Date
      required_prescription: boolean
      payment_method: $Enums.PaymentMethod
      Payment_file: string | null
      details: string | null
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicines"]>
    composites: {}
  }

  type MedicinesGetPayload<S extends boolean | null | undefined | MedicinesDefaultArgs> = $Result.GetResult<Prisma.$MedicinesPayload, S>

  type MedicinesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicinesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicinesCountAggregateInputType | true
    }

  export interface MedicinesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medicines'], meta: { name: 'Medicines' } }
    /**
     * Find zero or one Medicines that matches the filter.
     * @param {MedicinesFindUniqueArgs} args - Arguments to find a Medicines
     * @example
     * // Get one Medicines
     * const medicines = await prisma.medicines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicinesFindUniqueArgs>(args: SelectSubset<T, MedicinesFindUniqueArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Medicines that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicinesFindUniqueOrThrowArgs} args - Arguments to find a Medicines
     * @example
     * // Get one Medicines
     * const medicines = await prisma.medicines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicinesFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicinesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medicines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesFindFirstArgs} args - Arguments to find a Medicines
     * @example
     * // Get one Medicines
     * const medicines = await prisma.medicines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicinesFindFirstArgs>(args?: SelectSubset<T, MedicinesFindFirstArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medicines that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesFindFirstOrThrowArgs} args - Arguments to find a Medicines
     * @example
     * // Get one Medicines
     * const medicines = await prisma.medicines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicinesFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicinesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Medicines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medicines
     * const medicines = await prisma.medicines.findMany()
     * 
     * // Get first 10 Medicines
     * const medicines = await prisma.medicines.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicinesWithIdOnly = await prisma.medicines.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicinesFindManyArgs>(args?: SelectSubset<T, MedicinesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Medicines.
     * @param {MedicinesCreateArgs} args - Arguments to create a Medicines.
     * @example
     * // Create one Medicines
     * const Medicines = await prisma.medicines.create({
     *   data: {
     *     // ... data to create a Medicines
     *   }
     * })
     * 
     */
    create<T extends MedicinesCreateArgs>(args: SelectSubset<T, MedicinesCreateArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Medicines.
     * @param {MedicinesCreateManyArgs} args - Arguments to create many Medicines.
     * @example
     * // Create many Medicines
     * const medicines = await prisma.medicines.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicinesCreateManyArgs>(args?: SelectSubset<T, MedicinesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medicines and returns the data saved in the database.
     * @param {MedicinesCreateManyAndReturnArgs} args - Arguments to create many Medicines.
     * @example
     * // Create many Medicines
     * const medicines = await prisma.medicines.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medicines and only return the `id`
     * const medicinesWithIdOnly = await prisma.medicines.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicinesCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicinesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Medicines.
     * @param {MedicinesDeleteArgs} args - Arguments to delete one Medicines.
     * @example
     * // Delete one Medicines
     * const Medicines = await prisma.medicines.delete({
     *   where: {
     *     // ... filter to delete one Medicines
     *   }
     * })
     * 
     */
    delete<T extends MedicinesDeleteArgs>(args: SelectSubset<T, MedicinesDeleteArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Medicines.
     * @param {MedicinesUpdateArgs} args - Arguments to update one Medicines.
     * @example
     * // Update one Medicines
     * const medicines = await prisma.medicines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicinesUpdateArgs>(args: SelectSubset<T, MedicinesUpdateArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Medicines.
     * @param {MedicinesDeleteManyArgs} args - Arguments to filter Medicines to delete.
     * @example
     * // Delete a few Medicines
     * const { count } = await prisma.medicines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicinesDeleteManyArgs>(args?: SelectSubset<T, MedicinesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medicines
     * const medicines = await prisma.medicines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicinesUpdateManyArgs>(args: SelectSubset<T, MedicinesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medicines and returns the data updated in the database.
     * @param {MedicinesUpdateManyAndReturnArgs} args - Arguments to update many Medicines.
     * @example
     * // Update many Medicines
     * const medicines = await prisma.medicines.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Medicines and only return the `id`
     * const medicinesWithIdOnly = await prisma.medicines.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicinesUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicinesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Medicines.
     * @param {MedicinesUpsertArgs} args - Arguments to update or create a Medicines.
     * @example
     * // Update or create a Medicines
     * const medicines = await prisma.medicines.upsert({
     *   create: {
     *     // ... data to create a Medicines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medicines we want to update
     *   }
     * })
     */
    upsert<T extends MedicinesUpsertArgs>(args: SelectSubset<T, MedicinesUpsertArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesCountArgs} args - Arguments to filter Medicines to count.
     * @example
     * // Count the number of Medicines
     * const count = await prisma.medicines.count({
     *   where: {
     *     // ... the filter for the Medicines we want to count
     *   }
     * })
    **/
    count<T extends MedicinesCountArgs>(
      args?: Subset<T, MedicinesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicinesAggregateArgs>(args: Subset<T, MedicinesAggregateArgs>): Prisma.PrismaPromise<GetMedicinesAggregateType<T>>

    /**
     * Group by Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicinesGroupByArgs['orderBy'] }
        : { orderBy?: MedicinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicinesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medicines model
   */
  readonly fields: MedicinesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medicines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicinesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriesDefaultArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    dosage_form<T extends DosageFormsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DosageFormsDefaultArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    supplier<T extends SuppliersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SuppliersDefaultArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Sales<T extends Medicines$SalesArgs<ExtArgs> = {}>(args?: Subset<T, Medicines$SalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Returns<T extends Medicines$ReturnsArgs<ExtArgs> = {}>(args?: Subset<T, Medicines$ReturnsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medicines model
   */
  interface MedicinesFieldRefs {
    readonly id: FieldRef<"Medicines", 'String'>
    readonly medicine_name: FieldRef<"Medicines", 'String'>
    readonly brand_name: FieldRef<"Medicines", 'String'>
    readonly batch_number: FieldRef<"Medicines", 'String'>
    readonly category_id: FieldRef<"Medicines", 'String'>
    readonly dosage_form_id: FieldRef<"Medicines", 'String'>
    readonly medicine_weight: FieldRef<"Medicines", 'Float'>
    readonly quantity: FieldRef<"Medicines", 'Int'>
    readonly supplier_id: FieldRef<"Medicines", 'String'>
    readonly invoice_number: FieldRef<"Medicines", 'String'>
    readonly unit_price: FieldRef<"Medicines", 'Float'>
    readonly sell_price: FieldRef<"Medicines", 'Float'>
    readonly total_price: FieldRef<"Medicines", 'Float'>
    readonly expire_date: FieldRef<"Medicines", 'DateTime'>
    readonly required_prescription: FieldRef<"Medicines", 'Boolean'>
    readonly payment_method: FieldRef<"Medicines", 'PaymentMethod'>
    readonly Payment_file: FieldRef<"Medicines", 'String'>
    readonly details: FieldRef<"Medicines", 'String'>
    readonly createdById: FieldRef<"Medicines", 'String'>
    readonly createdAt: FieldRef<"Medicines", 'DateTime'>
    readonly updatedAt: FieldRef<"Medicines", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Medicines findUnique
   */
  export type MedicinesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where: MedicinesWhereUniqueInput
  }

  /**
   * Medicines findUniqueOrThrow
   */
  export type MedicinesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where: MedicinesWhereUniqueInput
  }

  /**
   * Medicines findFirst
   */
  export type MedicinesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where?: MedicinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicines.
     */
    cursor?: MedicinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicines.
     */
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * Medicines findFirstOrThrow
   */
  export type MedicinesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where?: MedicinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicines.
     */
    cursor?: MedicinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicines.
     */
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * Medicines findMany
   */
  export type MedicinesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where?: MedicinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicinesOrderByWithRelationInput | MedicinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medicines.
     */
    cursor?: MedicinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    distinct?: MedicinesScalarFieldEnum | MedicinesScalarFieldEnum[]
  }

  /**
   * Medicines create
   */
  export type MedicinesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * The data needed to create a Medicines.
     */
    data: XOR<MedicinesCreateInput, MedicinesUncheckedCreateInput>
  }

  /**
   * Medicines createMany
   */
  export type MedicinesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medicines.
     */
    data: MedicinesCreateManyInput | MedicinesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medicines createManyAndReturn
   */
  export type MedicinesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * The data used to create many Medicines.
     */
    data: MedicinesCreateManyInput | MedicinesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medicines update
   */
  export type MedicinesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * The data needed to update a Medicines.
     */
    data: XOR<MedicinesUpdateInput, MedicinesUncheckedUpdateInput>
    /**
     * Choose, which Medicines to update.
     */
    where: MedicinesWhereUniqueInput
  }

  /**
   * Medicines updateMany
   */
  export type MedicinesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medicines.
     */
    data: XOR<MedicinesUpdateManyMutationInput, MedicinesUncheckedUpdateManyInput>
    /**
     * Filter which Medicines to update
     */
    where?: MedicinesWhereInput
    /**
     * Limit how many Medicines to update.
     */
    limit?: number
  }

  /**
   * Medicines updateManyAndReturn
   */
  export type MedicinesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * The data used to update Medicines.
     */
    data: XOR<MedicinesUpdateManyMutationInput, MedicinesUncheckedUpdateManyInput>
    /**
     * Filter which Medicines to update
     */
    where?: MedicinesWhereInput
    /**
     * Limit how many Medicines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medicines upsert
   */
  export type MedicinesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * The filter to search for the Medicines to update in case it exists.
     */
    where: MedicinesWhereUniqueInput
    /**
     * In case the Medicines found by the `where` argument doesn't exist, create a new Medicines with this data.
     */
    create: XOR<MedicinesCreateInput, MedicinesUncheckedCreateInput>
    /**
     * In case the Medicines was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicinesUpdateInput, MedicinesUncheckedUpdateInput>
  }

  /**
   * Medicines delete
   */
  export type MedicinesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
    /**
     * Filter which Medicines to delete.
     */
    where: MedicinesWhereUniqueInput
  }

  /**
   * Medicines deleteMany
   */
  export type MedicinesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicines to delete
     */
    where?: MedicinesWhereInput
    /**
     * Limit how many Medicines to delete.
     */
    limit?: number
  }

  /**
   * Medicines.Sales
   */
  export type Medicines$SalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    where?: SalesWhereInput
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    cursor?: SalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Medicines.Returns
   */
  export type Medicines$ReturnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    where?: ReturnsWhereInput
    orderBy?: ReturnsOrderByWithRelationInput | ReturnsOrderByWithRelationInput[]
    cursor?: ReturnsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReturnsScalarFieldEnum | ReturnsScalarFieldEnum[]
  }

  /**
   * Medicines without action
   */
  export type MedicinesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicines
     */
    select?: MedicinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medicines
     */
    omit?: MedicinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicinesInclude<ExtArgs> | null
  }


  /**
   * Model Sales
   */

  export type AggregateSales = {
    _count: SalesCountAggregateOutputType | null
    _avg: SalesAvgAggregateOutputType | null
    _sum: SalesSumAggregateOutputType | null
    _min: SalesMinAggregateOutputType | null
    _max: SalesMaxAggregateOutputType | null
  }

  export type SalesAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
    total_amount: number | null
  }

  export type SalesSumAggregateOutputType = {
    quantity: number | null
    price: number | null
    total_amount: number | null
  }

  export type SalesMinAggregateOutputType = {
    id: string | null
    product_name: string | null
    product_batch_number: string | null
    quantity: number | null
    price: number | null
    total_amount: number | null
    payment_method: $Enums.PaymentMethod | null
    prescription: boolean | null
    dosage_form_id: string | null
    customer_id: string | null
    sealed_date: Date | null
    medicine_id: string | null
    created_by: string | null
    updated_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SalesMaxAggregateOutputType = {
    id: string | null
    product_name: string | null
    product_batch_number: string | null
    quantity: number | null
    price: number | null
    total_amount: number | null
    payment_method: $Enums.PaymentMethod | null
    prescription: boolean | null
    dosage_form_id: string | null
    customer_id: string | null
    sealed_date: Date | null
    medicine_id: string | null
    created_by: string | null
    updated_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SalesCountAggregateOutputType = {
    id: number
    product_name: number
    product_batch_number: number
    quantity: number
    price: number
    total_amount: number
    payment_method: number
    prescription: number
    dosage_form_id: number
    customer_id: number
    sealed_date: number
    medicine_id: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SalesAvgAggregateInputType = {
    quantity?: true
    price?: true
    total_amount?: true
  }

  export type SalesSumAggregateInputType = {
    quantity?: true
    price?: true
    total_amount?: true
  }

  export type SalesMinAggregateInputType = {
    id?: true
    product_name?: true
    product_batch_number?: true
    quantity?: true
    price?: true
    total_amount?: true
    payment_method?: true
    prescription?: true
    dosage_form_id?: true
    customer_id?: true
    sealed_date?: true
    medicine_id?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type SalesMaxAggregateInputType = {
    id?: true
    product_name?: true
    product_batch_number?: true
    quantity?: true
    price?: true
    total_amount?: true
    payment_method?: true
    prescription?: true
    dosage_form_id?: true
    customer_id?: true
    sealed_date?: true
    medicine_id?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type SalesCountAggregateInputType = {
    id?: true
    product_name?: true
    product_batch_number?: true
    quantity?: true
    price?: true
    total_amount?: true
    payment_method?: true
    prescription?: true
    dosage_form_id?: true
    customer_id?: true
    sealed_date?: true
    medicine_id?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SalesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sales to aggregate.
     */
    where?: SalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sales
    **/
    _count?: true | SalesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalesMaxAggregateInputType
  }

  export type GetSalesAggregateType<T extends SalesAggregateArgs> = {
        [P in keyof T & keyof AggregateSales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSales[P]>
      : GetScalarType<T[P], AggregateSales[P]>
  }




  export type SalesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalesWhereInput
    orderBy?: SalesOrderByWithAggregationInput | SalesOrderByWithAggregationInput[]
    by: SalesScalarFieldEnum[] | SalesScalarFieldEnum
    having?: SalesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalesCountAggregateInputType | true
    _avg?: SalesAvgAggregateInputType
    _sum?: SalesSumAggregateInputType
    _min?: SalesMinAggregateInputType
    _max?: SalesMaxAggregateInputType
  }

  export type SalesGroupByOutputType = {
    id: string
    product_name: string | null
    product_batch_number: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id: string | null
    sealed_date: Date
    medicine_id: string
    created_by: string
    updated_by: string | null
    created_at: Date
    updated_at: Date
    _count: SalesCountAggregateOutputType | null
    _avg: SalesAvgAggregateOutputType | null
    _sum: SalesSumAggregateOutputType | null
    _min: SalesMinAggregateOutputType | null
    _max: SalesMaxAggregateOutputType | null
  }

  type GetSalesGroupByPayload<T extends SalesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalesGroupByOutputType[P]>
            : GetScalarType<T[P], SalesGroupByOutputType[P]>
        }
      >
    >


  export type SalesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    quantity?: boolean
    price?: boolean
    total_amount?: boolean
    payment_method?: boolean
    prescription?: boolean
    dosage_form_id?: boolean
    customer_id?: boolean
    sealed_date?: boolean
    medicine_id?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    customer?: boolean | Sales$customerArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | Sales$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["sales"]>

  export type SalesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    quantity?: boolean
    price?: boolean
    total_amount?: boolean
    payment_method?: boolean
    prescription?: boolean
    dosage_form_id?: boolean
    customer_id?: boolean
    sealed_date?: boolean
    medicine_id?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    customer?: boolean | Sales$customerArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | Sales$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["sales"]>

  export type SalesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    quantity?: boolean
    price?: boolean
    total_amount?: boolean
    payment_method?: boolean
    prescription?: boolean
    dosage_form_id?: boolean
    customer_id?: boolean
    sealed_date?: boolean
    medicine_id?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    customer?: boolean | Sales$customerArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | Sales$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["sales"]>

  export type SalesSelectScalar = {
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    quantity?: boolean
    price?: boolean
    total_amount?: boolean
    payment_method?: boolean
    prescription?: boolean
    dosage_form_id?: boolean
    customer_id?: boolean
    sealed_date?: boolean
    medicine_id?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SalesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_name" | "product_batch_number" | "quantity" | "price" | "total_amount" | "payment_method" | "prescription" | "dosage_form_id" | "customer_id" | "sealed_date" | "medicine_id" | "created_by" | "updated_by" | "created_at" | "updated_at", ExtArgs["result"]["sales"]>
  export type SalesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    customer?: boolean | Sales$customerArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | Sales$updatedByArgs<ExtArgs>
  }
  export type SalesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    customer?: boolean | Sales$customerArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | Sales$updatedByArgs<ExtArgs>
  }
  export type SalesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    customer?: boolean | Sales$customerArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | Sales$updatedByArgs<ExtArgs>
  }

  export type $SalesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sales"
    objects: {
      dosage_form: Prisma.$DosageFormsPayload<ExtArgs>
      customer: Prisma.$CustomersPayload<ExtArgs> | null
      medicine: Prisma.$MedicinesPayload<ExtArgs>
      createdBy: Prisma.$UsersPayload<ExtArgs>
      updatedBy: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_name: string | null
      product_batch_number: string | null
      quantity: number
      price: number
      total_amount: number
      payment_method: $Enums.PaymentMethod
      prescription: boolean
      dosage_form_id: string
      customer_id: string | null
      sealed_date: Date
      medicine_id: string
      created_by: string
      updated_by: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["sales"]>
    composites: {}
  }

  type SalesGetPayload<S extends boolean | null | undefined | SalesDefaultArgs> = $Result.GetResult<Prisma.$SalesPayload, S>

  type SalesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SalesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SalesCountAggregateInputType | true
    }

  export interface SalesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sales'], meta: { name: 'Sales' } }
    /**
     * Find zero or one Sales that matches the filter.
     * @param {SalesFindUniqueArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalesFindUniqueArgs>(args: SelectSubset<T, SalesFindUniqueArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sales that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SalesFindUniqueOrThrowArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalesFindUniqueOrThrowArgs>(args: SelectSubset<T, SalesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesFindFirstArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalesFindFirstArgs>(args?: SelectSubset<T, SalesFindFirstArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sales that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesFindFirstOrThrowArgs} args - Arguments to find a Sales
     * @example
     * // Get one Sales
     * const sales = await prisma.sales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalesFindFirstOrThrowArgs>(args?: SelectSubset<T, SalesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sales.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sales.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salesWithIdOnly = await prisma.sales.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalesFindManyArgs>(args?: SelectSubset<T, SalesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sales.
     * @param {SalesCreateArgs} args - Arguments to create a Sales.
     * @example
     * // Create one Sales
     * const Sales = await prisma.sales.create({
     *   data: {
     *     // ... data to create a Sales
     *   }
     * })
     * 
     */
    create<T extends SalesCreateArgs>(args: SelectSubset<T, SalesCreateArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sales.
     * @param {SalesCreateManyArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sales = await prisma.sales.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalesCreateManyArgs>(args?: SelectSubset<T, SalesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sales and returns the data saved in the database.
     * @param {SalesCreateManyAndReturnArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sales = await prisma.sales.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sales and only return the `id`
     * const salesWithIdOnly = await prisma.sales.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SalesCreateManyAndReturnArgs>(args?: SelectSubset<T, SalesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sales.
     * @param {SalesDeleteArgs} args - Arguments to delete one Sales.
     * @example
     * // Delete one Sales
     * const Sales = await prisma.sales.delete({
     *   where: {
     *     // ... filter to delete one Sales
     *   }
     * })
     * 
     */
    delete<T extends SalesDeleteArgs>(args: SelectSubset<T, SalesDeleteArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sales.
     * @param {SalesUpdateArgs} args - Arguments to update one Sales.
     * @example
     * // Update one Sales
     * const sales = await prisma.sales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalesUpdateArgs>(args: SelectSubset<T, SalesUpdateArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sales.
     * @param {SalesDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalesDeleteManyArgs>(args?: SelectSubset<T, SalesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sales = await prisma.sales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalesUpdateManyArgs>(args: SelectSubset<T, SalesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales and returns the data updated in the database.
     * @param {SalesUpdateManyAndReturnArgs} args - Arguments to update many Sales.
     * @example
     * // Update many Sales
     * const sales = await prisma.sales.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sales and only return the `id`
     * const salesWithIdOnly = await prisma.sales.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SalesUpdateManyAndReturnArgs>(args: SelectSubset<T, SalesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sales.
     * @param {SalesUpsertArgs} args - Arguments to update or create a Sales.
     * @example
     * // Update or create a Sales
     * const sales = await prisma.sales.upsert({
     *   create: {
     *     // ... data to create a Sales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sales we want to update
     *   }
     * })
     */
    upsert<T extends SalesUpsertArgs>(args: SelectSubset<T, SalesUpsertArgs<ExtArgs>>): Prisma__SalesClient<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sales.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends SalesCountArgs>(
      args?: Subset<T, SalesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalesAggregateArgs>(args: Subset<T, SalesAggregateArgs>): Prisma.PrismaPromise<GetSalesAggregateType<T>>

    /**
     * Group by Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalesGroupByArgs['orderBy'] }
        : { orderBy?: SalesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sales model
   */
  readonly fields: SalesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dosage_form<T extends DosageFormsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DosageFormsDefaultArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customer<T extends Sales$customerArgs<ExtArgs> = {}>(args?: Subset<T, Sales$customerArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    medicine<T extends MedicinesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicinesDefaultArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Sales$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Sales$updatedByArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sales model
   */
  interface SalesFieldRefs {
    readonly id: FieldRef<"Sales", 'String'>
    readonly product_name: FieldRef<"Sales", 'String'>
    readonly product_batch_number: FieldRef<"Sales", 'String'>
    readonly quantity: FieldRef<"Sales", 'Int'>
    readonly price: FieldRef<"Sales", 'Float'>
    readonly total_amount: FieldRef<"Sales", 'Float'>
    readonly payment_method: FieldRef<"Sales", 'PaymentMethod'>
    readonly prescription: FieldRef<"Sales", 'Boolean'>
    readonly dosage_form_id: FieldRef<"Sales", 'String'>
    readonly customer_id: FieldRef<"Sales", 'String'>
    readonly sealed_date: FieldRef<"Sales", 'DateTime'>
    readonly medicine_id: FieldRef<"Sales", 'String'>
    readonly created_by: FieldRef<"Sales", 'String'>
    readonly updated_by: FieldRef<"Sales", 'String'>
    readonly created_at: FieldRef<"Sales", 'DateTime'>
    readonly updated_at: FieldRef<"Sales", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sales findUnique
   */
  export type SalesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where: SalesWhereUniqueInput
  }

  /**
   * Sales findUniqueOrThrow
   */
  export type SalesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where: SalesWhereUniqueInput
  }

  /**
   * Sales findFirst
   */
  export type SalesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Sales findFirstOrThrow
   */
  export type SalesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Sales findMany
   */
  export type SalesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sales.
     */
    cursor?: SalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Sales create
   */
  export type SalesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * The data needed to create a Sales.
     */
    data: XOR<SalesCreateInput, SalesUncheckedCreateInput>
  }

  /**
   * Sales createMany
   */
  export type SalesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sales.
     */
    data: SalesCreateManyInput | SalesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sales createManyAndReturn
   */
  export type SalesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * The data used to create many Sales.
     */
    data: SalesCreateManyInput | SalesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sales update
   */
  export type SalesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * The data needed to update a Sales.
     */
    data: XOR<SalesUpdateInput, SalesUncheckedUpdateInput>
    /**
     * Choose, which Sales to update.
     */
    where: SalesWhereUniqueInput
  }

  /**
   * Sales updateMany
   */
  export type SalesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sales.
     */
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SalesWhereInput
    /**
     * Limit how many Sales to update.
     */
    limit?: number
  }

  /**
   * Sales updateManyAndReturn
   */
  export type SalesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * The data used to update Sales.
     */
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SalesWhereInput
    /**
     * Limit how many Sales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sales upsert
   */
  export type SalesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * The filter to search for the Sales to update in case it exists.
     */
    where: SalesWhereUniqueInput
    /**
     * In case the Sales found by the `where` argument doesn't exist, create a new Sales with this data.
     */
    create: XOR<SalesCreateInput, SalesUncheckedCreateInput>
    /**
     * In case the Sales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalesUpdateInput, SalesUncheckedUpdateInput>
  }

  /**
   * Sales delete
   */
  export type SalesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    /**
     * Filter which Sales to delete.
     */
    where: SalesWhereUniqueInput
  }

  /**
   * Sales deleteMany
   */
  export type SalesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sales to delete
     */
    where?: SalesWhereInput
    /**
     * Limit how many Sales to delete.
     */
    limit?: number
  }

  /**
   * Sales.customer
   */
  export type Sales$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    where?: CustomersWhereInput
  }

  /**
   * Sales.updatedBy
   */
  export type Sales$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Sales without action
   */
  export type SalesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
  }


  /**
   * Model Expenses
   */

  export type AggregateExpenses = {
    _count: ExpensesCountAggregateOutputType | null
    _avg: ExpensesAvgAggregateOutputType | null
    _sum: ExpensesSumAggregateOutputType | null
    _min: ExpensesMinAggregateOutputType | null
    _max: ExpensesMaxAggregateOutputType | null
  }

  export type ExpensesAvgAggregateOutputType = {
    amount: number | null
  }

  export type ExpensesSumAggregateOutputType = {
    amount: number | null
  }

  export type ExpensesMinAggregateOutputType = {
    id: string | null
    date: Date | null
    reason: string | null
    payment_method: $Enums.PaymentMethod | null
    receipt: string | null
    amount: number | null
    description: string | null
    additional_info: string | null
  }

  export type ExpensesMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    reason: string | null
    payment_method: $Enums.PaymentMethod | null
    receipt: string | null
    amount: number | null
    description: string | null
    additional_info: string | null
  }

  export type ExpensesCountAggregateOutputType = {
    id: number
    date: number
    reason: number
    payment_method: number
    receipt: number
    amount: number
    description: number
    additional_info: number
    _all: number
  }


  export type ExpensesAvgAggregateInputType = {
    amount?: true
  }

  export type ExpensesSumAggregateInputType = {
    amount?: true
  }

  export type ExpensesMinAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    payment_method?: true
    receipt?: true
    amount?: true
    description?: true
    additional_info?: true
  }

  export type ExpensesMaxAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    payment_method?: true
    receipt?: true
    amount?: true
    description?: true
    additional_info?: true
  }

  export type ExpensesCountAggregateInputType = {
    id?: true
    date?: true
    reason?: true
    payment_method?: true
    receipt?: true
    amount?: true
    description?: true
    additional_info?: true
    _all?: true
  }

  export type ExpensesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to aggregate.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expenses
    **/
    _count?: true | ExpensesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpensesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpensesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpensesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpensesMaxAggregateInputType
  }

  export type GetExpensesAggregateType<T extends ExpensesAggregateArgs> = {
        [P in keyof T & keyof AggregateExpenses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpenses[P]>
      : GetScalarType<T[P], AggregateExpenses[P]>
  }




  export type ExpensesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpensesWhereInput
    orderBy?: ExpensesOrderByWithAggregationInput | ExpensesOrderByWithAggregationInput[]
    by: ExpensesScalarFieldEnum[] | ExpensesScalarFieldEnum
    having?: ExpensesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpensesCountAggregateInputType | true
    _avg?: ExpensesAvgAggregateInputType
    _sum?: ExpensesSumAggregateInputType
    _min?: ExpensesMinAggregateInputType
    _max?: ExpensesMaxAggregateInputType
  }

  export type ExpensesGroupByOutputType = {
    id: string
    date: Date
    reason: string
    payment_method: $Enums.PaymentMethod | null
    receipt: string | null
    amount: number
    description: string | null
    additional_info: string | null
    _count: ExpensesCountAggregateOutputType | null
    _avg: ExpensesAvgAggregateOutputType | null
    _sum: ExpensesSumAggregateOutputType | null
    _min: ExpensesMinAggregateOutputType | null
    _max: ExpensesMaxAggregateOutputType | null
  }

  type GetExpensesGroupByPayload<T extends ExpensesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpensesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpensesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpensesGroupByOutputType[P]>
            : GetScalarType<T[P], ExpensesGroupByOutputType[P]>
        }
      >
    >


  export type ExpensesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    reason?: boolean
    payment_method?: boolean
    receipt?: boolean
    amount?: boolean
    description?: boolean
    additional_info?: boolean
  }, ExtArgs["result"]["expenses"]>

  export type ExpensesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    reason?: boolean
    payment_method?: boolean
    receipt?: boolean
    amount?: boolean
    description?: boolean
    additional_info?: boolean
  }, ExtArgs["result"]["expenses"]>

  export type ExpensesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    reason?: boolean
    payment_method?: boolean
    receipt?: boolean
    amount?: boolean
    description?: boolean
    additional_info?: boolean
  }, ExtArgs["result"]["expenses"]>

  export type ExpensesSelectScalar = {
    id?: boolean
    date?: boolean
    reason?: boolean
    payment_method?: boolean
    receipt?: boolean
    amount?: boolean
    description?: boolean
    additional_info?: boolean
  }

  export type ExpensesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "reason" | "payment_method" | "receipt" | "amount" | "description" | "additional_info", ExtArgs["result"]["expenses"]>

  export type $ExpensesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Expenses"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      reason: string
      payment_method: $Enums.PaymentMethod | null
      receipt: string | null
      amount: number
      description: string | null
      additional_info: string | null
    }, ExtArgs["result"]["expenses"]>
    composites: {}
  }

  type ExpensesGetPayload<S extends boolean | null | undefined | ExpensesDefaultArgs> = $Result.GetResult<Prisma.$ExpensesPayload, S>

  type ExpensesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpensesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpensesCountAggregateInputType | true
    }

  export interface ExpensesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expenses'], meta: { name: 'Expenses' } }
    /**
     * Find zero or one Expenses that matches the filter.
     * @param {ExpensesFindUniqueArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpensesFindUniqueArgs>(args: SelectSubset<T, ExpensesFindUniqueArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expenses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpensesFindUniqueOrThrowArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpensesFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpensesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesFindFirstArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpensesFindFirstArgs>(args?: SelectSubset<T, ExpensesFindFirstArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expenses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesFindFirstOrThrowArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpensesFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpensesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expenses.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expenses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expensesWithIdOnly = await prisma.expenses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpensesFindManyArgs>(args?: SelectSubset<T, ExpensesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expenses.
     * @param {ExpensesCreateArgs} args - Arguments to create a Expenses.
     * @example
     * // Create one Expenses
     * const Expenses = await prisma.expenses.create({
     *   data: {
     *     // ... data to create a Expenses
     *   }
     * })
     * 
     */
    create<T extends ExpensesCreateArgs>(args: SelectSubset<T, ExpensesCreateArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {ExpensesCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expenses = await prisma.expenses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpensesCreateManyArgs>(args?: SelectSubset<T, ExpensesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Expenses and returns the data saved in the database.
     * @param {ExpensesCreateManyAndReturnArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expenses = await prisma.expenses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Expenses and only return the `id`
     * const expensesWithIdOnly = await prisma.expenses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExpensesCreateManyAndReturnArgs>(args?: SelectSubset<T, ExpensesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Expenses.
     * @param {ExpensesDeleteArgs} args - Arguments to delete one Expenses.
     * @example
     * // Delete one Expenses
     * const Expenses = await prisma.expenses.delete({
     *   where: {
     *     // ... filter to delete one Expenses
     *   }
     * })
     * 
     */
    delete<T extends ExpensesDeleteArgs>(args: SelectSubset<T, ExpensesDeleteArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expenses.
     * @param {ExpensesUpdateArgs} args - Arguments to update one Expenses.
     * @example
     * // Update one Expenses
     * const expenses = await prisma.expenses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpensesUpdateArgs>(args: SelectSubset<T, ExpensesUpdateArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {ExpensesDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expenses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpensesDeleteManyArgs>(args?: SelectSubset<T, ExpensesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expenses = await prisma.expenses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpensesUpdateManyArgs>(args: SelectSubset<T, ExpensesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses and returns the data updated in the database.
     * @param {ExpensesUpdateManyAndReturnArgs} args - Arguments to update many Expenses.
     * @example
     * // Update many Expenses
     * const expenses = await prisma.expenses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Expenses and only return the `id`
     * const expensesWithIdOnly = await prisma.expenses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExpensesUpdateManyAndReturnArgs>(args: SelectSubset<T, ExpensesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Expenses.
     * @param {ExpensesUpsertArgs} args - Arguments to update or create a Expenses.
     * @example
     * // Update or create a Expenses
     * const expenses = await prisma.expenses.upsert({
     *   create: {
     *     // ... data to create a Expenses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expenses we want to update
     *   }
     * })
     */
    upsert<T extends ExpensesUpsertArgs>(args: SelectSubset<T, ExpensesUpsertArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expenses.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends ExpensesCountArgs>(
      args?: Subset<T, ExpensesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpensesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpensesAggregateArgs>(args: Subset<T, ExpensesAggregateArgs>): Prisma.PrismaPromise<GetExpensesAggregateType<T>>

    /**
     * Group by Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpensesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpensesGroupByArgs['orderBy'] }
        : { orderBy?: ExpensesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpensesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpensesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Expenses model
   */
  readonly fields: ExpensesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Expenses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpensesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Expenses model
   */
  interface ExpensesFieldRefs {
    readonly id: FieldRef<"Expenses", 'String'>
    readonly date: FieldRef<"Expenses", 'DateTime'>
    readonly reason: FieldRef<"Expenses", 'String'>
    readonly payment_method: FieldRef<"Expenses", 'PaymentMethod'>
    readonly receipt: FieldRef<"Expenses", 'String'>
    readonly amount: FieldRef<"Expenses", 'Float'>
    readonly description: FieldRef<"Expenses", 'String'>
    readonly additional_info: FieldRef<"Expenses", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Expenses findUnique
   */
  export type ExpensesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses findUniqueOrThrow
   */
  export type ExpensesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses findFirst
   */
  export type ExpensesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Expenses findFirstOrThrow
   */
  export type ExpensesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Expenses findMany
   */
  export type ExpensesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expenses.
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Expenses create
   */
  export type ExpensesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * The data needed to create a Expenses.
     */
    data: XOR<ExpensesCreateInput, ExpensesUncheckedCreateInput>
  }

  /**
   * Expenses createMany
   */
  export type ExpensesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Expenses.
     */
    data: ExpensesCreateManyInput | ExpensesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Expenses createManyAndReturn
   */
  export type ExpensesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * The data used to create many Expenses.
     */
    data: ExpensesCreateManyInput | ExpensesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Expenses update
   */
  export type ExpensesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * The data needed to update a Expenses.
     */
    data: XOR<ExpensesUpdateInput, ExpensesUncheckedUpdateInput>
    /**
     * Choose, which Expenses to update.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses updateMany
   */
  export type ExpensesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpensesUpdateManyMutationInput, ExpensesUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpensesWhereInput
    /**
     * Limit how many Expenses to update.
     */
    limit?: number
  }

  /**
   * Expenses updateManyAndReturn
   */
  export type ExpensesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpensesUpdateManyMutationInput, ExpensesUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpensesWhereInput
    /**
     * Limit how many Expenses to update.
     */
    limit?: number
  }

  /**
   * Expenses upsert
   */
  export type ExpensesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * The filter to search for the Expenses to update in case it exists.
     */
    where: ExpensesWhereUniqueInput
    /**
     * In case the Expenses found by the `where` argument doesn't exist, create a new Expenses with this data.
     */
    create: XOR<ExpensesCreateInput, ExpensesUncheckedCreateInput>
    /**
     * In case the Expenses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpensesUpdateInput, ExpensesUncheckedUpdateInput>
  }

  /**
   * Expenses delete
   */
  export type ExpensesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Filter which Expenses to delete.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses deleteMany
   */
  export type ExpensesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to delete
     */
    where?: ExpensesWhereInput
    /**
     * Limit how many Expenses to delete.
     */
    limit?: number
  }

  /**
   * Expenses without action
   */
  export type ExpensesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
  }


  /**
   * Model Returns
   */

  export type AggregateReturns = {
    _count: ReturnsCountAggregateOutputType | null
    _avg: ReturnsAvgAggregateOutputType | null
    _sum: ReturnsSumAggregateOutputType | null
    _min: ReturnsMinAggregateOutputType | null
    _max: ReturnsMaxAggregateOutputType | null
  }

  export type ReturnsAvgAggregateOutputType = {
    quantity: number | null
  }

  export type ReturnsSumAggregateOutputType = {
    quantity: number | null
  }

  export type ReturnsMinAggregateOutputType = {
    id: string | null
    product_name: string | null
    product_batch_number: string | null
    dosage_form_id: string | null
    return_date: Date | null
    reason_for_return: string | null
    quantity: number | null
    medicine_id: string | null
  }

  export type ReturnsMaxAggregateOutputType = {
    id: string | null
    product_name: string | null
    product_batch_number: string | null
    dosage_form_id: string | null
    return_date: Date | null
    reason_for_return: string | null
    quantity: number | null
    medicine_id: string | null
  }

  export type ReturnsCountAggregateOutputType = {
    id: number
    product_name: number
    product_batch_number: number
    dosage_form_id: number
    return_date: number
    reason_for_return: number
    quantity: number
    medicine_id: number
    _all: number
  }


  export type ReturnsAvgAggregateInputType = {
    quantity?: true
  }

  export type ReturnsSumAggregateInputType = {
    quantity?: true
  }

  export type ReturnsMinAggregateInputType = {
    id?: true
    product_name?: true
    product_batch_number?: true
    dosage_form_id?: true
    return_date?: true
    reason_for_return?: true
    quantity?: true
    medicine_id?: true
  }

  export type ReturnsMaxAggregateInputType = {
    id?: true
    product_name?: true
    product_batch_number?: true
    dosage_form_id?: true
    return_date?: true
    reason_for_return?: true
    quantity?: true
    medicine_id?: true
  }

  export type ReturnsCountAggregateInputType = {
    id?: true
    product_name?: true
    product_batch_number?: true
    dosage_form_id?: true
    return_date?: true
    reason_for_return?: true
    quantity?: true
    medicine_id?: true
    _all?: true
  }

  export type ReturnsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Returns to aggregate.
     */
    where?: ReturnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Returns to fetch.
     */
    orderBy?: ReturnsOrderByWithRelationInput | ReturnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReturnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Returns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Returns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Returns
    **/
    _count?: true | ReturnsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReturnsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReturnsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReturnsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReturnsMaxAggregateInputType
  }

  export type GetReturnsAggregateType<T extends ReturnsAggregateArgs> = {
        [P in keyof T & keyof AggregateReturns]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReturns[P]>
      : GetScalarType<T[P], AggregateReturns[P]>
  }




  export type ReturnsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReturnsWhereInput
    orderBy?: ReturnsOrderByWithAggregationInput | ReturnsOrderByWithAggregationInput[]
    by: ReturnsScalarFieldEnum[] | ReturnsScalarFieldEnum
    having?: ReturnsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReturnsCountAggregateInputType | true
    _avg?: ReturnsAvgAggregateInputType
    _sum?: ReturnsSumAggregateInputType
    _min?: ReturnsMinAggregateInputType
    _max?: ReturnsMaxAggregateInputType
  }

  export type ReturnsGroupByOutputType = {
    id: string
    product_name: string
    product_batch_number: string
    dosage_form_id: string
    return_date: Date
    reason_for_return: string
    quantity: number
    medicine_id: string
    _count: ReturnsCountAggregateOutputType | null
    _avg: ReturnsAvgAggregateOutputType | null
    _sum: ReturnsSumAggregateOutputType | null
    _min: ReturnsMinAggregateOutputType | null
    _max: ReturnsMaxAggregateOutputType | null
  }

  type GetReturnsGroupByPayload<T extends ReturnsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReturnsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReturnsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReturnsGroupByOutputType[P]>
            : GetScalarType<T[P], ReturnsGroupByOutputType[P]>
        }
      >
    >


  export type ReturnsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    dosage_form_id?: boolean
    return_date?: boolean
    reason_for_return?: boolean
    quantity?: boolean
    medicine_id?: boolean
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["returns"]>

  export type ReturnsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    dosage_form_id?: boolean
    return_date?: boolean
    reason_for_return?: boolean
    quantity?: boolean
    medicine_id?: boolean
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["returns"]>

  export type ReturnsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    dosage_form_id?: boolean
    return_date?: boolean
    reason_for_return?: boolean
    quantity?: boolean
    medicine_id?: boolean
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["returns"]>

  export type ReturnsSelectScalar = {
    id?: boolean
    product_name?: boolean
    product_batch_number?: boolean
    dosage_form_id?: boolean
    return_date?: boolean
    reason_for_return?: boolean
    quantity?: boolean
    medicine_id?: boolean
  }

  export type ReturnsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_name" | "product_batch_number" | "dosage_form_id" | "return_date" | "reason_for_return" | "quantity" | "medicine_id", ExtArgs["result"]["returns"]>
  export type ReturnsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
  }
  export type ReturnsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
  }
  export type ReturnsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dosage_form?: boolean | DosageFormsDefaultArgs<ExtArgs>
    medicine?: boolean | MedicinesDefaultArgs<ExtArgs>
  }

  export type $ReturnsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Returns"
    objects: {
      dosage_form: Prisma.$DosageFormsPayload<ExtArgs>
      medicine: Prisma.$MedicinesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_name: string
      product_batch_number: string
      dosage_form_id: string
      return_date: Date
      reason_for_return: string
      quantity: number
      medicine_id: string
    }, ExtArgs["result"]["returns"]>
    composites: {}
  }

  type ReturnsGetPayload<S extends boolean | null | undefined | ReturnsDefaultArgs> = $Result.GetResult<Prisma.$ReturnsPayload, S>

  type ReturnsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReturnsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReturnsCountAggregateInputType | true
    }

  export interface ReturnsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Returns'], meta: { name: 'Returns' } }
    /**
     * Find zero or one Returns that matches the filter.
     * @param {ReturnsFindUniqueArgs} args - Arguments to find a Returns
     * @example
     * // Get one Returns
     * const returns = await prisma.returns.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReturnsFindUniqueArgs>(args: SelectSubset<T, ReturnsFindUniqueArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Returns that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReturnsFindUniqueOrThrowArgs} args - Arguments to find a Returns
     * @example
     * // Get one Returns
     * const returns = await prisma.returns.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReturnsFindUniqueOrThrowArgs>(args: SelectSubset<T, ReturnsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Returns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsFindFirstArgs} args - Arguments to find a Returns
     * @example
     * // Get one Returns
     * const returns = await prisma.returns.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReturnsFindFirstArgs>(args?: SelectSubset<T, ReturnsFindFirstArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Returns that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsFindFirstOrThrowArgs} args - Arguments to find a Returns
     * @example
     * // Get one Returns
     * const returns = await prisma.returns.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReturnsFindFirstOrThrowArgs>(args?: SelectSubset<T, ReturnsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Returns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Returns
     * const returns = await prisma.returns.findMany()
     * 
     * // Get first 10 Returns
     * const returns = await prisma.returns.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const returnsWithIdOnly = await prisma.returns.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReturnsFindManyArgs>(args?: SelectSubset<T, ReturnsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Returns.
     * @param {ReturnsCreateArgs} args - Arguments to create a Returns.
     * @example
     * // Create one Returns
     * const Returns = await prisma.returns.create({
     *   data: {
     *     // ... data to create a Returns
     *   }
     * })
     * 
     */
    create<T extends ReturnsCreateArgs>(args: SelectSubset<T, ReturnsCreateArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Returns.
     * @param {ReturnsCreateManyArgs} args - Arguments to create many Returns.
     * @example
     * // Create many Returns
     * const returns = await prisma.returns.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReturnsCreateManyArgs>(args?: SelectSubset<T, ReturnsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Returns and returns the data saved in the database.
     * @param {ReturnsCreateManyAndReturnArgs} args - Arguments to create many Returns.
     * @example
     * // Create many Returns
     * const returns = await prisma.returns.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Returns and only return the `id`
     * const returnsWithIdOnly = await prisma.returns.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReturnsCreateManyAndReturnArgs>(args?: SelectSubset<T, ReturnsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Returns.
     * @param {ReturnsDeleteArgs} args - Arguments to delete one Returns.
     * @example
     * // Delete one Returns
     * const Returns = await prisma.returns.delete({
     *   where: {
     *     // ... filter to delete one Returns
     *   }
     * })
     * 
     */
    delete<T extends ReturnsDeleteArgs>(args: SelectSubset<T, ReturnsDeleteArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Returns.
     * @param {ReturnsUpdateArgs} args - Arguments to update one Returns.
     * @example
     * // Update one Returns
     * const returns = await prisma.returns.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReturnsUpdateArgs>(args: SelectSubset<T, ReturnsUpdateArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Returns.
     * @param {ReturnsDeleteManyArgs} args - Arguments to filter Returns to delete.
     * @example
     * // Delete a few Returns
     * const { count } = await prisma.returns.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReturnsDeleteManyArgs>(args?: SelectSubset<T, ReturnsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Returns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Returns
     * const returns = await prisma.returns.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReturnsUpdateManyArgs>(args: SelectSubset<T, ReturnsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Returns and returns the data updated in the database.
     * @param {ReturnsUpdateManyAndReturnArgs} args - Arguments to update many Returns.
     * @example
     * // Update many Returns
     * const returns = await prisma.returns.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Returns and only return the `id`
     * const returnsWithIdOnly = await prisma.returns.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReturnsUpdateManyAndReturnArgs>(args: SelectSubset<T, ReturnsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Returns.
     * @param {ReturnsUpsertArgs} args - Arguments to update or create a Returns.
     * @example
     * // Update or create a Returns
     * const returns = await prisma.returns.upsert({
     *   create: {
     *     // ... data to create a Returns
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Returns we want to update
     *   }
     * })
     */
    upsert<T extends ReturnsUpsertArgs>(args: SelectSubset<T, ReturnsUpsertArgs<ExtArgs>>): Prisma__ReturnsClient<$Result.GetResult<Prisma.$ReturnsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Returns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsCountArgs} args - Arguments to filter Returns to count.
     * @example
     * // Count the number of Returns
     * const count = await prisma.returns.count({
     *   where: {
     *     // ... the filter for the Returns we want to count
     *   }
     * })
    **/
    count<T extends ReturnsCountArgs>(
      args?: Subset<T, ReturnsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReturnsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Returns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReturnsAggregateArgs>(args: Subset<T, ReturnsAggregateArgs>): Prisma.PrismaPromise<GetReturnsAggregateType<T>>

    /**
     * Group by Returns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReturnsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReturnsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReturnsGroupByArgs['orderBy'] }
        : { orderBy?: ReturnsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReturnsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReturnsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Returns model
   */
  readonly fields: ReturnsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Returns.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReturnsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dosage_form<T extends DosageFormsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DosageFormsDefaultArgs<ExtArgs>>): Prisma__DosageFormsClient<$Result.GetResult<Prisma.$DosageFormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    medicine<T extends MedicinesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicinesDefaultArgs<ExtArgs>>): Prisma__MedicinesClient<$Result.GetResult<Prisma.$MedicinesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Returns model
   */
  interface ReturnsFieldRefs {
    readonly id: FieldRef<"Returns", 'String'>
    readonly product_name: FieldRef<"Returns", 'String'>
    readonly product_batch_number: FieldRef<"Returns", 'String'>
    readonly dosage_form_id: FieldRef<"Returns", 'String'>
    readonly return_date: FieldRef<"Returns", 'DateTime'>
    readonly reason_for_return: FieldRef<"Returns", 'String'>
    readonly quantity: FieldRef<"Returns", 'Int'>
    readonly medicine_id: FieldRef<"Returns", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Returns findUnique
   */
  export type ReturnsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * Filter, which Returns to fetch.
     */
    where: ReturnsWhereUniqueInput
  }

  /**
   * Returns findUniqueOrThrow
   */
  export type ReturnsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * Filter, which Returns to fetch.
     */
    where: ReturnsWhereUniqueInput
  }

  /**
   * Returns findFirst
   */
  export type ReturnsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * Filter, which Returns to fetch.
     */
    where?: ReturnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Returns to fetch.
     */
    orderBy?: ReturnsOrderByWithRelationInput | ReturnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Returns.
     */
    cursor?: ReturnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Returns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Returns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Returns.
     */
    distinct?: ReturnsScalarFieldEnum | ReturnsScalarFieldEnum[]
  }

  /**
   * Returns findFirstOrThrow
   */
  export type ReturnsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * Filter, which Returns to fetch.
     */
    where?: ReturnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Returns to fetch.
     */
    orderBy?: ReturnsOrderByWithRelationInput | ReturnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Returns.
     */
    cursor?: ReturnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Returns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Returns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Returns.
     */
    distinct?: ReturnsScalarFieldEnum | ReturnsScalarFieldEnum[]
  }

  /**
   * Returns findMany
   */
  export type ReturnsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * Filter, which Returns to fetch.
     */
    where?: ReturnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Returns to fetch.
     */
    orderBy?: ReturnsOrderByWithRelationInput | ReturnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Returns.
     */
    cursor?: ReturnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Returns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Returns.
     */
    skip?: number
    distinct?: ReturnsScalarFieldEnum | ReturnsScalarFieldEnum[]
  }

  /**
   * Returns create
   */
  export type ReturnsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * The data needed to create a Returns.
     */
    data: XOR<ReturnsCreateInput, ReturnsUncheckedCreateInput>
  }

  /**
   * Returns createMany
   */
  export type ReturnsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Returns.
     */
    data: ReturnsCreateManyInput | ReturnsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Returns createManyAndReturn
   */
  export type ReturnsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * The data used to create many Returns.
     */
    data: ReturnsCreateManyInput | ReturnsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Returns update
   */
  export type ReturnsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * The data needed to update a Returns.
     */
    data: XOR<ReturnsUpdateInput, ReturnsUncheckedUpdateInput>
    /**
     * Choose, which Returns to update.
     */
    where: ReturnsWhereUniqueInput
  }

  /**
   * Returns updateMany
   */
  export type ReturnsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Returns.
     */
    data: XOR<ReturnsUpdateManyMutationInput, ReturnsUncheckedUpdateManyInput>
    /**
     * Filter which Returns to update
     */
    where?: ReturnsWhereInput
    /**
     * Limit how many Returns to update.
     */
    limit?: number
  }

  /**
   * Returns updateManyAndReturn
   */
  export type ReturnsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * The data used to update Returns.
     */
    data: XOR<ReturnsUpdateManyMutationInput, ReturnsUncheckedUpdateManyInput>
    /**
     * Filter which Returns to update
     */
    where?: ReturnsWhereInput
    /**
     * Limit how many Returns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Returns upsert
   */
  export type ReturnsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * The filter to search for the Returns to update in case it exists.
     */
    where: ReturnsWhereUniqueInput
    /**
     * In case the Returns found by the `where` argument doesn't exist, create a new Returns with this data.
     */
    create: XOR<ReturnsCreateInput, ReturnsUncheckedCreateInput>
    /**
     * In case the Returns was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReturnsUpdateInput, ReturnsUncheckedUpdateInput>
  }

  /**
   * Returns delete
   */
  export type ReturnsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
    /**
     * Filter which Returns to delete.
     */
    where: ReturnsWhereUniqueInput
  }

  /**
   * Returns deleteMany
   */
  export type ReturnsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Returns to delete
     */
    where?: ReturnsWhereInput
    /**
     * Limit how many Returns to delete.
     */
    limit?: number
  }

  /**
   * Returns without action
   */
  export type ReturnsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Returns
     */
    select?: ReturnsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Returns
     */
    omit?: ReturnsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReturnsInclude<ExtArgs> | null
  }


  /**
   * Model Customers
   */

  export type AggregateCustomers = {
    _count: CustomersCountAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  export type CustomersMinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    address: string | null
    status: $Enums.Status | null
  }

  export type CustomersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    address: string | null
    status: $Enums.Status | null
  }

  export type CustomersCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    address: number
    status: number
    _all: number
  }


  export type CustomersMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    address?: true
    status?: true
  }

  export type CustomersMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    address?: true
    status?: true
  }

  export type CustomersCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    address?: true
    status?: true
    _all?: true
  }

  export type CustomersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to aggregate.
     */
    where?: CustomersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomersOrderByWithRelationInput | CustomersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomersMaxAggregateInputType
  }

  export type GetCustomersAggregateType<T extends CustomersAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomers[P]>
      : GetScalarType<T[P], AggregateCustomers[P]>
  }




  export type CustomersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomersWhereInput
    orderBy?: CustomersOrderByWithAggregationInput | CustomersOrderByWithAggregationInput[]
    by: CustomersScalarFieldEnum[] | CustomersScalarFieldEnum
    having?: CustomersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomersCountAggregateInputType | true
    _min?: CustomersMinAggregateInputType
    _max?: CustomersMaxAggregateInputType
  }

  export type CustomersGroupByOutputType = {
    id: string
    name: string
    phone: string
    address: string
    status: $Enums.Status
    _count: CustomersCountAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  type GetCustomersGroupByPayload<T extends CustomersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomersGroupByOutputType[P]>
            : GetScalarType<T[P], CustomersGroupByOutputType[P]>
        }
      >
    >


  export type CustomersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
    Sales?: boolean | Customers$SalesArgs<ExtArgs>
    CustomerCredit?: boolean | Customers$CustomerCreditArgs<ExtArgs>
    _count?: boolean | CustomersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customers"]>

  export type CustomersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
  }, ExtArgs["result"]["customers"]>

  export type CustomersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
  }, ExtArgs["result"]["customers"]>

  export type CustomersSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    status?: boolean
  }

  export type CustomersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "phone" | "address" | "status", ExtArgs["result"]["customers"]>
  export type CustomersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sales?: boolean | Customers$SalesArgs<ExtArgs>
    CustomerCredit?: boolean | Customers$CustomerCreditArgs<ExtArgs>
    _count?: boolean | CustomersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customers"
    objects: {
      Sales: Prisma.$SalesPayload<ExtArgs>[]
      CustomerCredit: Prisma.$CustomerCreditPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      phone: string
      address: string
      status: $Enums.Status
    }, ExtArgs["result"]["customers"]>
    composites: {}
  }

  type CustomersGetPayload<S extends boolean | null | undefined | CustomersDefaultArgs> = $Result.GetResult<Prisma.$CustomersPayload, S>

  type CustomersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomersCountAggregateInputType | true
    }

  export interface CustomersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customers'], meta: { name: 'Customers' } }
    /**
     * Find zero or one Customers that matches the filter.
     * @param {CustomersFindUniqueArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomersFindUniqueArgs>(args: SelectSubset<T, CustomersFindUniqueArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomersFindUniqueOrThrowArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomersFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersFindFirstArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomersFindFirstArgs>(args?: SelectSubset<T, CustomersFindFirstArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersFindFirstOrThrowArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomersFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomersFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customers.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customersWithIdOnly = await prisma.customers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomersFindManyArgs>(args?: SelectSubset<T, CustomersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customers.
     * @param {CustomersCreateArgs} args - Arguments to create a Customers.
     * @example
     * // Create one Customers
     * const Customers = await prisma.customers.create({
     *   data: {
     *     // ... data to create a Customers
     *   }
     * })
     * 
     */
    create<T extends CustomersCreateArgs>(args: SelectSubset<T, CustomersCreateArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomersCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customers = await prisma.customers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomersCreateManyArgs>(args?: SelectSubset<T, CustomersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomersCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customers = await prisma.customers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customersWithIdOnly = await prisma.customers.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomersCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customers.
     * @param {CustomersDeleteArgs} args - Arguments to delete one Customers.
     * @example
     * // Delete one Customers
     * const Customers = await prisma.customers.delete({
     *   where: {
     *     // ... filter to delete one Customers
     *   }
     * })
     * 
     */
    delete<T extends CustomersDeleteArgs>(args: SelectSubset<T, CustomersDeleteArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customers.
     * @param {CustomersUpdateArgs} args - Arguments to update one Customers.
     * @example
     * // Update one Customers
     * const customers = await prisma.customers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomersUpdateArgs>(args: SelectSubset<T, CustomersUpdateArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomersDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomersDeleteManyArgs>(args?: SelectSubset<T, CustomersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customers = await prisma.customers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomersUpdateManyArgs>(args: SelectSubset<T, CustomersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomersUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customers = await prisma.customers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customersWithIdOnly = await prisma.customers.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomersUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customers.
     * @param {CustomersUpsertArgs} args - Arguments to update or create a Customers.
     * @example
     * // Update or create a Customers
     * const customers = await prisma.customers.upsert({
     *   create: {
     *     // ... data to create a Customers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customers we want to update
     *   }
     * })
     */
    upsert<T extends CustomersUpsertArgs>(args: SelectSubset<T, CustomersUpsertArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customers.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomersCountArgs>(
      args?: Subset<T, CustomersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomersAggregateArgs>(args: Subset<T, CustomersAggregateArgs>): Prisma.PrismaPromise<GetCustomersAggregateType<T>>

    /**
     * Group by Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomersGroupByArgs['orderBy'] }
        : { orderBy?: CustomersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customers model
   */
  readonly fields: CustomersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Sales<T extends Customers$SalesArgs<ExtArgs> = {}>(args?: Subset<T, Customers$SalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CustomerCredit<T extends Customers$CustomerCreditArgs<ExtArgs> = {}>(args?: Subset<T, Customers$CustomerCreditArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customers model
   */
  interface CustomersFieldRefs {
    readonly id: FieldRef<"Customers", 'String'>
    readonly name: FieldRef<"Customers", 'String'>
    readonly phone: FieldRef<"Customers", 'String'>
    readonly address: FieldRef<"Customers", 'String'>
    readonly status: FieldRef<"Customers", 'Status'>
  }
    

  // Custom InputTypes
  /**
   * Customers findUnique
   */
  export type CustomersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where: CustomersWhereUniqueInput
  }

  /**
   * Customers findUniqueOrThrow
   */
  export type CustomersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where: CustomersWhereUniqueInput
  }

  /**
   * Customers findFirst
   */
  export type CustomersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomersOrderByWithRelationInput | CustomersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomersScalarFieldEnum | CustomersScalarFieldEnum[]
  }

  /**
   * Customers findFirstOrThrow
   */
  export type CustomersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomersOrderByWithRelationInput | CustomersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomersScalarFieldEnum | CustomersScalarFieldEnum[]
  }

  /**
   * Customers findMany
   */
  export type CustomersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomersOrderByWithRelationInput | CustomersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomersScalarFieldEnum | CustomersScalarFieldEnum[]
  }

  /**
   * Customers create
   */
  export type CustomersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * The data needed to create a Customers.
     */
    data: XOR<CustomersCreateInput, CustomersUncheckedCreateInput>
  }

  /**
   * Customers createMany
   */
  export type CustomersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomersCreateManyInput | CustomersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customers createManyAndReturn
   */
  export type CustomersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomersCreateManyInput | CustomersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customers update
   */
  export type CustomersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * The data needed to update a Customers.
     */
    data: XOR<CustomersUpdateInput, CustomersUncheckedUpdateInput>
    /**
     * Choose, which Customers to update.
     */
    where: CustomersWhereUniqueInput
  }

  /**
   * Customers updateMany
   */
  export type CustomersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomersUpdateManyMutationInput, CustomersUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomersWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customers updateManyAndReturn
   */
  export type CustomersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomersUpdateManyMutationInput, CustomersUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomersWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customers upsert
   */
  export type CustomersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * The filter to search for the Customers to update in case it exists.
     */
    where: CustomersWhereUniqueInput
    /**
     * In case the Customers found by the `where` argument doesn't exist, create a new Customers with this data.
     */
    create: XOR<CustomersCreateInput, CustomersUncheckedCreateInput>
    /**
     * In case the Customers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomersUpdateInput, CustomersUncheckedUpdateInput>
  }

  /**
   * Customers delete
   */
  export type CustomersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
    /**
     * Filter which Customers to delete.
     */
    where: CustomersWhereUniqueInput
  }

  /**
   * Customers deleteMany
   */
  export type CustomersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomersWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customers.Sales
   */
  export type Customers$SalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sales
     */
    select?: SalesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sales
     */
    omit?: SalesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalesInclude<ExtArgs> | null
    where?: SalesWhereInput
    orderBy?: SalesOrderByWithRelationInput | SalesOrderByWithRelationInput[]
    cursor?: SalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalesScalarFieldEnum | SalesScalarFieldEnum[]
  }

  /**
   * Customers.CustomerCredit
   */
  export type Customers$CustomerCreditArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    where?: CustomerCreditWhereInput
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    cursor?: CustomerCreditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerCreditScalarFieldEnum | CustomerCreditScalarFieldEnum[]
  }

  /**
   * Customers without action
   */
  export type CustomersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customers
     */
    select?: CustomersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customers
     */
    omit?: CustomersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomersInclude<ExtArgs> | null
  }


  /**
   * Model SupplierCredits
   */

  export type AggregateSupplierCredits = {
    _count: SupplierCreditsCountAggregateOutputType | null
    _avg: SupplierCreditsAvgAggregateOutputType | null
    _sum: SupplierCreditsSumAggregateOutputType | null
    _min: SupplierCreditsMinAggregateOutputType | null
    _max: SupplierCreditsMaxAggregateOutputType | null
  }

  export type SupplierCreditsAvgAggregateOutputType = {
    credit_amount: number | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
  }

  export type SupplierCreditsSumAggregateOutputType = {
    credit_amount: number | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
  }

  export type SupplierCreditsMinAggregateOutputType = {
    id: string | null
    supplier_id: string | null
    credit_amount: number | null
    medicine_name: string | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
    description: string | null
    payment_method: $Enums.PaymentMethod | null
    payment_status: $Enums.PaymentStatus | null
    credit_date: Date | null
    payment_file: string | null
    created_by: string | null
    updated_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SupplierCreditsMaxAggregateOutputType = {
    id: string | null
    supplier_id: string | null
    credit_amount: number | null
    medicine_name: string | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
    description: string | null
    payment_method: $Enums.PaymentMethod | null
    payment_status: $Enums.PaymentStatus | null
    credit_date: Date | null
    payment_file: string | null
    created_by: string | null
    updated_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SupplierCreditsCountAggregateOutputType = {
    id: number
    supplier_id: number
    credit_amount: number
    medicine_name: number
    paid_amount: number
    unpaid_amount: number
    total_unpaid_amount: number
    total_paid_amount: number
    description: number
    payment_method: number
    payment_status: number
    credit_date: number
    payment_file: number
    created_by: number
    updated_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SupplierCreditsAvgAggregateInputType = {
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
  }

  export type SupplierCreditsSumAggregateInputType = {
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
  }

  export type SupplierCreditsMinAggregateInputType = {
    id?: true
    supplier_id?: true
    credit_amount?: true
    medicine_name?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
    description?: true
    payment_method?: true
    payment_status?: true
    credit_date?: true
    payment_file?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type SupplierCreditsMaxAggregateInputType = {
    id?: true
    supplier_id?: true
    credit_amount?: true
    medicine_name?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
    description?: true
    payment_method?: true
    payment_status?: true
    credit_date?: true
    payment_file?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type SupplierCreditsCountAggregateInputType = {
    id?: true
    supplier_id?: true
    credit_amount?: true
    medicine_name?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
    description?: true
    payment_method?: true
    payment_status?: true
    credit_date?: true
    payment_file?: true
    created_by?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SupplierCreditsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupplierCredits to aggregate.
     */
    where?: SupplierCreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCredits to fetch.
     */
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierCreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCredits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SupplierCredits
    **/
    _count?: true | SupplierCreditsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierCreditsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierCreditsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierCreditsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierCreditsMaxAggregateInputType
  }

  export type GetSupplierCreditsAggregateType<T extends SupplierCreditsAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplierCredits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplierCredits[P]>
      : GetScalarType<T[P], AggregateSupplierCredits[P]>
  }




  export type SupplierCreditsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierCreditsWhereInput
    orderBy?: SupplierCreditsOrderByWithAggregationInput | SupplierCreditsOrderByWithAggregationInput[]
    by: SupplierCreditsScalarFieldEnum[] | SupplierCreditsScalarFieldEnum
    having?: SupplierCreditsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCreditsCountAggregateInputType | true
    _avg?: SupplierCreditsAvgAggregateInputType
    _sum?: SupplierCreditsSumAggregateInputType
    _min?: SupplierCreditsMinAggregateInputType
    _max?: SupplierCreditsMaxAggregateInputType
  }

  export type SupplierCreditsGroupByOutputType = {
    id: string
    supplier_id: string
    credit_amount: number
    medicine_name: string | null
    paid_amount: number
    unpaid_amount: number
    total_unpaid_amount: number
    total_paid_amount: number
    description: string | null
    payment_method: $Enums.PaymentMethod | null
    payment_status: $Enums.PaymentStatus
    credit_date: Date
    payment_file: string | null
    created_by: string
    updated_by: string | null
    created_at: Date
    updated_at: Date
    _count: SupplierCreditsCountAggregateOutputType | null
    _avg: SupplierCreditsAvgAggregateOutputType | null
    _sum: SupplierCreditsSumAggregateOutputType | null
    _min: SupplierCreditsMinAggregateOutputType | null
    _max: SupplierCreditsMaxAggregateOutputType | null
  }

  type GetSupplierCreditsGroupByPayload<T extends SupplierCreditsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierCreditsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierCreditsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierCreditsGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierCreditsGroupByOutputType[P]>
        }
      >
    >


  export type SupplierCreditsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_id?: boolean
    credit_amount?: boolean
    medicine_name?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    description?: boolean
    payment_method?: boolean
    payment_status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | SupplierCredits$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["supplierCredits"]>

  export type SupplierCreditsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_id?: boolean
    credit_amount?: boolean
    medicine_name?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    description?: boolean
    payment_method?: boolean
    payment_status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | SupplierCredits$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["supplierCredits"]>

  export type SupplierCreditsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplier_id?: boolean
    credit_amount?: boolean
    medicine_name?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    description?: boolean
    payment_method?: boolean
    payment_status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | SupplierCredits$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["supplierCredits"]>

  export type SupplierCreditsSelectScalar = {
    id?: boolean
    supplier_id?: boolean
    credit_amount?: boolean
    medicine_name?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    description?: boolean
    payment_method?: boolean
    payment_status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    created_by?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SupplierCreditsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "supplier_id" | "credit_amount" | "medicine_name" | "paid_amount" | "unpaid_amount" | "total_unpaid_amount" | "total_paid_amount" | "description" | "payment_method" | "payment_status" | "credit_date" | "payment_file" | "created_by" | "updated_by" | "created_at" | "updated_at", ExtArgs["result"]["supplierCredits"]>
  export type SupplierCreditsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | SupplierCredits$updatedByArgs<ExtArgs>
  }
  export type SupplierCreditsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | SupplierCredits$updatedByArgs<ExtArgs>
  }
  export type SupplierCreditsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SuppliersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | SupplierCredits$updatedByArgs<ExtArgs>
  }

  export type $SupplierCreditsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SupplierCredits"
    objects: {
      supplier: Prisma.$SuppliersPayload<ExtArgs>
      createdBy: Prisma.$UsersPayload<ExtArgs>
      updatedBy: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      supplier_id: string
      credit_amount: number
      medicine_name: string | null
      paid_amount: number
      unpaid_amount: number
      total_unpaid_amount: number
      total_paid_amount: number
      description: string | null
      payment_method: $Enums.PaymentMethod | null
      payment_status: $Enums.PaymentStatus
      credit_date: Date
      payment_file: string | null
      created_by: string
      updated_by: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["supplierCredits"]>
    composites: {}
  }

  type SupplierCreditsGetPayload<S extends boolean | null | undefined | SupplierCreditsDefaultArgs> = $Result.GetResult<Prisma.$SupplierCreditsPayload, S>

  type SupplierCreditsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SupplierCreditsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SupplierCreditsCountAggregateInputType | true
    }

  export interface SupplierCreditsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SupplierCredits'], meta: { name: 'SupplierCredits' } }
    /**
     * Find zero or one SupplierCredits that matches the filter.
     * @param {SupplierCreditsFindUniqueArgs} args - Arguments to find a SupplierCredits
     * @example
     * // Get one SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplierCreditsFindUniqueArgs>(args: SelectSubset<T, SupplierCreditsFindUniqueArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SupplierCredits that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SupplierCreditsFindUniqueOrThrowArgs} args - Arguments to find a SupplierCredits
     * @example
     * // Get one SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplierCreditsFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplierCreditsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SupplierCredits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsFindFirstArgs} args - Arguments to find a SupplierCredits
     * @example
     * // Get one SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplierCreditsFindFirstArgs>(args?: SelectSubset<T, SupplierCreditsFindFirstArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SupplierCredits that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsFindFirstOrThrowArgs} args - Arguments to find a SupplierCredits
     * @example
     * // Get one SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplierCreditsFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplierCreditsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SupplierCredits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.findMany()
     * 
     * // Get first 10 SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierCreditsWithIdOnly = await prisma.supplierCredits.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplierCreditsFindManyArgs>(args?: SelectSubset<T, SupplierCreditsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SupplierCredits.
     * @param {SupplierCreditsCreateArgs} args - Arguments to create a SupplierCredits.
     * @example
     * // Create one SupplierCredits
     * const SupplierCredits = await prisma.supplierCredits.create({
     *   data: {
     *     // ... data to create a SupplierCredits
     *   }
     * })
     * 
     */
    create<T extends SupplierCreditsCreateArgs>(args: SelectSubset<T, SupplierCreditsCreateArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SupplierCredits.
     * @param {SupplierCreditsCreateManyArgs} args - Arguments to create many SupplierCredits.
     * @example
     * // Create many SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplierCreditsCreateManyArgs>(args?: SelectSubset<T, SupplierCreditsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SupplierCredits and returns the data saved in the database.
     * @param {SupplierCreditsCreateManyAndReturnArgs} args - Arguments to create many SupplierCredits.
     * @example
     * // Create many SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SupplierCredits and only return the `id`
     * const supplierCreditsWithIdOnly = await prisma.supplierCredits.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplierCreditsCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplierCreditsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SupplierCredits.
     * @param {SupplierCreditsDeleteArgs} args - Arguments to delete one SupplierCredits.
     * @example
     * // Delete one SupplierCredits
     * const SupplierCredits = await prisma.supplierCredits.delete({
     *   where: {
     *     // ... filter to delete one SupplierCredits
     *   }
     * })
     * 
     */
    delete<T extends SupplierCreditsDeleteArgs>(args: SelectSubset<T, SupplierCreditsDeleteArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SupplierCredits.
     * @param {SupplierCreditsUpdateArgs} args - Arguments to update one SupplierCredits.
     * @example
     * // Update one SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplierCreditsUpdateArgs>(args: SelectSubset<T, SupplierCreditsUpdateArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SupplierCredits.
     * @param {SupplierCreditsDeleteManyArgs} args - Arguments to filter SupplierCredits to delete.
     * @example
     * // Delete a few SupplierCredits
     * const { count } = await prisma.supplierCredits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplierCreditsDeleteManyArgs>(args?: SelectSubset<T, SupplierCreditsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupplierCredits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplierCreditsUpdateManyArgs>(args: SelectSubset<T, SupplierCreditsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupplierCredits and returns the data updated in the database.
     * @param {SupplierCreditsUpdateManyAndReturnArgs} args - Arguments to update many SupplierCredits.
     * @example
     * // Update many SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SupplierCredits and only return the `id`
     * const supplierCreditsWithIdOnly = await prisma.supplierCredits.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SupplierCreditsUpdateManyAndReturnArgs>(args: SelectSubset<T, SupplierCreditsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SupplierCredits.
     * @param {SupplierCreditsUpsertArgs} args - Arguments to update or create a SupplierCredits.
     * @example
     * // Update or create a SupplierCredits
     * const supplierCredits = await prisma.supplierCredits.upsert({
     *   create: {
     *     // ... data to create a SupplierCredits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SupplierCredits we want to update
     *   }
     * })
     */
    upsert<T extends SupplierCreditsUpsertArgs>(args: SelectSubset<T, SupplierCreditsUpsertArgs<ExtArgs>>): Prisma__SupplierCreditsClient<$Result.GetResult<Prisma.$SupplierCreditsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SupplierCredits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsCountArgs} args - Arguments to filter SupplierCredits to count.
     * @example
     * // Count the number of SupplierCredits
     * const count = await prisma.supplierCredits.count({
     *   where: {
     *     // ... the filter for the SupplierCredits we want to count
     *   }
     * })
    **/
    count<T extends SupplierCreditsCountArgs>(
      args?: Subset<T, SupplierCreditsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCreditsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SupplierCredits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierCreditsAggregateArgs>(args: Subset<T, SupplierCreditsAggregateArgs>): Prisma.PrismaPromise<GetSupplierCreditsAggregateType<T>>

    /**
     * Group by SupplierCredits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCreditsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierCreditsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierCreditsGroupByArgs['orderBy'] }
        : { orderBy?: SupplierCreditsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierCreditsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierCreditsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SupplierCredits model
   */
  readonly fields: SupplierCreditsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SupplierCredits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierCreditsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supplier<T extends SuppliersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SuppliersDefaultArgs<ExtArgs>>): Prisma__SuppliersClient<$Result.GetResult<Prisma.$SuppliersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends SupplierCredits$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, SupplierCredits$updatedByArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SupplierCredits model
   */
  interface SupplierCreditsFieldRefs {
    readonly id: FieldRef<"SupplierCredits", 'String'>
    readonly supplier_id: FieldRef<"SupplierCredits", 'String'>
    readonly credit_amount: FieldRef<"SupplierCredits", 'Float'>
    readonly medicine_name: FieldRef<"SupplierCredits", 'String'>
    readonly paid_amount: FieldRef<"SupplierCredits", 'Float'>
    readonly unpaid_amount: FieldRef<"SupplierCredits", 'Float'>
    readonly total_unpaid_amount: FieldRef<"SupplierCredits", 'Float'>
    readonly total_paid_amount: FieldRef<"SupplierCredits", 'Float'>
    readonly description: FieldRef<"SupplierCredits", 'String'>
    readonly payment_method: FieldRef<"SupplierCredits", 'PaymentMethod'>
    readonly payment_status: FieldRef<"SupplierCredits", 'PaymentStatus'>
    readonly credit_date: FieldRef<"SupplierCredits", 'DateTime'>
    readonly payment_file: FieldRef<"SupplierCredits", 'String'>
    readonly created_by: FieldRef<"SupplierCredits", 'String'>
    readonly updated_by: FieldRef<"SupplierCredits", 'String'>
    readonly created_at: FieldRef<"SupplierCredits", 'DateTime'>
    readonly updated_at: FieldRef<"SupplierCredits", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SupplierCredits findUnique
   */
  export type SupplierCreditsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCredits to fetch.
     */
    where: SupplierCreditsWhereUniqueInput
  }

  /**
   * SupplierCredits findUniqueOrThrow
   */
  export type SupplierCreditsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCredits to fetch.
     */
    where: SupplierCreditsWhereUniqueInput
  }

  /**
   * SupplierCredits findFirst
   */
  export type SupplierCreditsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCredits to fetch.
     */
    where?: SupplierCreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCredits to fetch.
     */
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupplierCredits.
     */
    cursor?: SupplierCreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCredits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupplierCredits.
     */
    distinct?: SupplierCreditsScalarFieldEnum | SupplierCreditsScalarFieldEnum[]
  }

  /**
   * SupplierCredits findFirstOrThrow
   */
  export type SupplierCreditsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCredits to fetch.
     */
    where?: SupplierCreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCredits to fetch.
     */
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupplierCredits.
     */
    cursor?: SupplierCreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCredits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupplierCredits.
     */
    distinct?: SupplierCreditsScalarFieldEnum | SupplierCreditsScalarFieldEnum[]
  }

  /**
   * SupplierCredits findMany
   */
  export type SupplierCreditsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * Filter, which SupplierCredits to fetch.
     */
    where?: SupplierCreditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierCredits to fetch.
     */
    orderBy?: SupplierCreditsOrderByWithRelationInput | SupplierCreditsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SupplierCredits.
     */
    cursor?: SupplierCreditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierCredits.
     */
    skip?: number
    distinct?: SupplierCreditsScalarFieldEnum | SupplierCreditsScalarFieldEnum[]
  }

  /**
   * SupplierCredits create
   */
  export type SupplierCreditsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * The data needed to create a SupplierCredits.
     */
    data: XOR<SupplierCreditsCreateInput, SupplierCreditsUncheckedCreateInput>
  }

  /**
   * SupplierCredits createMany
   */
  export type SupplierCreditsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SupplierCredits.
     */
    data: SupplierCreditsCreateManyInput | SupplierCreditsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SupplierCredits createManyAndReturn
   */
  export type SupplierCreditsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * The data used to create many SupplierCredits.
     */
    data: SupplierCreditsCreateManyInput | SupplierCreditsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupplierCredits update
   */
  export type SupplierCreditsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * The data needed to update a SupplierCredits.
     */
    data: XOR<SupplierCreditsUpdateInput, SupplierCreditsUncheckedUpdateInput>
    /**
     * Choose, which SupplierCredits to update.
     */
    where: SupplierCreditsWhereUniqueInput
  }

  /**
   * SupplierCredits updateMany
   */
  export type SupplierCreditsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SupplierCredits.
     */
    data: XOR<SupplierCreditsUpdateManyMutationInput, SupplierCreditsUncheckedUpdateManyInput>
    /**
     * Filter which SupplierCredits to update
     */
    where?: SupplierCreditsWhereInput
    /**
     * Limit how many SupplierCredits to update.
     */
    limit?: number
  }

  /**
   * SupplierCredits updateManyAndReturn
   */
  export type SupplierCreditsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * The data used to update SupplierCredits.
     */
    data: XOR<SupplierCreditsUpdateManyMutationInput, SupplierCreditsUncheckedUpdateManyInput>
    /**
     * Filter which SupplierCredits to update
     */
    where?: SupplierCreditsWhereInput
    /**
     * Limit how many SupplierCredits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupplierCredits upsert
   */
  export type SupplierCreditsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * The filter to search for the SupplierCredits to update in case it exists.
     */
    where: SupplierCreditsWhereUniqueInput
    /**
     * In case the SupplierCredits found by the `where` argument doesn't exist, create a new SupplierCredits with this data.
     */
    create: XOR<SupplierCreditsCreateInput, SupplierCreditsUncheckedCreateInput>
    /**
     * In case the SupplierCredits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierCreditsUpdateInput, SupplierCreditsUncheckedUpdateInput>
  }

  /**
   * SupplierCredits delete
   */
  export type SupplierCreditsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
    /**
     * Filter which SupplierCredits to delete.
     */
    where: SupplierCreditsWhereUniqueInput
  }

  /**
   * SupplierCredits deleteMany
   */
  export type SupplierCreditsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupplierCredits to delete
     */
    where?: SupplierCreditsWhereInput
    /**
     * Limit how many SupplierCredits to delete.
     */
    limit?: number
  }

  /**
   * SupplierCredits.updatedBy
   */
  export type SupplierCredits$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * SupplierCredits without action
   */
  export type SupplierCreditsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCredits
     */
    select?: SupplierCreditsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupplierCredits
     */
    omit?: SupplierCreditsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierCreditsInclude<ExtArgs> | null
  }


  /**
   * Model CustomerCredit
   */

  export type AggregateCustomerCredit = {
    _count: CustomerCreditCountAggregateOutputType | null
    _avg: CustomerCreditAvgAggregateOutputType | null
    _sum: CustomerCreditSumAggregateOutputType | null
    _min: CustomerCreditMinAggregateOutputType | null
    _max: CustomerCreditMaxAggregateOutputType | null
  }

  export type CustomerCreditAvgAggregateOutputType = {
    credit_amount: number | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
  }

  export type CustomerCreditSumAggregateOutputType = {
    credit_amount: number | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
  }

  export type CustomerCreditMinAggregateOutputType = {
    id: string | null
    customer_id: string | null
    credit_amount: number | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
    medicine_name: string | null
    payment_method: $Enums.PaymentMethod | null
    description: string | null
    status: $Enums.PaymentStatus | null
    credit_date: Date | null
    payment_file: string | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type CustomerCreditMaxAggregateOutputType = {
    id: string | null
    customer_id: string | null
    credit_amount: number | null
    paid_amount: number | null
    unpaid_amount: number | null
    total_unpaid_amount: number | null
    total_paid_amount: number | null
    medicine_name: string | null
    payment_method: $Enums.PaymentMethod | null
    description: string | null
    status: $Enums.PaymentStatus | null
    credit_date: Date | null
    payment_file: string | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type CustomerCreditCountAggregateOutputType = {
    id: number
    customer_id: number
    credit_amount: number
    paid_amount: number
    unpaid_amount: number
    total_unpaid_amount: number
    total_paid_amount: number
    medicine_name: number
    payment_method: number
    description: number
    status: number
    credit_date: number
    payment_file: number
    updated_at: number
    created_by: number
    updated_by: number
    _all: number
  }


  export type CustomerCreditAvgAggregateInputType = {
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
  }

  export type CustomerCreditSumAggregateInputType = {
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
  }

  export type CustomerCreditMinAggregateInputType = {
    id?: true
    customer_id?: true
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
    medicine_name?: true
    payment_method?: true
    description?: true
    status?: true
    credit_date?: true
    payment_file?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type CustomerCreditMaxAggregateInputType = {
    id?: true
    customer_id?: true
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
    medicine_name?: true
    payment_method?: true
    description?: true
    status?: true
    credit_date?: true
    payment_file?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type CustomerCreditCountAggregateInputType = {
    id?: true
    customer_id?: true
    credit_amount?: true
    paid_amount?: true
    unpaid_amount?: true
    total_unpaid_amount?: true
    total_paid_amount?: true
    medicine_name?: true
    payment_method?: true
    description?: true
    status?: true
    credit_date?: true
    payment_file?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    _all?: true
  }

  export type CustomerCreditAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerCredit to aggregate.
     */
    where?: CustomerCreditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCredits to fetch.
     */
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerCreditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCredits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerCredits
    **/
    _count?: true | CustomerCreditCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerCreditAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerCreditSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerCreditMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerCreditMaxAggregateInputType
  }

  export type GetCustomerCreditAggregateType<T extends CustomerCreditAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerCredit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerCredit[P]>
      : GetScalarType<T[P], AggregateCustomerCredit[P]>
  }




  export type CustomerCreditGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerCreditWhereInput
    orderBy?: CustomerCreditOrderByWithAggregationInput | CustomerCreditOrderByWithAggregationInput[]
    by: CustomerCreditScalarFieldEnum[] | CustomerCreditScalarFieldEnum
    having?: CustomerCreditScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCreditCountAggregateInputType | true
    _avg?: CustomerCreditAvgAggregateInputType
    _sum?: CustomerCreditSumAggregateInputType
    _min?: CustomerCreditMinAggregateInputType
    _max?: CustomerCreditMaxAggregateInputType
  }

  export type CustomerCreditGroupByOutputType = {
    id: string
    customer_id: string
    credit_amount: number
    paid_amount: number
    unpaid_amount: number
    total_unpaid_amount: number
    total_paid_amount: number
    medicine_name: string | null
    payment_method: $Enums.PaymentMethod
    description: string | null
    status: $Enums.PaymentStatus
    credit_date: Date
    payment_file: string | null
    updated_at: Date
    created_by: string
    updated_by: string | null
    _count: CustomerCreditCountAggregateOutputType | null
    _avg: CustomerCreditAvgAggregateOutputType | null
    _sum: CustomerCreditSumAggregateOutputType | null
    _min: CustomerCreditMinAggregateOutputType | null
    _max: CustomerCreditMaxAggregateOutputType | null
  }

  type GetCustomerCreditGroupByPayload<T extends CustomerCreditGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerCreditGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerCreditGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerCreditGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerCreditGroupByOutputType[P]>
        }
      >
    >


  export type CustomerCreditSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    credit_amount?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    medicine_name?: boolean
    payment_method?: boolean
    description?: boolean
    status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    customer?: boolean | CustomersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | CustomerCredit$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["customerCredit"]>

  export type CustomerCreditSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    credit_amount?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    medicine_name?: boolean
    payment_method?: boolean
    description?: boolean
    status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    customer?: boolean | CustomersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | CustomerCredit$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["customerCredit"]>

  export type CustomerCreditSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    credit_amount?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    medicine_name?: boolean
    payment_method?: boolean
    description?: boolean
    status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    customer?: boolean | CustomersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | CustomerCredit$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["customerCredit"]>

  export type CustomerCreditSelectScalar = {
    id?: boolean
    customer_id?: boolean
    credit_amount?: boolean
    paid_amount?: boolean
    unpaid_amount?: boolean
    total_unpaid_amount?: boolean
    total_paid_amount?: boolean
    medicine_name?: boolean
    payment_method?: boolean
    description?: boolean
    status?: boolean
    credit_date?: boolean
    payment_file?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
  }

  export type CustomerCreditOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customer_id" | "credit_amount" | "paid_amount" | "unpaid_amount" | "total_unpaid_amount" | "total_paid_amount" | "medicine_name" | "payment_method" | "description" | "status" | "credit_date" | "payment_file" | "updated_at" | "created_by" | "updated_by", ExtArgs["result"]["customerCredit"]>
  export type CustomerCreditInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | CustomerCredit$updatedByArgs<ExtArgs>
  }
  export type CustomerCreditIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | CustomerCredit$updatedByArgs<ExtArgs>
  }
  export type CustomerCreditIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomersDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    updatedBy?: boolean | CustomerCredit$updatedByArgs<ExtArgs>
  }

  export type $CustomerCreditPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerCredit"
    objects: {
      customer: Prisma.$CustomersPayload<ExtArgs>
      createdBy: Prisma.$UsersPayload<ExtArgs>
      updatedBy: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customer_id: string
      credit_amount: number
      paid_amount: number
      unpaid_amount: number
      total_unpaid_amount: number
      total_paid_amount: number
      medicine_name: string | null
      payment_method: $Enums.PaymentMethod
      description: string | null
      status: $Enums.PaymentStatus
      credit_date: Date
      payment_file: string | null
      updated_at: Date
      created_by: string
      updated_by: string | null
    }, ExtArgs["result"]["customerCredit"]>
    composites: {}
  }

  type CustomerCreditGetPayload<S extends boolean | null | undefined | CustomerCreditDefaultArgs> = $Result.GetResult<Prisma.$CustomerCreditPayload, S>

  type CustomerCreditCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerCreditFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCreditCountAggregateInputType | true
    }

  export interface CustomerCreditDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerCredit'], meta: { name: 'CustomerCredit' } }
    /**
     * Find zero or one CustomerCredit that matches the filter.
     * @param {CustomerCreditFindUniqueArgs} args - Arguments to find a CustomerCredit
     * @example
     * // Get one CustomerCredit
     * const customerCredit = await prisma.customerCredit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerCreditFindUniqueArgs>(args: SelectSubset<T, CustomerCreditFindUniqueArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerCredit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerCreditFindUniqueOrThrowArgs} args - Arguments to find a CustomerCredit
     * @example
     * // Get one CustomerCredit
     * const customerCredit = await prisma.customerCredit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerCreditFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerCreditFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerCredit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditFindFirstArgs} args - Arguments to find a CustomerCredit
     * @example
     * // Get one CustomerCredit
     * const customerCredit = await prisma.customerCredit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerCreditFindFirstArgs>(args?: SelectSubset<T, CustomerCreditFindFirstArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerCredit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditFindFirstOrThrowArgs} args - Arguments to find a CustomerCredit
     * @example
     * // Get one CustomerCredit
     * const customerCredit = await prisma.customerCredit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerCreditFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerCreditFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerCredits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerCredits
     * const customerCredits = await prisma.customerCredit.findMany()
     * 
     * // Get first 10 CustomerCredits
     * const customerCredits = await prisma.customerCredit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerCreditWithIdOnly = await prisma.customerCredit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerCreditFindManyArgs>(args?: SelectSubset<T, CustomerCreditFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerCredit.
     * @param {CustomerCreditCreateArgs} args - Arguments to create a CustomerCredit.
     * @example
     * // Create one CustomerCredit
     * const CustomerCredit = await prisma.customerCredit.create({
     *   data: {
     *     // ... data to create a CustomerCredit
     *   }
     * })
     * 
     */
    create<T extends CustomerCreditCreateArgs>(args: SelectSubset<T, CustomerCreditCreateArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerCredits.
     * @param {CustomerCreditCreateManyArgs} args - Arguments to create many CustomerCredits.
     * @example
     * // Create many CustomerCredits
     * const customerCredit = await prisma.customerCredit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreditCreateManyArgs>(args?: SelectSubset<T, CustomerCreditCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerCredits and returns the data saved in the database.
     * @param {CustomerCreditCreateManyAndReturnArgs} args - Arguments to create many CustomerCredits.
     * @example
     * // Create many CustomerCredits
     * const customerCredit = await prisma.customerCredit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerCredits and only return the `id`
     * const customerCreditWithIdOnly = await prisma.customerCredit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreditCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreditCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerCredit.
     * @param {CustomerCreditDeleteArgs} args - Arguments to delete one CustomerCredit.
     * @example
     * // Delete one CustomerCredit
     * const CustomerCredit = await prisma.customerCredit.delete({
     *   where: {
     *     // ... filter to delete one CustomerCredit
     *   }
     * })
     * 
     */
    delete<T extends CustomerCreditDeleteArgs>(args: SelectSubset<T, CustomerCreditDeleteArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerCredit.
     * @param {CustomerCreditUpdateArgs} args - Arguments to update one CustomerCredit.
     * @example
     * // Update one CustomerCredit
     * const customerCredit = await prisma.customerCredit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerCreditUpdateArgs>(args: SelectSubset<T, CustomerCreditUpdateArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerCredits.
     * @param {CustomerCreditDeleteManyArgs} args - Arguments to filter CustomerCredits to delete.
     * @example
     * // Delete a few CustomerCredits
     * const { count } = await prisma.customerCredit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerCreditDeleteManyArgs>(args?: SelectSubset<T, CustomerCreditDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerCredits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerCredits
     * const customerCredit = await prisma.customerCredit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerCreditUpdateManyArgs>(args: SelectSubset<T, CustomerCreditUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerCredits and returns the data updated in the database.
     * @param {CustomerCreditUpdateManyAndReturnArgs} args - Arguments to update many CustomerCredits.
     * @example
     * // Update many CustomerCredits
     * const customerCredit = await prisma.customerCredit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerCredits and only return the `id`
     * const customerCreditWithIdOnly = await prisma.customerCredit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerCreditUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerCreditUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerCredit.
     * @param {CustomerCreditUpsertArgs} args - Arguments to update or create a CustomerCredit.
     * @example
     * // Update or create a CustomerCredit
     * const customerCredit = await prisma.customerCredit.upsert({
     *   create: {
     *     // ... data to create a CustomerCredit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerCredit we want to update
     *   }
     * })
     */
    upsert<T extends CustomerCreditUpsertArgs>(args: SelectSubset<T, CustomerCreditUpsertArgs<ExtArgs>>): Prisma__CustomerCreditClient<$Result.GetResult<Prisma.$CustomerCreditPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerCredits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditCountArgs} args - Arguments to filter CustomerCredits to count.
     * @example
     * // Count the number of CustomerCredits
     * const count = await prisma.customerCredit.count({
     *   where: {
     *     // ... the filter for the CustomerCredits we want to count
     *   }
     * })
    **/
    count<T extends CustomerCreditCountArgs>(
      args?: Subset<T, CustomerCreditCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCreditCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerCredit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerCreditAggregateArgs>(args: Subset<T, CustomerCreditAggregateArgs>): Prisma.PrismaPromise<GetCustomerCreditAggregateType<T>>

    /**
     * Group by CustomerCredit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCreditGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerCreditGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerCreditGroupByArgs['orderBy'] }
        : { orderBy?: CustomerCreditGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerCreditGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerCreditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerCredit model
   */
  readonly fields: CustomerCreditFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerCredit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerCreditClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomersDefaultArgs<ExtArgs>>): Prisma__CustomersClient<$Result.GetResult<Prisma.$CustomersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends CustomerCredit$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, CustomerCredit$updatedByArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerCredit model
   */
  interface CustomerCreditFieldRefs {
    readonly id: FieldRef<"CustomerCredit", 'String'>
    readonly customer_id: FieldRef<"CustomerCredit", 'String'>
    readonly credit_amount: FieldRef<"CustomerCredit", 'Float'>
    readonly paid_amount: FieldRef<"CustomerCredit", 'Float'>
    readonly unpaid_amount: FieldRef<"CustomerCredit", 'Float'>
    readonly total_unpaid_amount: FieldRef<"CustomerCredit", 'Float'>
    readonly total_paid_amount: FieldRef<"CustomerCredit", 'Float'>
    readonly medicine_name: FieldRef<"CustomerCredit", 'String'>
    readonly payment_method: FieldRef<"CustomerCredit", 'PaymentMethod'>
    readonly description: FieldRef<"CustomerCredit", 'String'>
    readonly status: FieldRef<"CustomerCredit", 'PaymentStatus'>
    readonly credit_date: FieldRef<"CustomerCredit", 'DateTime'>
    readonly payment_file: FieldRef<"CustomerCredit", 'String'>
    readonly updated_at: FieldRef<"CustomerCredit", 'DateTime'>
    readonly created_by: FieldRef<"CustomerCredit", 'String'>
    readonly updated_by: FieldRef<"CustomerCredit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CustomerCredit findUnique
   */
  export type CustomerCreditFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCredit to fetch.
     */
    where: CustomerCreditWhereUniqueInput
  }

  /**
   * CustomerCredit findUniqueOrThrow
   */
  export type CustomerCreditFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCredit to fetch.
     */
    where: CustomerCreditWhereUniqueInput
  }

  /**
   * CustomerCredit findFirst
   */
  export type CustomerCreditFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCredit to fetch.
     */
    where?: CustomerCreditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCredits to fetch.
     */
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerCredits.
     */
    cursor?: CustomerCreditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCredits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerCredits.
     */
    distinct?: CustomerCreditScalarFieldEnum | CustomerCreditScalarFieldEnum[]
  }

  /**
   * CustomerCredit findFirstOrThrow
   */
  export type CustomerCreditFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCredit to fetch.
     */
    where?: CustomerCreditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCredits to fetch.
     */
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerCredits.
     */
    cursor?: CustomerCreditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCredits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerCredits.
     */
    distinct?: CustomerCreditScalarFieldEnum | CustomerCreditScalarFieldEnum[]
  }

  /**
   * CustomerCredit findMany
   */
  export type CustomerCreditFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCredits to fetch.
     */
    where?: CustomerCreditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCredits to fetch.
     */
    orderBy?: CustomerCreditOrderByWithRelationInput | CustomerCreditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerCredits.
     */
    cursor?: CustomerCreditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCredits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCredits.
     */
    skip?: number
    distinct?: CustomerCreditScalarFieldEnum | CustomerCreditScalarFieldEnum[]
  }

  /**
   * CustomerCredit create
   */
  export type CustomerCreditCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerCredit.
     */
    data: XOR<CustomerCreditCreateInput, CustomerCreditUncheckedCreateInput>
  }

  /**
   * CustomerCredit createMany
   */
  export type CustomerCreditCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerCredits.
     */
    data: CustomerCreditCreateManyInput | CustomerCreditCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerCredit createManyAndReturn
   */
  export type CustomerCreditCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerCredits.
     */
    data: CustomerCreditCreateManyInput | CustomerCreditCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerCredit update
   */
  export type CustomerCreditUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerCredit.
     */
    data: XOR<CustomerCreditUpdateInput, CustomerCreditUncheckedUpdateInput>
    /**
     * Choose, which CustomerCredit to update.
     */
    where: CustomerCreditWhereUniqueInput
  }

  /**
   * CustomerCredit updateMany
   */
  export type CustomerCreditUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerCredits.
     */
    data: XOR<CustomerCreditUpdateManyMutationInput, CustomerCreditUncheckedUpdateManyInput>
    /**
     * Filter which CustomerCredits to update
     */
    where?: CustomerCreditWhereInput
    /**
     * Limit how many CustomerCredits to update.
     */
    limit?: number
  }

  /**
   * CustomerCredit updateManyAndReturn
   */
  export type CustomerCreditUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * The data used to update CustomerCredits.
     */
    data: XOR<CustomerCreditUpdateManyMutationInput, CustomerCreditUncheckedUpdateManyInput>
    /**
     * Filter which CustomerCredits to update
     */
    where?: CustomerCreditWhereInput
    /**
     * Limit how many CustomerCredits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerCredit upsert
   */
  export type CustomerCreditUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerCredit to update in case it exists.
     */
    where: CustomerCreditWhereUniqueInput
    /**
     * In case the CustomerCredit found by the `where` argument doesn't exist, create a new CustomerCredit with this data.
     */
    create: XOR<CustomerCreditCreateInput, CustomerCreditUncheckedCreateInput>
    /**
     * In case the CustomerCredit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerCreditUpdateInput, CustomerCreditUncheckedUpdateInput>
  }

  /**
   * CustomerCredit delete
   */
  export type CustomerCreditDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
    /**
     * Filter which CustomerCredit to delete.
     */
    where: CustomerCreditWhereUniqueInput
  }

  /**
   * CustomerCredit deleteMany
   */
  export type CustomerCreditDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerCredits to delete
     */
    where?: CustomerCreditWhereInput
    /**
     * Limit how many CustomerCredits to delete.
     */
    limit?: number
  }

  /**
   * CustomerCredit.updatedBy
   */
  export type CustomerCredit$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * CustomerCredit without action
   */
  export type CustomerCreditDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCredit
     */
    select?: CustomerCreditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCredit
     */
    omit?: CustomerCreditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCreditInclude<ExtArgs> | null
  }


  /**
   * Model Objectives
   */

  export type AggregateObjectives = {
    _count: ObjectivesCountAggregateOutputType | null
    _avg: ObjectivesAvgAggregateOutputType | null
    _sum: ObjectivesSumAggregateOutputType | null
    _min: ObjectivesMinAggregateOutputType | null
    _max: ObjectivesMaxAggregateOutputType | null
  }

  export type ObjectivesAvgAggregateOutputType = {
    progress: number | null
  }

  export type ObjectivesSumAggregateOutputType = {
    progress: number | null
  }

  export type ObjectivesMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    time_period: string | null
    progress: number | null
  }

  export type ObjectivesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    time_period: string | null
    progress: number | null
  }

  export type ObjectivesCountAggregateOutputType = {
    id: number
    title: number
    description: number
    time_period: number
    progress: number
    _all: number
  }


  export type ObjectivesAvgAggregateInputType = {
    progress?: true
  }

  export type ObjectivesSumAggregateInputType = {
    progress?: true
  }

  export type ObjectivesMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    time_period?: true
    progress?: true
  }

  export type ObjectivesMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    time_period?: true
    progress?: true
  }

  export type ObjectivesCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    time_period?: true
    progress?: true
    _all?: true
  }

  export type ObjectivesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objectives to aggregate.
     */
    where?: ObjectivesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectivesOrderByWithRelationInput | ObjectivesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObjectivesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Objectives
    **/
    _count?: true | ObjectivesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObjectivesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObjectivesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObjectivesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObjectivesMaxAggregateInputType
  }

  export type GetObjectivesAggregateType<T extends ObjectivesAggregateArgs> = {
        [P in keyof T & keyof AggregateObjectives]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObjectives[P]>
      : GetScalarType<T[P], AggregateObjectives[P]>
  }




  export type ObjectivesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectivesWhereInput
    orderBy?: ObjectivesOrderByWithAggregationInput | ObjectivesOrderByWithAggregationInput[]
    by: ObjectivesScalarFieldEnum[] | ObjectivesScalarFieldEnum
    having?: ObjectivesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObjectivesCountAggregateInputType | true
    _avg?: ObjectivesAvgAggregateInputType
    _sum?: ObjectivesSumAggregateInputType
    _min?: ObjectivesMinAggregateInputType
    _max?: ObjectivesMaxAggregateInputType
  }

  export type ObjectivesGroupByOutputType = {
    id: string
    title: string
    description: string
    time_period: string
    progress: number
    _count: ObjectivesCountAggregateOutputType | null
    _avg: ObjectivesAvgAggregateOutputType | null
    _sum: ObjectivesSumAggregateOutputType | null
    _min: ObjectivesMinAggregateOutputType | null
    _max: ObjectivesMaxAggregateOutputType | null
  }

  type GetObjectivesGroupByPayload<T extends ObjectivesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObjectivesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObjectivesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObjectivesGroupByOutputType[P]>
            : GetScalarType<T[P], ObjectivesGroupByOutputType[P]>
        }
      >
    >


  export type ObjectivesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    time_period?: boolean
    progress?: boolean
    KeyResults?: boolean | Objectives$KeyResultsArgs<ExtArgs>
    _count?: boolean | ObjectivesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["objectives"]>

  export type ObjectivesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    time_period?: boolean
    progress?: boolean
  }, ExtArgs["result"]["objectives"]>

  export type ObjectivesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    time_period?: boolean
    progress?: boolean
  }, ExtArgs["result"]["objectives"]>

  export type ObjectivesSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    time_period?: boolean
    progress?: boolean
  }

  export type ObjectivesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "time_period" | "progress", ExtArgs["result"]["objectives"]>
  export type ObjectivesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    KeyResults?: boolean | Objectives$KeyResultsArgs<ExtArgs>
    _count?: boolean | ObjectivesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ObjectivesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ObjectivesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ObjectivesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Objectives"
    objects: {
      KeyResults: Prisma.$KeyResultsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      time_period: string
      progress: number
    }, ExtArgs["result"]["objectives"]>
    composites: {}
  }

  type ObjectivesGetPayload<S extends boolean | null | undefined | ObjectivesDefaultArgs> = $Result.GetResult<Prisma.$ObjectivesPayload, S>

  type ObjectivesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ObjectivesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ObjectivesCountAggregateInputType | true
    }

  export interface ObjectivesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Objectives'], meta: { name: 'Objectives' } }
    /**
     * Find zero or one Objectives that matches the filter.
     * @param {ObjectivesFindUniqueArgs} args - Arguments to find a Objectives
     * @example
     * // Get one Objectives
     * const objectives = await prisma.objectives.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ObjectivesFindUniqueArgs>(args: SelectSubset<T, ObjectivesFindUniqueArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Objectives that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ObjectivesFindUniqueOrThrowArgs} args - Arguments to find a Objectives
     * @example
     * // Get one Objectives
     * const objectives = await prisma.objectives.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ObjectivesFindUniqueOrThrowArgs>(args: SelectSubset<T, ObjectivesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Objectives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesFindFirstArgs} args - Arguments to find a Objectives
     * @example
     * // Get one Objectives
     * const objectives = await prisma.objectives.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ObjectivesFindFirstArgs>(args?: SelectSubset<T, ObjectivesFindFirstArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Objectives that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesFindFirstOrThrowArgs} args - Arguments to find a Objectives
     * @example
     * // Get one Objectives
     * const objectives = await prisma.objectives.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ObjectivesFindFirstOrThrowArgs>(args?: SelectSubset<T, ObjectivesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Objectives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Objectives
     * const objectives = await prisma.objectives.findMany()
     * 
     * // Get first 10 Objectives
     * const objectives = await prisma.objectives.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const objectivesWithIdOnly = await prisma.objectives.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ObjectivesFindManyArgs>(args?: SelectSubset<T, ObjectivesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Objectives.
     * @param {ObjectivesCreateArgs} args - Arguments to create a Objectives.
     * @example
     * // Create one Objectives
     * const Objectives = await prisma.objectives.create({
     *   data: {
     *     // ... data to create a Objectives
     *   }
     * })
     * 
     */
    create<T extends ObjectivesCreateArgs>(args: SelectSubset<T, ObjectivesCreateArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Objectives.
     * @param {ObjectivesCreateManyArgs} args - Arguments to create many Objectives.
     * @example
     * // Create many Objectives
     * const objectives = await prisma.objectives.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ObjectivesCreateManyArgs>(args?: SelectSubset<T, ObjectivesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Objectives and returns the data saved in the database.
     * @param {ObjectivesCreateManyAndReturnArgs} args - Arguments to create many Objectives.
     * @example
     * // Create many Objectives
     * const objectives = await prisma.objectives.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Objectives and only return the `id`
     * const objectivesWithIdOnly = await prisma.objectives.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ObjectivesCreateManyAndReturnArgs>(args?: SelectSubset<T, ObjectivesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Objectives.
     * @param {ObjectivesDeleteArgs} args - Arguments to delete one Objectives.
     * @example
     * // Delete one Objectives
     * const Objectives = await prisma.objectives.delete({
     *   where: {
     *     // ... filter to delete one Objectives
     *   }
     * })
     * 
     */
    delete<T extends ObjectivesDeleteArgs>(args: SelectSubset<T, ObjectivesDeleteArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Objectives.
     * @param {ObjectivesUpdateArgs} args - Arguments to update one Objectives.
     * @example
     * // Update one Objectives
     * const objectives = await prisma.objectives.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ObjectivesUpdateArgs>(args: SelectSubset<T, ObjectivesUpdateArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Objectives.
     * @param {ObjectivesDeleteManyArgs} args - Arguments to filter Objectives to delete.
     * @example
     * // Delete a few Objectives
     * const { count } = await prisma.objectives.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ObjectivesDeleteManyArgs>(args?: SelectSubset<T, ObjectivesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Objectives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Objectives
     * const objectives = await prisma.objectives.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ObjectivesUpdateManyArgs>(args: SelectSubset<T, ObjectivesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Objectives and returns the data updated in the database.
     * @param {ObjectivesUpdateManyAndReturnArgs} args - Arguments to update many Objectives.
     * @example
     * // Update many Objectives
     * const objectives = await prisma.objectives.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Objectives and only return the `id`
     * const objectivesWithIdOnly = await prisma.objectives.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ObjectivesUpdateManyAndReturnArgs>(args: SelectSubset<T, ObjectivesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Objectives.
     * @param {ObjectivesUpsertArgs} args - Arguments to update or create a Objectives.
     * @example
     * // Update or create a Objectives
     * const objectives = await prisma.objectives.upsert({
     *   create: {
     *     // ... data to create a Objectives
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Objectives we want to update
     *   }
     * })
     */
    upsert<T extends ObjectivesUpsertArgs>(args: SelectSubset<T, ObjectivesUpsertArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Objectives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesCountArgs} args - Arguments to filter Objectives to count.
     * @example
     * // Count the number of Objectives
     * const count = await prisma.objectives.count({
     *   where: {
     *     // ... the filter for the Objectives we want to count
     *   }
     * })
    **/
    count<T extends ObjectivesCountArgs>(
      args?: Subset<T, ObjectivesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObjectivesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Objectives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObjectivesAggregateArgs>(args: Subset<T, ObjectivesAggregateArgs>): Prisma.PrismaPromise<GetObjectivesAggregateType<T>>

    /**
     * Group by Objectives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectivesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObjectivesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObjectivesGroupByArgs['orderBy'] }
        : { orderBy?: ObjectivesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObjectivesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObjectivesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Objectives model
   */
  readonly fields: ObjectivesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Objectives.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObjectivesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    KeyResults<T extends Objectives$KeyResultsArgs<ExtArgs> = {}>(args?: Subset<T, Objectives$KeyResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Objectives model
   */
  interface ObjectivesFieldRefs {
    readonly id: FieldRef<"Objectives", 'String'>
    readonly title: FieldRef<"Objectives", 'String'>
    readonly description: FieldRef<"Objectives", 'String'>
    readonly time_period: FieldRef<"Objectives", 'String'>
    readonly progress: FieldRef<"Objectives", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Objectives findUnique
   */
  export type ObjectivesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * Filter, which Objectives to fetch.
     */
    where: ObjectivesWhereUniqueInput
  }

  /**
   * Objectives findUniqueOrThrow
   */
  export type ObjectivesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * Filter, which Objectives to fetch.
     */
    where: ObjectivesWhereUniqueInput
  }

  /**
   * Objectives findFirst
   */
  export type ObjectivesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * Filter, which Objectives to fetch.
     */
    where?: ObjectivesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectivesOrderByWithRelationInput | ObjectivesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objectives.
     */
    cursor?: ObjectivesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objectives.
     */
    distinct?: ObjectivesScalarFieldEnum | ObjectivesScalarFieldEnum[]
  }

  /**
   * Objectives findFirstOrThrow
   */
  export type ObjectivesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * Filter, which Objectives to fetch.
     */
    where?: ObjectivesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectivesOrderByWithRelationInput | ObjectivesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objectives.
     */
    cursor?: ObjectivesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objectives.
     */
    distinct?: ObjectivesScalarFieldEnum | ObjectivesScalarFieldEnum[]
  }

  /**
   * Objectives findMany
   */
  export type ObjectivesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * Filter, which Objectives to fetch.
     */
    where?: ObjectivesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectivesOrderByWithRelationInput | ObjectivesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Objectives.
     */
    cursor?: ObjectivesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    distinct?: ObjectivesScalarFieldEnum | ObjectivesScalarFieldEnum[]
  }

  /**
   * Objectives create
   */
  export type ObjectivesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * The data needed to create a Objectives.
     */
    data: XOR<ObjectivesCreateInput, ObjectivesUncheckedCreateInput>
  }

  /**
   * Objectives createMany
   */
  export type ObjectivesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Objectives.
     */
    data: ObjectivesCreateManyInput | ObjectivesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Objectives createManyAndReturn
   */
  export type ObjectivesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * The data used to create many Objectives.
     */
    data: ObjectivesCreateManyInput | ObjectivesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Objectives update
   */
  export type ObjectivesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * The data needed to update a Objectives.
     */
    data: XOR<ObjectivesUpdateInput, ObjectivesUncheckedUpdateInput>
    /**
     * Choose, which Objectives to update.
     */
    where: ObjectivesWhereUniqueInput
  }

  /**
   * Objectives updateMany
   */
  export type ObjectivesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Objectives.
     */
    data: XOR<ObjectivesUpdateManyMutationInput, ObjectivesUncheckedUpdateManyInput>
    /**
     * Filter which Objectives to update
     */
    where?: ObjectivesWhereInput
    /**
     * Limit how many Objectives to update.
     */
    limit?: number
  }

  /**
   * Objectives updateManyAndReturn
   */
  export type ObjectivesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * The data used to update Objectives.
     */
    data: XOR<ObjectivesUpdateManyMutationInput, ObjectivesUncheckedUpdateManyInput>
    /**
     * Filter which Objectives to update
     */
    where?: ObjectivesWhereInput
    /**
     * Limit how many Objectives to update.
     */
    limit?: number
  }

  /**
   * Objectives upsert
   */
  export type ObjectivesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * The filter to search for the Objectives to update in case it exists.
     */
    where: ObjectivesWhereUniqueInput
    /**
     * In case the Objectives found by the `where` argument doesn't exist, create a new Objectives with this data.
     */
    create: XOR<ObjectivesCreateInput, ObjectivesUncheckedCreateInput>
    /**
     * In case the Objectives was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObjectivesUpdateInput, ObjectivesUncheckedUpdateInput>
  }

  /**
   * Objectives delete
   */
  export type ObjectivesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
    /**
     * Filter which Objectives to delete.
     */
    where: ObjectivesWhereUniqueInput
  }

  /**
   * Objectives deleteMany
   */
  export type ObjectivesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objectives to delete
     */
    where?: ObjectivesWhereInput
    /**
     * Limit how many Objectives to delete.
     */
    limit?: number
  }

  /**
   * Objectives.KeyResults
   */
  export type Objectives$KeyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    where?: KeyResultsWhereInput
    orderBy?: KeyResultsOrderByWithRelationInput | KeyResultsOrderByWithRelationInput[]
    cursor?: KeyResultsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeyResultsScalarFieldEnum | KeyResultsScalarFieldEnum[]
  }

  /**
   * Objectives without action
   */
  export type ObjectivesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objectives
     */
    select?: ObjectivesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Objectives
     */
    omit?: ObjectivesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectivesInclude<ExtArgs> | null
  }


  /**
   * Model KeyResults
   */

  export type AggregateKeyResults = {
    _count: KeyResultsCountAggregateOutputType | null
    _avg: KeyResultsAvgAggregateOutputType | null
    _sum: KeyResultsSumAggregateOutputType | null
    _min: KeyResultsMinAggregateOutputType | null
    _max: KeyResultsMaxAggregateOutputType | null
  }

  export type KeyResultsAvgAggregateOutputType = {
    weight: number | null
    progress: number | null
  }

  export type KeyResultsSumAggregateOutputType = {
    weight: number | null
    progress: number | null
  }

  export type KeyResultsMinAggregateOutputType = {
    id: string | null
    objective_id: string | null
    title: string | null
    description: string | null
    weight: number | null
    deadline: Date | null
    progress: number | null
  }

  export type KeyResultsMaxAggregateOutputType = {
    id: string | null
    objective_id: string | null
    title: string | null
    description: string | null
    weight: number | null
    deadline: Date | null
    progress: number | null
  }

  export type KeyResultsCountAggregateOutputType = {
    id: number
    objective_id: number
    title: number
    description: number
    weight: number
    deadline: number
    progress: number
    _all: number
  }


  export type KeyResultsAvgAggregateInputType = {
    weight?: true
    progress?: true
  }

  export type KeyResultsSumAggregateInputType = {
    weight?: true
    progress?: true
  }

  export type KeyResultsMinAggregateInputType = {
    id?: true
    objective_id?: true
    title?: true
    description?: true
    weight?: true
    deadline?: true
    progress?: true
  }

  export type KeyResultsMaxAggregateInputType = {
    id?: true
    objective_id?: true
    title?: true
    description?: true
    weight?: true
    deadline?: true
    progress?: true
  }

  export type KeyResultsCountAggregateInputType = {
    id?: true
    objective_id?: true
    title?: true
    description?: true
    weight?: true
    deadline?: true
    progress?: true
    _all?: true
  }

  export type KeyResultsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyResults to aggregate.
     */
    where?: KeyResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultsOrderByWithRelationInput | KeyResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeyResults
    **/
    _count?: true | KeyResultsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeyResultsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeyResultsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyResultsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyResultsMaxAggregateInputType
  }

  export type GetKeyResultsAggregateType<T extends KeyResultsAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyResults]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyResults[P]>
      : GetScalarType<T[P], AggregateKeyResults[P]>
  }




  export type KeyResultsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyResultsWhereInput
    orderBy?: KeyResultsOrderByWithAggregationInput | KeyResultsOrderByWithAggregationInput[]
    by: KeyResultsScalarFieldEnum[] | KeyResultsScalarFieldEnum
    having?: KeyResultsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyResultsCountAggregateInputType | true
    _avg?: KeyResultsAvgAggregateInputType
    _sum?: KeyResultsSumAggregateInputType
    _min?: KeyResultsMinAggregateInputType
    _max?: KeyResultsMaxAggregateInputType
  }

  export type KeyResultsGroupByOutputType = {
    id: string
    objective_id: string
    title: string
    description: string
    weight: number
    deadline: Date
    progress: number
    _count: KeyResultsCountAggregateOutputType | null
    _avg: KeyResultsAvgAggregateOutputType | null
    _sum: KeyResultsSumAggregateOutputType | null
    _min: KeyResultsMinAggregateOutputType | null
    _max: KeyResultsMaxAggregateOutputType | null
  }

  type GetKeyResultsGroupByPayload<T extends KeyResultsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeyResultsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyResultsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyResultsGroupByOutputType[P]>
            : GetScalarType<T[P], KeyResultsGroupByOutputType[P]>
        }
      >
    >


  export type KeyResultsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objective_id?: boolean
    title?: boolean
    description?: boolean
    weight?: boolean
    deadline?: boolean
    progress?: boolean
    objective?: boolean | ObjectivesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyResults"]>

  export type KeyResultsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objective_id?: boolean
    title?: boolean
    description?: boolean
    weight?: boolean
    deadline?: boolean
    progress?: boolean
    objective?: boolean | ObjectivesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyResults"]>

  export type KeyResultsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objective_id?: boolean
    title?: boolean
    description?: boolean
    weight?: boolean
    deadline?: boolean
    progress?: boolean
    objective?: boolean | ObjectivesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyResults"]>

  export type KeyResultsSelectScalar = {
    id?: boolean
    objective_id?: boolean
    title?: boolean
    description?: boolean
    weight?: boolean
    deadline?: boolean
    progress?: boolean
  }

  export type KeyResultsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "objective_id" | "title" | "description" | "weight" | "deadline" | "progress", ExtArgs["result"]["keyResults"]>
  export type KeyResultsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objective?: boolean | ObjectivesDefaultArgs<ExtArgs>
  }
  export type KeyResultsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objective?: boolean | ObjectivesDefaultArgs<ExtArgs>
  }
  export type KeyResultsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objective?: boolean | ObjectivesDefaultArgs<ExtArgs>
  }

  export type $KeyResultsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KeyResults"
    objects: {
      objective: Prisma.$ObjectivesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      objective_id: string
      title: string
      description: string
      weight: number
      deadline: Date
      progress: number
    }, ExtArgs["result"]["keyResults"]>
    composites: {}
  }

  type KeyResultsGetPayload<S extends boolean | null | undefined | KeyResultsDefaultArgs> = $Result.GetResult<Prisma.$KeyResultsPayload, S>

  type KeyResultsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeyResultsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeyResultsCountAggregateInputType | true
    }

  export interface KeyResultsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeyResults'], meta: { name: 'KeyResults' } }
    /**
     * Find zero or one KeyResults that matches the filter.
     * @param {KeyResultsFindUniqueArgs} args - Arguments to find a KeyResults
     * @example
     * // Get one KeyResults
     * const keyResults = await prisma.keyResults.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeyResultsFindUniqueArgs>(args: SelectSubset<T, KeyResultsFindUniqueArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KeyResults that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeyResultsFindUniqueOrThrowArgs} args - Arguments to find a KeyResults
     * @example
     * // Get one KeyResults
     * const keyResults = await prisma.keyResults.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeyResultsFindUniqueOrThrowArgs>(args: SelectSubset<T, KeyResultsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeyResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsFindFirstArgs} args - Arguments to find a KeyResults
     * @example
     * // Get one KeyResults
     * const keyResults = await prisma.keyResults.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeyResultsFindFirstArgs>(args?: SelectSubset<T, KeyResultsFindFirstArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeyResults that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsFindFirstOrThrowArgs} args - Arguments to find a KeyResults
     * @example
     * // Get one KeyResults
     * const keyResults = await prisma.keyResults.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeyResultsFindFirstOrThrowArgs>(args?: SelectSubset<T, KeyResultsFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KeyResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeyResults
     * const keyResults = await prisma.keyResults.findMany()
     * 
     * // Get first 10 KeyResults
     * const keyResults = await prisma.keyResults.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyResultsWithIdOnly = await prisma.keyResults.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeyResultsFindManyArgs>(args?: SelectSubset<T, KeyResultsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KeyResults.
     * @param {KeyResultsCreateArgs} args - Arguments to create a KeyResults.
     * @example
     * // Create one KeyResults
     * const KeyResults = await prisma.keyResults.create({
     *   data: {
     *     // ... data to create a KeyResults
     *   }
     * })
     * 
     */
    create<T extends KeyResultsCreateArgs>(args: SelectSubset<T, KeyResultsCreateArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KeyResults.
     * @param {KeyResultsCreateManyArgs} args - Arguments to create many KeyResults.
     * @example
     * // Create many KeyResults
     * const keyResults = await prisma.keyResults.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeyResultsCreateManyArgs>(args?: SelectSubset<T, KeyResultsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KeyResults and returns the data saved in the database.
     * @param {KeyResultsCreateManyAndReturnArgs} args - Arguments to create many KeyResults.
     * @example
     * // Create many KeyResults
     * const keyResults = await prisma.keyResults.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KeyResults and only return the `id`
     * const keyResultsWithIdOnly = await prisma.keyResults.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeyResultsCreateManyAndReturnArgs>(args?: SelectSubset<T, KeyResultsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KeyResults.
     * @param {KeyResultsDeleteArgs} args - Arguments to delete one KeyResults.
     * @example
     * // Delete one KeyResults
     * const KeyResults = await prisma.keyResults.delete({
     *   where: {
     *     // ... filter to delete one KeyResults
     *   }
     * })
     * 
     */
    delete<T extends KeyResultsDeleteArgs>(args: SelectSubset<T, KeyResultsDeleteArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KeyResults.
     * @param {KeyResultsUpdateArgs} args - Arguments to update one KeyResults.
     * @example
     * // Update one KeyResults
     * const keyResults = await prisma.keyResults.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeyResultsUpdateArgs>(args: SelectSubset<T, KeyResultsUpdateArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KeyResults.
     * @param {KeyResultsDeleteManyArgs} args - Arguments to filter KeyResults to delete.
     * @example
     * // Delete a few KeyResults
     * const { count } = await prisma.keyResults.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeyResultsDeleteManyArgs>(args?: SelectSubset<T, KeyResultsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeyResults
     * const keyResults = await prisma.keyResults.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeyResultsUpdateManyArgs>(args: SelectSubset<T, KeyResultsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeyResults and returns the data updated in the database.
     * @param {KeyResultsUpdateManyAndReturnArgs} args - Arguments to update many KeyResults.
     * @example
     * // Update many KeyResults
     * const keyResults = await prisma.keyResults.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KeyResults and only return the `id`
     * const keyResultsWithIdOnly = await prisma.keyResults.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KeyResultsUpdateManyAndReturnArgs>(args: SelectSubset<T, KeyResultsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KeyResults.
     * @param {KeyResultsUpsertArgs} args - Arguments to update or create a KeyResults.
     * @example
     * // Update or create a KeyResults
     * const keyResults = await prisma.keyResults.upsert({
     *   create: {
     *     // ... data to create a KeyResults
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeyResults we want to update
     *   }
     * })
     */
    upsert<T extends KeyResultsUpsertArgs>(args: SelectSubset<T, KeyResultsUpsertArgs<ExtArgs>>): Prisma__KeyResultsClient<$Result.GetResult<Prisma.$KeyResultsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KeyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsCountArgs} args - Arguments to filter KeyResults to count.
     * @example
     * // Count the number of KeyResults
     * const count = await prisma.keyResults.count({
     *   where: {
     *     // ... the filter for the KeyResults we want to count
     *   }
     * })
    **/
    count<T extends KeyResultsCountArgs>(
      args?: Subset<T, KeyResultsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyResultsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyResultsAggregateArgs>(args: Subset<T, KeyResultsAggregateArgs>): Prisma.PrismaPromise<GetKeyResultsAggregateType<T>>

    /**
     * Group by KeyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyResultsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyResultsGroupByArgs['orderBy'] }
        : { orderBy?: KeyResultsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyResultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyResultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KeyResults model
   */
  readonly fields: KeyResultsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeyResults.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeyResultsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    objective<T extends ObjectivesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ObjectivesDefaultArgs<ExtArgs>>): Prisma__ObjectivesClient<$Result.GetResult<Prisma.$ObjectivesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KeyResults model
   */
  interface KeyResultsFieldRefs {
    readonly id: FieldRef<"KeyResults", 'String'>
    readonly objective_id: FieldRef<"KeyResults", 'String'>
    readonly title: FieldRef<"KeyResults", 'String'>
    readonly description: FieldRef<"KeyResults", 'String'>
    readonly weight: FieldRef<"KeyResults", 'Float'>
    readonly deadline: FieldRef<"KeyResults", 'DateTime'>
    readonly progress: FieldRef<"KeyResults", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * KeyResults findUnique
   */
  export type KeyResultsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * Filter, which KeyResults to fetch.
     */
    where: KeyResultsWhereUniqueInput
  }

  /**
   * KeyResults findUniqueOrThrow
   */
  export type KeyResultsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * Filter, which KeyResults to fetch.
     */
    where: KeyResultsWhereUniqueInput
  }

  /**
   * KeyResults findFirst
   */
  export type KeyResultsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * Filter, which KeyResults to fetch.
     */
    where?: KeyResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultsOrderByWithRelationInput | KeyResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyResults.
     */
    cursor?: KeyResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyResults.
     */
    distinct?: KeyResultsScalarFieldEnum | KeyResultsScalarFieldEnum[]
  }

  /**
   * KeyResults findFirstOrThrow
   */
  export type KeyResultsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * Filter, which KeyResults to fetch.
     */
    where?: KeyResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultsOrderByWithRelationInput | KeyResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyResults.
     */
    cursor?: KeyResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyResults.
     */
    distinct?: KeyResultsScalarFieldEnum | KeyResultsScalarFieldEnum[]
  }

  /**
   * KeyResults findMany
   */
  export type KeyResultsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * Filter, which KeyResults to fetch.
     */
    where?: KeyResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultsOrderByWithRelationInput | KeyResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeyResults.
     */
    cursor?: KeyResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    distinct?: KeyResultsScalarFieldEnum | KeyResultsScalarFieldEnum[]
  }

  /**
   * KeyResults create
   */
  export type KeyResultsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * The data needed to create a KeyResults.
     */
    data: XOR<KeyResultsCreateInput, KeyResultsUncheckedCreateInput>
  }

  /**
   * KeyResults createMany
   */
  export type KeyResultsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KeyResults.
     */
    data: KeyResultsCreateManyInput | KeyResultsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeyResults createManyAndReturn
   */
  export type KeyResultsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * The data used to create many KeyResults.
     */
    data: KeyResultsCreateManyInput | KeyResultsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeyResults update
   */
  export type KeyResultsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * The data needed to update a KeyResults.
     */
    data: XOR<KeyResultsUpdateInput, KeyResultsUncheckedUpdateInput>
    /**
     * Choose, which KeyResults to update.
     */
    where: KeyResultsWhereUniqueInput
  }

  /**
   * KeyResults updateMany
   */
  export type KeyResultsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KeyResults.
     */
    data: XOR<KeyResultsUpdateManyMutationInput, KeyResultsUncheckedUpdateManyInput>
    /**
     * Filter which KeyResults to update
     */
    where?: KeyResultsWhereInput
    /**
     * Limit how many KeyResults to update.
     */
    limit?: number
  }

  /**
   * KeyResults updateManyAndReturn
   */
  export type KeyResultsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * The data used to update KeyResults.
     */
    data: XOR<KeyResultsUpdateManyMutationInput, KeyResultsUncheckedUpdateManyInput>
    /**
     * Filter which KeyResults to update
     */
    where?: KeyResultsWhereInput
    /**
     * Limit how many KeyResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeyResults upsert
   */
  export type KeyResultsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * The filter to search for the KeyResults to update in case it exists.
     */
    where: KeyResultsWhereUniqueInput
    /**
     * In case the KeyResults found by the `where` argument doesn't exist, create a new KeyResults with this data.
     */
    create: XOR<KeyResultsCreateInput, KeyResultsUncheckedCreateInput>
    /**
     * In case the KeyResults was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyResultsUpdateInput, KeyResultsUncheckedUpdateInput>
  }

  /**
   * KeyResults delete
   */
  export type KeyResultsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
    /**
     * Filter which KeyResults to delete.
     */
    where: KeyResultsWhereUniqueInput
  }

  /**
   * KeyResults deleteMany
   */
  export type KeyResultsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyResults to delete
     */
    where?: KeyResultsWhereInput
    /**
     * Limit how many KeyResults to delete.
     */
    limit?: number
  }

  /**
   * KeyResults without action
   */
  export type KeyResultsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResults
     */
    select?: KeyResultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeyResults
     */
    omit?: KeyResultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    FirstName: 'FirstName',
    LastName: 'LastName',
    username: 'username',
    password: 'password',
    role: 'role',
    status: 'status'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const MembersScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    FirstName: 'FirstName',
    LastName: 'LastName',
    phone: 'phone',
    position: 'position',
    address: 'address',
    certificate: 'certificate',
    Photo: 'Photo',
    gender: 'gender',
    dob: 'dob',
    salary: 'salary',
    joining_date: 'joining_date',
    status: 'status',
    role: 'role',
    biography: 'biography'
  };

  export type MembersScalarFieldEnum = (typeof MembersScalarFieldEnum)[keyof typeof MembersScalarFieldEnum]


  export const SuppliersScalarFieldEnum: {
    id: 'id',
    supplier_name: 'supplier_name',
    contact_info: 'contact_info',
    payment_info_cbe: 'payment_info_cbe',
    payment_info_coop: 'payment_info_coop',
    payment_info_boa: 'payment_info_boa',
    payment_info_awash: 'payment_info_awash',
    payment_info_ebirr: 'payment_info_ebirr',
    location: 'location',
    email: 'email'
  };

  export type SuppliersScalarFieldEnum = (typeof SuppliersScalarFieldEnum)[keyof typeof SuppliersScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const DosageFormsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DosageFormsScalarFieldEnum = (typeof DosageFormsScalarFieldEnum)[keyof typeof DosageFormsScalarFieldEnum]


  export const MedicinesScalarFieldEnum: {
    id: 'id',
    medicine_name: 'medicine_name',
    brand_name: 'brand_name',
    batch_number: 'batch_number',
    category_id: 'category_id',
    dosage_form_id: 'dosage_form_id',
    medicine_weight: 'medicine_weight',
    quantity: 'quantity',
    supplier_id: 'supplier_id',
    invoice_number: 'invoice_number',
    unit_price: 'unit_price',
    sell_price: 'sell_price',
    total_price: 'total_price',
    expire_date: 'expire_date',
    required_prescription: 'required_prescription',
    payment_method: 'payment_method',
    Payment_file: 'Payment_file',
    details: 'details',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicinesScalarFieldEnum = (typeof MedicinesScalarFieldEnum)[keyof typeof MedicinesScalarFieldEnum]


  export const SalesScalarFieldEnum: {
    id: 'id',
    product_name: 'product_name',
    product_batch_number: 'product_batch_number',
    quantity: 'quantity',
    price: 'price',
    total_amount: 'total_amount',
    payment_method: 'payment_method',
    prescription: 'prescription',
    dosage_form_id: 'dosage_form_id',
    customer_id: 'customer_id',
    sealed_date: 'sealed_date',
    medicine_id: 'medicine_id',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SalesScalarFieldEnum = (typeof SalesScalarFieldEnum)[keyof typeof SalesScalarFieldEnum]


  export const ExpensesScalarFieldEnum: {
    id: 'id',
    date: 'date',
    reason: 'reason',
    payment_method: 'payment_method',
    receipt: 'receipt',
    amount: 'amount',
    description: 'description',
    additional_info: 'additional_info'
  };

  export type ExpensesScalarFieldEnum = (typeof ExpensesScalarFieldEnum)[keyof typeof ExpensesScalarFieldEnum]


  export const ReturnsScalarFieldEnum: {
    id: 'id',
    product_name: 'product_name',
    product_batch_number: 'product_batch_number',
    dosage_form_id: 'dosage_form_id',
    return_date: 'return_date',
    reason_for_return: 'reason_for_return',
    quantity: 'quantity',
    medicine_id: 'medicine_id'
  };

  export type ReturnsScalarFieldEnum = (typeof ReturnsScalarFieldEnum)[keyof typeof ReturnsScalarFieldEnum]


  export const CustomersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    address: 'address',
    status: 'status'
  };

  export type CustomersScalarFieldEnum = (typeof CustomersScalarFieldEnum)[keyof typeof CustomersScalarFieldEnum]


  export const SupplierCreditsScalarFieldEnum: {
    id: 'id',
    supplier_id: 'supplier_id',
    credit_amount: 'credit_amount',
    medicine_name: 'medicine_name',
    paid_amount: 'paid_amount',
    unpaid_amount: 'unpaid_amount',
    total_unpaid_amount: 'total_unpaid_amount',
    total_paid_amount: 'total_paid_amount',
    description: 'description',
    payment_method: 'payment_method',
    payment_status: 'payment_status',
    credit_date: 'credit_date',
    payment_file: 'payment_file',
    created_by: 'created_by',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SupplierCreditsScalarFieldEnum = (typeof SupplierCreditsScalarFieldEnum)[keyof typeof SupplierCreditsScalarFieldEnum]


  export const CustomerCreditScalarFieldEnum: {
    id: 'id',
    customer_id: 'customer_id',
    credit_amount: 'credit_amount',
    paid_amount: 'paid_amount',
    unpaid_amount: 'unpaid_amount',
    total_unpaid_amount: 'total_unpaid_amount',
    total_paid_amount: 'total_paid_amount',
    medicine_name: 'medicine_name',
    payment_method: 'payment_method',
    description: 'description',
    status: 'status',
    credit_date: 'credit_date',
    payment_file: 'payment_file',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by'
  };

  export type CustomerCreditScalarFieldEnum = (typeof CustomerCreditScalarFieldEnum)[keyof typeof CustomerCreditScalarFieldEnum]


  export const ObjectivesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    time_period: 'time_period',
    progress: 'progress'
  };

  export type ObjectivesScalarFieldEnum = (typeof ObjectivesScalarFieldEnum)[keyof typeof ObjectivesScalarFieldEnum]


  export const KeyResultsScalarFieldEnum: {
    id: 'id',
    objective_id: 'objective_id',
    title: 'title',
    description: 'description',
    weight: 'weight',
    deadline: 'deadline',
    progress: 'progress'
  };

  export type KeyResultsScalarFieldEnum = (typeof KeyResultsScalarFieldEnum)[keyof typeof KeyResultsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    FirstName?: StringFilter<"Users"> | string
    LastName?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumRoleFilter<"Users"> | $Enums.Role
    status?: EnumStatusFilter<"Users"> | $Enums.Status
    member?: XOR<MembersNullableScalarRelationFilter, MembersWhereInput> | null
    credits?: SupplierCreditsListRelationFilter
    medicines?: MedicinesListRelationFilter
    customerCredits?: CustomerCreditListRelationFilter
    updatedCustomerCredits?: CustomerCreditListRelationFilter
    updatedSupplierCredits?: SupplierCreditsListRelationFilter
    createdSales?: SalesListRelationFilter
    updatedSales?: SalesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    member?: MembersOrderByWithRelationInput
    credits?: SupplierCreditsOrderByRelationAggregateInput
    medicines?: MedicinesOrderByRelationAggregateInput
    customerCredits?: CustomerCreditOrderByRelationAggregateInput
    updatedCustomerCredits?: CustomerCreditOrderByRelationAggregateInput
    updatedSupplierCredits?: SupplierCreditsOrderByRelationAggregateInput
    createdSales?: SalesOrderByRelationAggregateInput
    updatedSales?: SalesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    FirstName?: StringFilter<"Users"> | string
    LastName?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumRoleFilter<"Users"> | $Enums.Role
    status?: EnumStatusFilter<"Users"> | $Enums.Status
    member?: XOR<MembersNullableScalarRelationFilter, MembersWhereInput> | null
    credits?: SupplierCreditsListRelationFilter
    medicines?: MedicinesListRelationFilter
    customerCredits?: CustomerCreditListRelationFilter
    updatedCustomerCredits?: CustomerCreditListRelationFilter
    updatedSupplierCredits?: SupplierCreditsListRelationFilter
    createdSales?: SalesListRelationFilter
    updatedSales?: SalesListRelationFilter
  }, "id" | "username">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    FirstName?: StringWithAggregatesFilter<"Users"> | string
    LastName?: StringWithAggregatesFilter<"Users"> | string
    username?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    role?: EnumRoleWithAggregatesFilter<"Users"> | $Enums.Role
    status?: EnumStatusWithAggregatesFilter<"Users"> | $Enums.Status
  }

  export type MembersWhereInput = {
    AND?: MembersWhereInput | MembersWhereInput[]
    OR?: MembersWhereInput[]
    NOT?: MembersWhereInput | MembersWhereInput[]
    id?: StringFilter<"Members"> | string
    user_id?: StringFilter<"Members"> | string
    FirstName?: StringFilter<"Members"> | string
    LastName?: StringFilter<"Members"> | string
    phone?: StringNullableFilter<"Members"> | string | null
    position?: StringFilter<"Members"> | string
    address?: StringNullableFilter<"Members"> | string | null
    certificate?: StringNullableFilter<"Members"> | string | null
    Photo?: StringNullableFilter<"Members"> | string | null
    gender?: EnumGenderNullableFilter<"Members"> | $Enums.Gender | null
    dob?: DateTimeNullableFilter<"Members"> | Date | string | null
    salary?: FloatFilter<"Members"> | number
    joining_date?: DateTimeFilter<"Members"> | Date | string
    status?: EnumStatusFilter<"Members"> | $Enums.Status
    role?: EnumRoleFilter<"Members"> | $Enums.Role
    biography?: StringNullableFilter<"Members"> | string | null
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type MembersOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    position?: SortOrder
    address?: SortOrderInput | SortOrder
    certificate?: SortOrderInput | SortOrder
    Photo?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    salary?: SortOrder
    joining_date?: SortOrder
    status?: SortOrder
    role?: SortOrder
    biography?: SortOrderInput | SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type MembersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: MembersWhereInput | MembersWhereInput[]
    OR?: MembersWhereInput[]
    NOT?: MembersWhereInput | MembersWhereInput[]
    FirstName?: StringFilter<"Members"> | string
    LastName?: StringFilter<"Members"> | string
    phone?: StringNullableFilter<"Members"> | string | null
    position?: StringFilter<"Members"> | string
    address?: StringNullableFilter<"Members"> | string | null
    certificate?: StringNullableFilter<"Members"> | string | null
    Photo?: StringNullableFilter<"Members"> | string | null
    gender?: EnumGenderNullableFilter<"Members"> | $Enums.Gender | null
    dob?: DateTimeNullableFilter<"Members"> | Date | string | null
    salary?: FloatFilter<"Members"> | number
    joining_date?: DateTimeFilter<"Members"> | Date | string
    status?: EnumStatusFilter<"Members"> | $Enums.Status
    role?: EnumRoleFilter<"Members"> | $Enums.Role
    biography?: StringNullableFilter<"Members"> | string | null
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id" | "user_id">

  export type MembersOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    position?: SortOrder
    address?: SortOrderInput | SortOrder
    certificate?: SortOrderInput | SortOrder
    Photo?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    salary?: SortOrder
    joining_date?: SortOrder
    status?: SortOrder
    role?: SortOrder
    biography?: SortOrderInput | SortOrder
    _count?: MembersCountOrderByAggregateInput
    _avg?: MembersAvgOrderByAggregateInput
    _max?: MembersMaxOrderByAggregateInput
    _min?: MembersMinOrderByAggregateInput
    _sum?: MembersSumOrderByAggregateInput
  }

  export type MembersScalarWhereWithAggregatesInput = {
    AND?: MembersScalarWhereWithAggregatesInput | MembersScalarWhereWithAggregatesInput[]
    OR?: MembersScalarWhereWithAggregatesInput[]
    NOT?: MembersScalarWhereWithAggregatesInput | MembersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Members"> | string
    user_id?: StringWithAggregatesFilter<"Members"> | string
    FirstName?: StringWithAggregatesFilter<"Members"> | string
    LastName?: StringWithAggregatesFilter<"Members"> | string
    phone?: StringNullableWithAggregatesFilter<"Members"> | string | null
    position?: StringWithAggregatesFilter<"Members"> | string
    address?: StringNullableWithAggregatesFilter<"Members"> | string | null
    certificate?: StringNullableWithAggregatesFilter<"Members"> | string | null
    Photo?: StringNullableWithAggregatesFilter<"Members"> | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"Members"> | $Enums.Gender | null
    dob?: DateTimeNullableWithAggregatesFilter<"Members"> | Date | string | null
    salary?: FloatWithAggregatesFilter<"Members"> | number
    joining_date?: DateTimeWithAggregatesFilter<"Members"> | Date | string
    status?: EnumStatusWithAggregatesFilter<"Members"> | $Enums.Status
    role?: EnumRoleWithAggregatesFilter<"Members"> | $Enums.Role
    biography?: StringNullableWithAggregatesFilter<"Members"> | string | null
  }

  export type SuppliersWhereInput = {
    AND?: SuppliersWhereInput | SuppliersWhereInput[]
    OR?: SuppliersWhereInput[]
    NOT?: SuppliersWhereInput | SuppliersWhereInput[]
    id?: StringFilter<"Suppliers"> | string
    supplier_name?: StringFilter<"Suppliers"> | string
    contact_info?: StringFilter<"Suppliers"> | string
    payment_info_cbe?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_coop?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_boa?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_awash?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_ebirr?: StringNullableFilter<"Suppliers"> | string | null
    location?: StringFilter<"Suppliers"> | string
    email?: StringNullableFilter<"Suppliers"> | string | null
    SupplierCredits?: SupplierCreditsListRelationFilter
    Medicines?: MedicinesListRelationFilter
  }

  export type SuppliersOrderByWithRelationInput = {
    id?: SortOrder
    supplier_name?: SortOrder
    contact_info?: SortOrder
    payment_info_cbe?: SortOrderInput | SortOrder
    payment_info_coop?: SortOrderInput | SortOrder
    payment_info_boa?: SortOrderInput | SortOrder
    payment_info_awash?: SortOrderInput | SortOrder
    payment_info_ebirr?: SortOrderInput | SortOrder
    location?: SortOrder
    email?: SortOrderInput | SortOrder
    SupplierCredits?: SupplierCreditsOrderByRelationAggregateInput
    Medicines?: MedicinesOrderByRelationAggregateInput
  }

  export type SuppliersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SuppliersWhereInput | SuppliersWhereInput[]
    OR?: SuppliersWhereInput[]
    NOT?: SuppliersWhereInput | SuppliersWhereInput[]
    supplier_name?: StringFilter<"Suppliers"> | string
    contact_info?: StringFilter<"Suppliers"> | string
    payment_info_cbe?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_coop?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_boa?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_awash?: StringNullableFilter<"Suppliers"> | string | null
    payment_info_ebirr?: StringNullableFilter<"Suppliers"> | string | null
    location?: StringFilter<"Suppliers"> | string
    email?: StringNullableFilter<"Suppliers"> | string | null
    SupplierCredits?: SupplierCreditsListRelationFilter
    Medicines?: MedicinesListRelationFilter
  }, "id">

  export type SuppliersOrderByWithAggregationInput = {
    id?: SortOrder
    supplier_name?: SortOrder
    contact_info?: SortOrder
    payment_info_cbe?: SortOrderInput | SortOrder
    payment_info_coop?: SortOrderInput | SortOrder
    payment_info_boa?: SortOrderInput | SortOrder
    payment_info_awash?: SortOrderInput | SortOrder
    payment_info_ebirr?: SortOrderInput | SortOrder
    location?: SortOrder
    email?: SortOrderInput | SortOrder
    _count?: SuppliersCountOrderByAggregateInput
    _max?: SuppliersMaxOrderByAggregateInput
    _min?: SuppliersMinOrderByAggregateInput
  }

  export type SuppliersScalarWhereWithAggregatesInput = {
    AND?: SuppliersScalarWhereWithAggregatesInput | SuppliersScalarWhereWithAggregatesInput[]
    OR?: SuppliersScalarWhereWithAggregatesInput[]
    NOT?: SuppliersScalarWhereWithAggregatesInput | SuppliersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Suppliers"> | string
    supplier_name?: StringWithAggregatesFilter<"Suppliers"> | string
    contact_info?: StringWithAggregatesFilter<"Suppliers"> | string
    payment_info_cbe?: StringNullableWithAggregatesFilter<"Suppliers"> | string | null
    payment_info_coop?: StringNullableWithAggregatesFilter<"Suppliers"> | string | null
    payment_info_boa?: StringNullableWithAggregatesFilter<"Suppliers"> | string | null
    payment_info_awash?: StringNullableWithAggregatesFilter<"Suppliers"> | string | null
    payment_info_ebirr?: StringNullableWithAggregatesFilter<"Suppliers"> | string | null
    location?: StringWithAggregatesFilter<"Suppliers"> | string
    email?: StringNullableWithAggregatesFilter<"Suppliers"> | string | null
  }

  export type CategoriesWhereInput = {
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    id?: StringFilter<"Categories"> | string
    name?: StringFilter<"Categories"> | string
    Medicines?: MedicinesListRelationFilter
  }

  export type CategoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Medicines?: MedicinesOrderByRelationAggregateInput
  }

  export type CategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    name?: StringFilter<"Categories"> | string
    Medicines?: MedicinesListRelationFilter
  }, "id">

  export type CategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoriesCountOrderByAggregateInput
    _max?: CategoriesMaxOrderByAggregateInput
    _min?: CategoriesMinOrderByAggregateInput
  }

  export type CategoriesScalarWhereWithAggregatesInput = {
    AND?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    OR?: CategoriesScalarWhereWithAggregatesInput[]
    NOT?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Categories"> | string
    name?: StringWithAggregatesFilter<"Categories"> | string
  }

  export type DosageFormsWhereInput = {
    AND?: DosageFormsWhereInput | DosageFormsWhereInput[]
    OR?: DosageFormsWhereInput[]
    NOT?: DosageFormsWhereInput | DosageFormsWhereInput[]
    id?: StringFilter<"DosageForms"> | string
    name?: StringFilter<"DosageForms"> | string
    Medicines?: MedicinesListRelationFilter
    Sales?: SalesListRelationFilter
    Returns?: ReturnsListRelationFilter
  }

  export type DosageFormsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Medicines?: MedicinesOrderByRelationAggregateInput
    Sales?: SalesOrderByRelationAggregateInput
    Returns?: ReturnsOrderByRelationAggregateInput
  }

  export type DosageFormsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DosageFormsWhereInput | DosageFormsWhereInput[]
    OR?: DosageFormsWhereInput[]
    NOT?: DosageFormsWhereInput | DosageFormsWhereInput[]
    name?: StringFilter<"DosageForms"> | string
    Medicines?: MedicinesListRelationFilter
    Sales?: SalesListRelationFilter
    Returns?: ReturnsListRelationFilter
  }, "id">

  export type DosageFormsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DosageFormsCountOrderByAggregateInput
    _max?: DosageFormsMaxOrderByAggregateInput
    _min?: DosageFormsMinOrderByAggregateInput
  }

  export type DosageFormsScalarWhereWithAggregatesInput = {
    AND?: DosageFormsScalarWhereWithAggregatesInput | DosageFormsScalarWhereWithAggregatesInput[]
    OR?: DosageFormsScalarWhereWithAggregatesInput[]
    NOT?: DosageFormsScalarWhereWithAggregatesInput | DosageFormsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DosageForms"> | string
    name?: StringWithAggregatesFilter<"DosageForms"> | string
  }

  export type MedicinesWhereInput = {
    AND?: MedicinesWhereInput | MedicinesWhereInput[]
    OR?: MedicinesWhereInput[]
    NOT?: MedicinesWhereInput | MedicinesWhereInput[]
    id?: StringFilter<"Medicines"> | string
    medicine_name?: StringFilter<"Medicines"> | string
    brand_name?: StringNullableFilter<"Medicines"> | string | null
    batch_number?: StringNullableFilter<"Medicines"> | string | null
    category_id?: StringFilter<"Medicines"> | string
    dosage_form_id?: StringFilter<"Medicines"> | string
    medicine_weight?: FloatNullableFilter<"Medicines"> | number | null
    quantity?: IntFilter<"Medicines"> | number
    supplier_id?: StringFilter<"Medicines"> | string
    invoice_number?: StringFilter<"Medicines"> | string
    unit_price?: FloatFilter<"Medicines"> | number
    sell_price?: FloatNullableFilter<"Medicines"> | number | null
    total_price?: FloatFilter<"Medicines"> | number
    expire_date?: DateTimeFilter<"Medicines"> | Date | string
    required_prescription?: BoolFilter<"Medicines"> | boolean
    payment_method?: EnumPaymentMethodFilter<"Medicines"> | $Enums.PaymentMethod
    Payment_file?: StringNullableFilter<"Medicines"> | string | null
    details?: StringNullableFilter<"Medicines"> | string | null
    createdById?: StringFilter<"Medicines"> | string
    createdAt?: DateTimeFilter<"Medicines"> | Date | string
    updatedAt?: DateTimeFilter<"Medicines"> | Date | string
    category?: XOR<CategoriesScalarRelationFilter, CategoriesWhereInput>
    dosage_form?: XOR<DosageFormsScalarRelationFilter, DosageFormsWhereInput>
    supplier?: XOR<SuppliersScalarRelationFilter, SuppliersWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    Sales?: SalesListRelationFilter
    Returns?: ReturnsListRelationFilter
  }

  export type MedicinesOrderByWithRelationInput = {
    id?: SortOrder
    medicine_name?: SortOrder
    brand_name?: SortOrderInput | SortOrder
    batch_number?: SortOrderInput | SortOrder
    category_id?: SortOrder
    dosage_form_id?: SortOrder
    medicine_weight?: SortOrderInput | SortOrder
    quantity?: SortOrder
    supplier_id?: SortOrder
    invoice_number?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrderInput | SortOrder
    total_price?: SortOrder
    expire_date?: SortOrder
    required_prescription?: SortOrder
    payment_method?: SortOrder
    Payment_file?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: CategoriesOrderByWithRelationInput
    dosage_form?: DosageFormsOrderByWithRelationInput
    supplier?: SuppliersOrderByWithRelationInput
    createdBy?: UsersOrderByWithRelationInput
    Sales?: SalesOrderByRelationAggregateInput
    Returns?: ReturnsOrderByRelationAggregateInput
  }

  export type MedicinesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    invoice_number?: string
    AND?: MedicinesWhereInput | MedicinesWhereInput[]
    OR?: MedicinesWhereInput[]
    NOT?: MedicinesWhereInput | MedicinesWhereInput[]
    medicine_name?: StringFilter<"Medicines"> | string
    brand_name?: StringNullableFilter<"Medicines"> | string | null
    batch_number?: StringNullableFilter<"Medicines"> | string | null
    category_id?: StringFilter<"Medicines"> | string
    dosage_form_id?: StringFilter<"Medicines"> | string
    medicine_weight?: FloatNullableFilter<"Medicines"> | number | null
    quantity?: IntFilter<"Medicines"> | number
    supplier_id?: StringFilter<"Medicines"> | string
    unit_price?: FloatFilter<"Medicines"> | number
    sell_price?: FloatNullableFilter<"Medicines"> | number | null
    total_price?: FloatFilter<"Medicines"> | number
    expire_date?: DateTimeFilter<"Medicines"> | Date | string
    required_prescription?: BoolFilter<"Medicines"> | boolean
    payment_method?: EnumPaymentMethodFilter<"Medicines"> | $Enums.PaymentMethod
    Payment_file?: StringNullableFilter<"Medicines"> | string | null
    details?: StringNullableFilter<"Medicines"> | string | null
    createdById?: StringFilter<"Medicines"> | string
    createdAt?: DateTimeFilter<"Medicines"> | Date | string
    updatedAt?: DateTimeFilter<"Medicines"> | Date | string
    category?: XOR<CategoriesScalarRelationFilter, CategoriesWhereInput>
    dosage_form?: XOR<DosageFormsScalarRelationFilter, DosageFormsWhereInput>
    supplier?: XOR<SuppliersScalarRelationFilter, SuppliersWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    Sales?: SalesListRelationFilter
    Returns?: ReturnsListRelationFilter
  }, "id" | "invoice_number">

  export type MedicinesOrderByWithAggregationInput = {
    id?: SortOrder
    medicine_name?: SortOrder
    brand_name?: SortOrderInput | SortOrder
    batch_number?: SortOrderInput | SortOrder
    category_id?: SortOrder
    dosage_form_id?: SortOrder
    medicine_weight?: SortOrderInput | SortOrder
    quantity?: SortOrder
    supplier_id?: SortOrder
    invoice_number?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrderInput | SortOrder
    total_price?: SortOrder
    expire_date?: SortOrder
    required_prescription?: SortOrder
    payment_method?: SortOrder
    Payment_file?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicinesCountOrderByAggregateInput
    _avg?: MedicinesAvgOrderByAggregateInput
    _max?: MedicinesMaxOrderByAggregateInput
    _min?: MedicinesMinOrderByAggregateInput
    _sum?: MedicinesSumOrderByAggregateInput
  }

  export type MedicinesScalarWhereWithAggregatesInput = {
    AND?: MedicinesScalarWhereWithAggregatesInput | MedicinesScalarWhereWithAggregatesInput[]
    OR?: MedicinesScalarWhereWithAggregatesInput[]
    NOT?: MedicinesScalarWhereWithAggregatesInput | MedicinesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Medicines"> | string
    medicine_name?: StringWithAggregatesFilter<"Medicines"> | string
    brand_name?: StringNullableWithAggregatesFilter<"Medicines"> | string | null
    batch_number?: StringNullableWithAggregatesFilter<"Medicines"> | string | null
    category_id?: StringWithAggregatesFilter<"Medicines"> | string
    dosage_form_id?: StringWithAggregatesFilter<"Medicines"> | string
    medicine_weight?: FloatNullableWithAggregatesFilter<"Medicines"> | number | null
    quantity?: IntWithAggregatesFilter<"Medicines"> | number
    supplier_id?: StringWithAggregatesFilter<"Medicines"> | string
    invoice_number?: StringWithAggregatesFilter<"Medicines"> | string
    unit_price?: FloatWithAggregatesFilter<"Medicines"> | number
    sell_price?: FloatNullableWithAggregatesFilter<"Medicines"> | number | null
    total_price?: FloatWithAggregatesFilter<"Medicines"> | number
    expire_date?: DateTimeWithAggregatesFilter<"Medicines"> | Date | string
    required_prescription?: BoolWithAggregatesFilter<"Medicines"> | boolean
    payment_method?: EnumPaymentMethodWithAggregatesFilter<"Medicines"> | $Enums.PaymentMethod
    Payment_file?: StringNullableWithAggregatesFilter<"Medicines"> | string | null
    details?: StringNullableWithAggregatesFilter<"Medicines"> | string | null
    createdById?: StringWithAggregatesFilter<"Medicines"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Medicines"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Medicines"> | Date | string
  }

  export type SalesWhereInput = {
    AND?: SalesWhereInput | SalesWhereInput[]
    OR?: SalesWhereInput[]
    NOT?: SalesWhereInput | SalesWhereInput[]
    id?: StringFilter<"Sales"> | string
    product_name?: StringNullableFilter<"Sales"> | string | null
    product_batch_number?: StringNullableFilter<"Sales"> | string | null
    quantity?: IntFilter<"Sales"> | number
    price?: FloatFilter<"Sales"> | number
    total_amount?: FloatFilter<"Sales"> | number
    payment_method?: EnumPaymentMethodFilter<"Sales"> | $Enums.PaymentMethod
    prescription?: BoolFilter<"Sales"> | boolean
    dosage_form_id?: StringFilter<"Sales"> | string
    customer_id?: StringNullableFilter<"Sales"> | string | null
    sealed_date?: DateTimeFilter<"Sales"> | Date | string
    medicine_id?: StringFilter<"Sales"> | string
    created_by?: StringFilter<"Sales"> | string
    updated_by?: StringNullableFilter<"Sales"> | string | null
    created_at?: DateTimeFilter<"Sales"> | Date | string
    updated_at?: DateTimeFilter<"Sales"> | Date | string
    dosage_form?: XOR<DosageFormsScalarRelationFilter, DosageFormsWhereInput>
    customer?: XOR<CustomersNullableScalarRelationFilter, CustomersWhereInput> | null
    medicine?: XOR<MedicinesScalarRelationFilter, MedicinesWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    updatedBy?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }

  export type SalesOrderByWithRelationInput = {
    id?: SortOrder
    product_name?: SortOrderInput | SortOrder
    product_batch_number?: SortOrderInput | SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
    payment_method?: SortOrder
    prescription?: SortOrder
    dosage_form_id?: SortOrder
    customer_id?: SortOrderInput | SortOrder
    sealed_date?: SortOrder
    medicine_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    dosage_form?: DosageFormsOrderByWithRelationInput
    customer?: CustomersOrderByWithRelationInput
    medicine?: MedicinesOrderByWithRelationInput
    createdBy?: UsersOrderByWithRelationInput
    updatedBy?: UsersOrderByWithRelationInput
  }

  export type SalesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SalesWhereInput | SalesWhereInput[]
    OR?: SalesWhereInput[]
    NOT?: SalesWhereInput | SalesWhereInput[]
    product_name?: StringNullableFilter<"Sales"> | string | null
    product_batch_number?: StringNullableFilter<"Sales"> | string | null
    quantity?: IntFilter<"Sales"> | number
    price?: FloatFilter<"Sales"> | number
    total_amount?: FloatFilter<"Sales"> | number
    payment_method?: EnumPaymentMethodFilter<"Sales"> | $Enums.PaymentMethod
    prescription?: BoolFilter<"Sales"> | boolean
    dosage_form_id?: StringFilter<"Sales"> | string
    customer_id?: StringNullableFilter<"Sales"> | string | null
    sealed_date?: DateTimeFilter<"Sales"> | Date | string
    medicine_id?: StringFilter<"Sales"> | string
    created_by?: StringFilter<"Sales"> | string
    updated_by?: StringNullableFilter<"Sales"> | string | null
    created_at?: DateTimeFilter<"Sales"> | Date | string
    updated_at?: DateTimeFilter<"Sales"> | Date | string
    dosage_form?: XOR<DosageFormsScalarRelationFilter, DosageFormsWhereInput>
    customer?: XOR<CustomersNullableScalarRelationFilter, CustomersWhereInput> | null
    medicine?: XOR<MedicinesScalarRelationFilter, MedicinesWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    updatedBy?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }, "id">

  export type SalesOrderByWithAggregationInput = {
    id?: SortOrder
    product_name?: SortOrderInput | SortOrder
    product_batch_number?: SortOrderInput | SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
    payment_method?: SortOrder
    prescription?: SortOrder
    dosage_form_id?: SortOrder
    customer_id?: SortOrderInput | SortOrder
    sealed_date?: SortOrder
    medicine_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SalesCountOrderByAggregateInput
    _avg?: SalesAvgOrderByAggregateInput
    _max?: SalesMaxOrderByAggregateInput
    _min?: SalesMinOrderByAggregateInput
    _sum?: SalesSumOrderByAggregateInput
  }

  export type SalesScalarWhereWithAggregatesInput = {
    AND?: SalesScalarWhereWithAggregatesInput | SalesScalarWhereWithAggregatesInput[]
    OR?: SalesScalarWhereWithAggregatesInput[]
    NOT?: SalesScalarWhereWithAggregatesInput | SalesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sales"> | string
    product_name?: StringNullableWithAggregatesFilter<"Sales"> | string | null
    product_batch_number?: StringNullableWithAggregatesFilter<"Sales"> | string | null
    quantity?: IntWithAggregatesFilter<"Sales"> | number
    price?: FloatWithAggregatesFilter<"Sales"> | number
    total_amount?: FloatWithAggregatesFilter<"Sales"> | number
    payment_method?: EnumPaymentMethodWithAggregatesFilter<"Sales"> | $Enums.PaymentMethod
    prescription?: BoolWithAggregatesFilter<"Sales"> | boolean
    dosage_form_id?: StringWithAggregatesFilter<"Sales"> | string
    customer_id?: StringNullableWithAggregatesFilter<"Sales"> | string | null
    sealed_date?: DateTimeWithAggregatesFilter<"Sales"> | Date | string
    medicine_id?: StringWithAggregatesFilter<"Sales"> | string
    created_by?: StringWithAggregatesFilter<"Sales"> | string
    updated_by?: StringNullableWithAggregatesFilter<"Sales"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Sales"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Sales"> | Date | string
  }

  export type ExpensesWhereInput = {
    AND?: ExpensesWhereInput | ExpensesWhereInput[]
    OR?: ExpensesWhereInput[]
    NOT?: ExpensesWhereInput | ExpensesWhereInput[]
    id?: StringFilter<"Expenses"> | string
    date?: DateTimeFilter<"Expenses"> | Date | string
    reason?: StringFilter<"Expenses"> | string
    payment_method?: EnumPaymentMethodNullableFilter<"Expenses"> | $Enums.PaymentMethod | null
    receipt?: StringNullableFilter<"Expenses"> | string | null
    amount?: FloatFilter<"Expenses"> | number
    description?: StringNullableFilter<"Expenses"> | string | null
    additional_info?: StringNullableFilter<"Expenses"> | string | null
  }

  export type ExpensesOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    payment_method?: SortOrderInput | SortOrder
    receipt?: SortOrderInput | SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    additional_info?: SortOrderInput | SortOrder
  }

  export type ExpensesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExpensesWhereInput | ExpensesWhereInput[]
    OR?: ExpensesWhereInput[]
    NOT?: ExpensesWhereInput | ExpensesWhereInput[]
    date?: DateTimeFilter<"Expenses"> | Date | string
    reason?: StringFilter<"Expenses"> | string
    payment_method?: EnumPaymentMethodNullableFilter<"Expenses"> | $Enums.PaymentMethod | null
    receipt?: StringNullableFilter<"Expenses"> | string | null
    amount?: FloatFilter<"Expenses"> | number
    description?: StringNullableFilter<"Expenses"> | string | null
    additional_info?: StringNullableFilter<"Expenses"> | string | null
  }, "id">

  export type ExpensesOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    payment_method?: SortOrderInput | SortOrder
    receipt?: SortOrderInput | SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    additional_info?: SortOrderInput | SortOrder
    _count?: ExpensesCountOrderByAggregateInput
    _avg?: ExpensesAvgOrderByAggregateInput
    _max?: ExpensesMaxOrderByAggregateInput
    _min?: ExpensesMinOrderByAggregateInput
    _sum?: ExpensesSumOrderByAggregateInput
  }

  export type ExpensesScalarWhereWithAggregatesInput = {
    AND?: ExpensesScalarWhereWithAggregatesInput | ExpensesScalarWhereWithAggregatesInput[]
    OR?: ExpensesScalarWhereWithAggregatesInput[]
    NOT?: ExpensesScalarWhereWithAggregatesInput | ExpensesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Expenses"> | string
    date?: DateTimeWithAggregatesFilter<"Expenses"> | Date | string
    reason?: StringWithAggregatesFilter<"Expenses"> | string
    payment_method?: EnumPaymentMethodNullableWithAggregatesFilter<"Expenses"> | $Enums.PaymentMethod | null
    receipt?: StringNullableWithAggregatesFilter<"Expenses"> | string | null
    amount?: FloatWithAggregatesFilter<"Expenses"> | number
    description?: StringNullableWithAggregatesFilter<"Expenses"> | string | null
    additional_info?: StringNullableWithAggregatesFilter<"Expenses"> | string | null
  }

  export type ReturnsWhereInput = {
    AND?: ReturnsWhereInput | ReturnsWhereInput[]
    OR?: ReturnsWhereInput[]
    NOT?: ReturnsWhereInput | ReturnsWhereInput[]
    id?: StringFilter<"Returns"> | string
    product_name?: StringFilter<"Returns"> | string
    product_batch_number?: StringFilter<"Returns"> | string
    dosage_form_id?: StringFilter<"Returns"> | string
    return_date?: DateTimeFilter<"Returns"> | Date | string
    reason_for_return?: StringFilter<"Returns"> | string
    quantity?: IntFilter<"Returns"> | number
    medicine_id?: StringFilter<"Returns"> | string
    dosage_form?: XOR<DosageFormsScalarRelationFilter, DosageFormsWhereInput>
    medicine?: XOR<MedicinesScalarRelationFilter, MedicinesWhereInput>
  }

  export type ReturnsOrderByWithRelationInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    dosage_form_id?: SortOrder
    return_date?: SortOrder
    reason_for_return?: SortOrder
    quantity?: SortOrder
    medicine_id?: SortOrder
    dosage_form?: DosageFormsOrderByWithRelationInput
    medicine?: MedicinesOrderByWithRelationInput
  }

  export type ReturnsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReturnsWhereInput | ReturnsWhereInput[]
    OR?: ReturnsWhereInput[]
    NOT?: ReturnsWhereInput | ReturnsWhereInput[]
    product_name?: StringFilter<"Returns"> | string
    product_batch_number?: StringFilter<"Returns"> | string
    dosage_form_id?: StringFilter<"Returns"> | string
    return_date?: DateTimeFilter<"Returns"> | Date | string
    reason_for_return?: StringFilter<"Returns"> | string
    quantity?: IntFilter<"Returns"> | number
    medicine_id?: StringFilter<"Returns"> | string
    dosage_form?: XOR<DosageFormsScalarRelationFilter, DosageFormsWhereInput>
    medicine?: XOR<MedicinesScalarRelationFilter, MedicinesWhereInput>
  }, "id">

  export type ReturnsOrderByWithAggregationInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    dosage_form_id?: SortOrder
    return_date?: SortOrder
    reason_for_return?: SortOrder
    quantity?: SortOrder
    medicine_id?: SortOrder
    _count?: ReturnsCountOrderByAggregateInput
    _avg?: ReturnsAvgOrderByAggregateInput
    _max?: ReturnsMaxOrderByAggregateInput
    _min?: ReturnsMinOrderByAggregateInput
    _sum?: ReturnsSumOrderByAggregateInput
  }

  export type ReturnsScalarWhereWithAggregatesInput = {
    AND?: ReturnsScalarWhereWithAggregatesInput | ReturnsScalarWhereWithAggregatesInput[]
    OR?: ReturnsScalarWhereWithAggregatesInput[]
    NOT?: ReturnsScalarWhereWithAggregatesInput | ReturnsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Returns"> | string
    product_name?: StringWithAggregatesFilter<"Returns"> | string
    product_batch_number?: StringWithAggregatesFilter<"Returns"> | string
    dosage_form_id?: StringWithAggregatesFilter<"Returns"> | string
    return_date?: DateTimeWithAggregatesFilter<"Returns"> | Date | string
    reason_for_return?: StringWithAggregatesFilter<"Returns"> | string
    quantity?: IntWithAggregatesFilter<"Returns"> | number
    medicine_id?: StringWithAggregatesFilter<"Returns"> | string
  }

  export type CustomersWhereInput = {
    AND?: CustomersWhereInput | CustomersWhereInput[]
    OR?: CustomersWhereInput[]
    NOT?: CustomersWhereInput | CustomersWhereInput[]
    id?: StringFilter<"Customers"> | string
    name?: StringFilter<"Customers"> | string
    phone?: StringFilter<"Customers"> | string
    address?: StringFilter<"Customers"> | string
    status?: EnumStatusFilter<"Customers"> | $Enums.Status
    Sales?: SalesListRelationFilter
    CustomerCredit?: CustomerCreditListRelationFilter
  }

  export type CustomersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    Sales?: SalesOrderByRelationAggregateInput
    CustomerCredit?: CustomerCreditOrderByRelationAggregateInput
  }

  export type CustomersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomersWhereInput | CustomersWhereInput[]
    OR?: CustomersWhereInput[]
    NOT?: CustomersWhereInput | CustomersWhereInput[]
    name?: StringFilter<"Customers"> | string
    phone?: StringFilter<"Customers"> | string
    address?: StringFilter<"Customers"> | string
    status?: EnumStatusFilter<"Customers"> | $Enums.Status
    Sales?: SalesListRelationFilter
    CustomerCredit?: CustomerCreditListRelationFilter
  }, "id">

  export type CustomersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
    _count?: CustomersCountOrderByAggregateInput
    _max?: CustomersMaxOrderByAggregateInput
    _min?: CustomersMinOrderByAggregateInput
  }

  export type CustomersScalarWhereWithAggregatesInput = {
    AND?: CustomersScalarWhereWithAggregatesInput | CustomersScalarWhereWithAggregatesInput[]
    OR?: CustomersScalarWhereWithAggregatesInput[]
    NOT?: CustomersScalarWhereWithAggregatesInput | CustomersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customers"> | string
    name?: StringWithAggregatesFilter<"Customers"> | string
    phone?: StringWithAggregatesFilter<"Customers"> | string
    address?: StringWithAggregatesFilter<"Customers"> | string
    status?: EnumStatusWithAggregatesFilter<"Customers"> | $Enums.Status
  }

  export type SupplierCreditsWhereInput = {
    AND?: SupplierCreditsWhereInput | SupplierCreditsWhereInput[]
    OR?: SupplierCreditsWhereInput[]
    NOT?: SupplierCreditsWhereInput | SupplierCreditsWhereInput[]
    id?: StringFilter<"SupplierCredits"> | string
    supplier_id?: StringFilter<"SupplierCredits"> | string
    credit_amount?: FloatFilter<"SupplierCredits"> | number
    medicine_name?: StringNullableFilter<"SupplierCredits"> | string | null
    paid_amount?: FloatFilter<"SupplierCredits"> | number
    unpaid_amount?: FloatFilter<"SupplierCredits"> | number
    total_unpaid_amount?: FloatFilter<"SupplierCredits"> | number
    total_paid_amount?: FloatFilter<"SupplierCredits"> | number
    description?: StringNullableFilter<"SupplierCredits"> | string | null
    payment_method?: EnumPaymentMethodNullableFilter<"SupplierCredits"> | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFilter<"SupplierCredits"> | $Enums.PaymentStatus
    credit_date?: DateTimeFilter<"SupplierCredits"> | Date | string
    payment_file?: StringNullableFilter<"SupplierCredits"> | string | null
    created_by?: StringFilter<"SupplierCredits"> | string
    updated_by?: StringNullableFilter<"SupplierCredits"> | string | null
    created_at?: DateTimeFilter<"SupplierCredits"> | Date | string
    updated_at?: DateTimeFilter<"SupplierCredits"> | Date | string
    supplier?: XOR<SuppliersScalarRelationFilter, SuppliersWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    updatedBy?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }

  export type SupplierCreditsOrderByWithRelationInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    credit_amount?: SortOrder
    medicine_name?: SortOrderInput | SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    description?: SortOrderInput | SortOrder
    payment_method?: SortOrderInput | SortOrder
    payment_status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrderInput | SortOrder
    created_by?: SortOrder
    updated_by?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    supplier?: SuppliersOrderByWithRelationInput
    createdBy?: UsersOrderByWithRelationInput
    updatedBy?: UsersOrderByWithRelationInput
  }

  export type SupplierCreditsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SupplierCreditsWhereInput | SupplierCreditsWhereInput[]
    OR?: SupplierCreditsWhereInput[]
    NOT?: SupplierCreditsWhereInput | SupplierCreditsWhereInput[]
    supplier_id?: StringFilter<"SupplierCredits"> | string
    credit_amount?: FloatFilter<"SupplierCredits"> | number
    medicine_name?: StringNullableFilter<"SupplierCredits"> | string | null
    paid_amount?: FloatFilter<"SupplierCredits"> | number
    unpaid_amount?: FloatFilter<"SupplierCredits"> | number
    total_unpaid_amount?: FloatFilter<"SupplierCredits"> | number
    total_paid_amount?: FloatFilter<"SupplierCredits"> | number
    description?: StringNullableFilter<"SupplierCredits"> | string | null
    payment_method?: EnumPaymentMethodNullableFilter<"SupplierCredits"> | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFilter<"SupplierCredits"> | $Enums.PaymentStatus
    credit_date?: DateTimeFilter<"SupplierCredits"> | Date | string
    payment_file?: StringNullableFilter<"SupplierCredits"> | string | null
    created_by?: StringFilter<"SupplierCredits"> | string
    updated_by?: StringNullableFilter<"SupplierCredits"> | string | null
    created_at?: DateTimeFilter<"SupplierCredits"> | Date | string
    updated_at?: DateTimeFilter<"SupplierCredits"> | Date | string
    supplier?: XOR<SuppliersScalarRelationFilter, SuppliersWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    updatedBy?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }, "id">

  export type SupplierCreditsOrderByWithAggregationInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    credit_amount?: SortOrder
    medicine_name?: SortOrderInput | SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    description?: SortOrderInput | SortOrder
    payment_method?: SortOrderInput | SortOrder
    payment_status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrderInput | SortOrder
    created_by?: SortOrder
    updated_by?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SupplierCreditsCountOrderByAggregateInput
    _avg?: SupplierCreditsAvgOrderByAggregateInput
    _max?: SupplierCreditsMaxOrderByAggregateInput
    _min?: SupplierCreditsMinOrderByAggregateInput
    _sum?: SupplierCreditsSumOrderByAggregateInput
  }

  export type SupplierCreditsScalarWhereWithAggregatesInput = {
    AND?: SupplierCreditsScalarWhereWithAggregatesInput | SupplierCreditsScalarWhereWithAggregatesInput[]
    OR?: SupplierCreditsScalarWhereWithAggregatesInput[]
    NOT?: SupplierCreditsScalarWhereWithAggregatesInput | SupplierCreditsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SupplierCredits"> | string
    supplier_id?: StringWithAggregatesFilter<"SupplierCredits"> | string
    credit_amount?: FloatWithAggregatesFilter<"SupplierCredits"> | number
    medicine_name?: StringNullableWithAggregatesFilter<"SupplierCredits"> | string | null
    paid_amount?: FloatWithAggregatesFilter<"SupplierCredits"> | number
    unpaid_amount?: FloatWithAggregatesFilter<"SupplierCredits"> | number
    total_unpaid_amount?: FloatWithAggregatesFilter<"SupplierCredits"> | number
    total_paid_amount?: FloatWithAggregatesFilter<"SupplierCredits"> | number
    description?: StringNullableWithAggregatesFilter<"SupplierCredits"> | string | null
    payment_method?: EnumPaymentMethodNullableWithAggregatesFilter<"SupplierCredits"> | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusWithAggregatesFilter<"SupplierCredits"> | $Enums.PaymentStatus
    credit_date?: DateTimeWithAggregatesFilter<"SupplierCredits"> | Date | string
    payment_file?: StringNullableWithAggregatesFilter<"SupplierCredits"> | string | null
    created_by?: StringWithAggregatesFilter<"SupplierCredits"> | string
    updated_by?: StringNullableWithAggregatesFilter<"SupplierCredits"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"SupplierCredits"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SupplierCredits"> | Date | string
  }

  export type CustomerCreditWhereInput = {
    AND?: CustomerCreditWhereInput | CustomerCreditWhereInput[]
    OR?: CustomerCreditWhereInput[]
    NOT?: CustomerCreditWhereInput | CustomerCreditWhereInput[]
    id?: StringFilter<"CustomerCredit"> | string
    customer_id?: StringFilter<"CustomerCredit"> | string
    credit_amount?: FloatFilter<"CustomerCredit"> | number
    paid_amount?: FloatFilter<"CustomerCredit"> | number
    unpaid_amount?: FloatFilter<"CustomerCredit"> | number
    total_unpaid_amount?: FloatFilter<"CustomerCredit"> | number
    total_paid_amount?: FloatFilter<"CustomerCredit"> | number
    medicine_name?: StringNullableFilter<"CustomerCredit"> | string | null
    payment_method?: EnumPaymentMethodFilter<"CustomerCredit"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"CustomerCredit"> | string | null
    status?: EnumPaymentStatusFilter<"CustomerCredit"> | $Enums.PaymentStatus
    credit_date?: DateTimeFilter<"CustomerCredit"> | Date | string
    payment_file?: StringNullableFilter<"CustomerCredit"> | string | null
    updated_at?: DateTimeFilter<"CustomerCredit"> | Date | string
    created_by?: StringFilter<"CustomerCredit"> | string
    updated_by?: StringNullableFilter<"CustomerCredit"> | string | null
    customer?: XOR<CustomersScalarRelationFilter, CustomersWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    updatedBy?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }

  export type CustomerCreditOrderByWithRelationInput = {
    id?: SortOrder
    customer_id?: SortOrder
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    medicine_name?: SortOrderInput | SortOrder
    payment_method?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrderInput | SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrderInput | SortOrder
    customer?: CustomersOrderByWithRelationInput
    createdBy?: UsersOrderByWithRelationInput
    updatedBy?: UsersOrderByWithRelationInput
  }

  export type CustomerCreditWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerCreditWhereInput | CustomerCreditWhereInput[]
    OR?: CustomerCreditWhereInput[]
    NOT?: CustomerCreditWhereInput | CustomerCreditWhereInput[]
    customer_id?: StringFilter<"CustomerCredit"> | string
    credit_amount?: FloatFilter<"CustomerCredit"> | number
    paid_amount?: FloatFilter<"CustomerCredit"> | number
    unpaid_amount?: FloatFilter<"CustomerCredit"> | number
    total_unpaid_amount?: FloatFilter<"CustomerCredit"> | number
    total_paid_amount?: FloatFilter<"CustomerCredit"> | number
    medicine_name?: StringNullableFilter<"CustomerCredit"> | string | null
    payment_method?: EnumPaymentMethodFilter<"CustomerCredit"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"CustomerCredit"> | string | null
    status?: EnumPaymentStatusFilter<"CustomerCredit"> | $Enums.PaymentStatus
    credit_date?: DateTimeFilter<"CustomerCredit"> | Date | string
    payment_file?: StringNullableFilter<"CustomerCredit"> | string | null
    updated_at?: DateTimeFilter<"CustomerCredit"> | Date | string
    created_by?: StringFilter<"CustomerCredit"> | string
    updated_by?: StringNullableFilter<"CustomerCredit"> | string | null
    customer?: XOR<CustomersScalarRelationFilter, CustomersWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    updatedBy?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }, "id">

  export type CustomerCreditOrderByWithAggregationInput = {
    id?: SortOrder
    customer_id?: SortOrder
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    medicine_name?: SortOrderInput | SortOrder
    payment_method?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrderInput | SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrderInput | SortOrder
    _count?: CustomerCreditCountOrderByAggregateInput
    _avg?: CustomerCreditAvgOrderByAggregateInput
    _max?: CustomerCreditMaxOrderByAggregateInput
    _min?: CustomerCreditMinOrderByAggregateInput
    _sum?: CustomerCreditSumOrderByAggregateInput
  }

  export type CustomerCreditScalarWhereWithAggregatesInput = {
    AND?: CustomerCreditScalarWhereWithAggregatesInput | CustomerCreditScalarWhereWithAggregatesInput[]
    OR?: CustomerCreditScalarWhereWithAggregatesInput[]
    NOT?: CustomerCreditScalarWhereWithAggregatesInput | CustomerCreditScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerCredit"> | string
    customer_id?: StringWithAggregatesFilter<"CustomerCredit"> | string
    credit_amount?: FloatWithAggregatesFilter<"CustomerCredit"> | number
    paid_amount?: FloatWithAggregatesFilter<"CustomerCredit"> | number
    unpaid_amount?: FloatWithAggregatesFilter<"CustomerCredit"> | number
    total_unpaid_amount?: FloatWithAggregatesFilter<"CustomerCredit"> | number
    total_paid_amount?: FloatWithAggregatesFilter<"CustomerCredit"> | number
    medicine_name?: StringNullableWithAggregatesFilter<"CustomerCredit"> | string | null
    payment_method?: EnumPaymentMethodWithAggregatesFilter<"CustomerCredit"> | $Enums.PaymentMethod
    description?: StringNullableWithAggregatesFilter<"CustomerCredit"> | string | null
    status?: EnumPaymentStatusWithAggregatesFilter<"CustomerCredit"> | $Enums.PaymentStatus
    credit_date?: DateTimeWithAggregatesFilter<"CustomerCredit"> | Date | string
    payment_file?: StringNullableWithAggregatesFilter<"CustomerCredit"> | string | null
    updated_at?: DateTimeWithAggregatesFilter<"CustomerCredit"> | Date | string
    created_by?: StringWithAggregatesFilter<"CustomerCredit"> | string
    updated_by?: StringNullableWithAggregatesFilter<"CustomerCredit"> | string | null
  }

  export type ObjectivesWhereInput = {
    AND?: ObjectivesWhereInput | ObjectivesWhereInput[]
    OR?: ObjectivesWhereInput[]
    NOT?: ObjectivesWhereInput | ObjectivesWhereInput[]
    id?: StringFilter<"Objectives"> | string
    title?: StringFilter<"Objectives"> | string
    description?: StringFilter<"Objectives"> | string
    time_period?: StringFilter<"Objectives"> | string
    progress?: FloatFilter<"Objectives"> | number
    KeyResults?: KeyResultsListRelationFilter
  }

  export type ObjectivesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    time_period?: SortOrder
    progress?: SortOrder
    KeyResults?: KeyResultsOrderByRelationAggregateInput
  }

  export type ObjectivesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ObjectivesWhereInput | ObjectivesWhereInput[]
    OR?: ObjectivesWhereInput[]
    NOT?: ObjectivesWhereInput | ObjectivesWhereInput[]
    title?: StringFilter<"Objectives"> | string
    description?: StringFilter<"Objectives"> | string
    time_period?: StringFilter<"Objectives"> | string
    progress?: FloatFilter<"Objectives"> | number
    KeyResults?: KeyResultsListRelationFilter
  }, "id">

  export type ObjectivesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    time_period?: SortOrder
    progress?: SortOrder
    _count?: ObjectivesCountOrderByAggregateInput
    _avg?: ObjectivesAvgOrderByAggregateInput
    _max?: ObjectivesMaxOrderByAggregateInput
    _min?: ObjectivesMinOrderByAggregateInput
    _sum?: ObjectivesSumOrderByAggregateInput
  }

  export type ObjectivesScalarWhereWithAggregatesInput = {
    AND?: ObjectivesScalarWhereWithAggregatesInput | ObjectivesScalarWhereWithAggregatesInput[]
    OR?: ObjectivesScalarWhereWithAggregatesInput[]
    NOT?: ObjectivesScalarWhereWithAggregatesInput | ObjectivesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Objectives"> | string
    title?: StringWithAggregatesFilter<"Objectives"> | string
    description?: StringWithAggregatesFilter<"Objectives"> | string
    time_period?: StringWithAggregatesFilter<"Objectives"> | string
    progress?: FloatWithAggregatesFilter<"Objectives"> | number
  }

  export type KeyResultsWhereInput = {
    AND?: KeyResultsWhereInput | KeyResultsWhereInput[]
    OR?: KeyResultsWhereInput[]
    NOT?: KeyResultsWhereInput | KeyResultsWhereInput[]
    id?: StringFilter<"KeyResults"> | string
    objective_id?: StringFilter<"KeyResults"> | string
    title?: StringFilter<"KeyResults"> | string
    description?: StringFilter<"KeyResults"> | string
    weight?: FloatFilter<"KeyResults"> | number
    deadline?: DateTimeFilter<"KeyResults"> | Date | string
    progress?: FloatFilter<"KeyResults"> | number
    objective?: XOR<ObjectivesScalarRelationFilter, ObjectivesWhereInput>
  }

  export type KeyResultsOrderByWithRelationInput = {
    id?: SortOrder
    objective_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deadline?: SortOrder
    progress?: SortOrder
    objective?: ObjectivesOrderByWithRelationInput
  }

  export type KeyResultsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KeyResultsWhereInput | KeyResultsWhereInput[]
    OR?: KeyResultsWhereInput[]
    NOT?: KeyResultsWhereInput | KeyResultsWhereInput[]
    objective_id?: StringFilter<"KeyResults"> | string
    title?: StringFilter<"KeyResults"> | string
    description?: StringFilter<"KeyResults"> | string
    weight?: FloatFilter<"KeyResults"> | number
    deadline?: DateTimeFilter<"KeyResults"> | Date | string
    progress?: FloatFilter<"KeyResults"> | number
    objective?: XOR<ObjectivesScalarRelationFilter, ObjectivesWhereInput>
  }, "id">

  export type KeyResultsOrderByWithAggregationInput = {
    id?: SortOrder
    objective_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deadline?: SortOrder
    progress?: SortOrder
    _count?: KeyResultsCountOrderByAggregateInput
    _avg?: KeyResultsAvgOrderByAggregateInput
    _max?: KeyResultsMaxOrderByAggregateInput
    _min?: KeyResultsMinOrderByAggregateInput
    _sum?: KeyResultsSumOrderByAggregateInput
  }

  export type KeyResultsScalarWhereWithAggregatesInput = {
    AND?: KeyResultsScalarWhereWithAggregatesInput | KeyResultsScalarWhereWithAggregatesInput[]
    OR?: KeyResultsScalarWhereWithAggregatesInput[]
    NOT?: KeyResultsScalarWhereWithAggregatesInput | KeyResultsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KeyResults"> | string
    objective_id?: StringWithAggregatesFilter<"KeyResults"> | string
    title?: StringWithAggregatesFilter<"KeyResults"> | string
    description?: StringWithAggregatesFilter<"KeyResults"> | string
    weight?: FloatWithAggregatesFilter<"KeyResults"> | number
    deadline?: DateTimeWithAggregatesFilter<"KeyResults"> | Date | string
    progress?: FloatWithAggregatesFilter<"KeyResults"> | number
  }

  export type UsersCreateInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type MembersCreateInput = {
    id?: string
    FirstName: string
    LastName: string
    phone?: string | null
    position: string
    address?: string | null
    certificate?: string | null
    Photo?: string | null
    gender?: $Enums.Gender | null
    dob?: Date | string | null
    salary: number
    joining_date: Date | string
    status?: $Enums.Status
    role: $Enums.Role
    biography?: string | null
    user: UsersCreateNestedOneWithoutMemberInput
  }

  export type MembersUncheckedCreateInput = {
    id?: string
    user_id: string
    FirstName: string
    LastName: string
    phone?: string | null
    position: string
    address?: string | null
    certificate?: string | null
    Photo?: string | null
    gender?: $Enums.Gender | null
    dob?: Date | string | null
    salary: number
    joining_date: Date | string
    status?: $Enums.Status
    role: $Enums.Role
    biography?: string | null
  }

  export type MembersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: FloatFieldUpdateOperationsInput | number
    joining_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    biography?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UsersUpdateOneRequiredWithoutMemberNestedInput
  }

  export type MembersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: FloatFieldUpdateOperationsInput | number
    joining_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    biography?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembersCreateManyInput = {
    id?: string
    user_id: string
    FirstName: string
    LastName: string
    phone?: string | null
    position: string
    address?: string | null
    certificate?: string | null
    Photo?: string | null
    gender?: $Enums.Gender | null
    dob?: Date | string | null
    salary: number
    joining_date: Date | string
    status?: $Enums.Status
    role: $Enums.Role
    biography?: string | null
  }

  export type MembersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: FloatFieldUpdateOperationsInput | number
    joining_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    biography?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: FloatFieldUpdateOperationsInput | number
    joining_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    biography?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SuppliersCreateInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
    SupplierCredits?: SupplierCreditsCreateNestedManyWithoutSupplierInput
    Medicines?: MedicinesCreateNestedManyWithoutSupplierInput
  }

  export type SuppliersUncheckedCreateInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
    SupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutSupplierInput
    Medicines?: MedicinesUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SuppliersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    SupplierCredits?: SupplierCreditsUpdateManyWithoutSupplierNestedInput
    Medicines?: MedicinesUpdateManyWithoutSupplierNestedInput
  }

  export type SuppliersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    SupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutSupplierNestedInput
    Medicines?: MedicinesUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SuppliersCreateManyInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
  }

  export type SuppliersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SuppliersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriesCreateInput = {
    id?: string
    name: string
    Medicines?: MedicinesCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUncheckedCreateInput = {
    id?: string
    name: string
    Medicines?: MedicinesUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesCreateManyInput = {
    id?: string
    name: string
  }

  export type CategoriesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DosageFormsCreateInput = {
    id?: string
    name: string
    Medicines?: MedicinesCreateNestedManyWithoutDosage_formInput
    Sales?: SalesCreateNestedManyWithoutDosage_formInput
    Returns?: ReturnsCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsUncheckedCreateInput = {
    id?: string
    name: string
    Medicines?: MedicinesUncheckedCreateNestedManyWithoutDosage_formInput
    Sales?: SalesUncheckedCreateNestedManyWithoutDosage_formInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUpdateManyWithoutDosage_formNestedInput
    Sales?: SalesUpdateManyWithoutDosage_formNestedInput
    Returns?: ReturnsUpdateManyWithoutDosage_formNestedInput
  }

  export type DosageFormsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUncheckedUpdateManyWithoutDosage_formNestedInput
    Sales?: SalesUncheckedUpdateManyWithoutDosage_formNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutDosage_formNestedInput
  }

  export type DosageFormsCreateManyInput = {
    id?: string
    name: string
  }

  export type DosageFormsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DosageFormsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MedicinesCreateInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoriesCreateNestedOneWithoutMedicinesInput
    dosage_form: DosageFormsCreateNestedOneWithoutMedicinesInput
    supplier: SuppliersCreateNestedOneWithoutMedicinesInput
    createdBy: UsersCreateNestedOneWithoutMedicinesInput
    Sales?: SalesCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Sales?: SalesUncheckedCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutMedicinesNestedInput
    dosage_form?: DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SuppliersUpdateOneRequiredWithoutMedicinesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutMedicinesNestedInput
    Sales?: SalesUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sales?: SalesUncheckedUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesCreateManyInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicinesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicinesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesCreateInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    sealed_date: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    dosage_form: DosageFormsCreateNestedOneWithoutSalesInput
    customer?: CustomersCreateNestedOneWithoutSalesInput
    medicine: MedicinesCreateNestedOneWithoutSalesInput
    createdBy: UsersCreateNestedOneWithoutCreatedSalesInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSalesInput
  }

  export type SalesUncheckedCreateInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage_form?: DosageFormsUpdateOneRequiredWithoutSalesNestedInput
    customer?: CustomersUpdateOneWithoutSalesNestedInput
    medicine?: MedicinesUpdateOneRequiredWithoutSalesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreatedSalesNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSalesNestedInput
  }

  export type SalesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesCreateManyInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpensesCreateInput = {
    id?: string
    date: Date | string
    reason: string
    payment_method?: $Enums.PaymentMethod | null
    receipt?: string | null
    amount: number
    description?: string | null
    additional_info?: string | null
  }

  export type ExpensesUncheckedCreateInput = {
    id?: string
    date: Date | string
    reason: string
    payment_method?: $Enums.PaymentMethod | null
    receipt?: string | null
    amount: number
    description?: string | null
    additional_info?: string | null
  }

  export type ExpensesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    receipt?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    additional_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExpensesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    receipt?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    additional_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExpensesCreateManyInput = {
    id?: string
    date: Date | string
    reason: string
    payment_method?: $Enums.PaymentMethod | null
    receipt?: string | null
    amount: number
    description?: string | null
    additional_info?: string | null
  }

  export type ExpensesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    receipt?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    additional_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExpensesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    receipt?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    additional_info?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReturnsCreateInput = {
    id?: string
    product_name: string
    product_batch_number: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    dosage_form: DosageFormsCreateNestedOneWithoutReturnsInput
    medicine: MedicinesCreateNestedOneWithoutReturnsInput
  }

  export type ReturnsUncheckedCreateInput = {
    id?: string
    product_name: string
    product_batch_number: string
    dosage_form_id: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    medicine_id: string
  }

  export type ReturnsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    dosage_form?: DosageFormsUpdateOneRequiredWithoutReturnsNestedInput
    medicine?: MedicinesUpdateOneRequiredWithoutReturnsNestedInput
  }

  export type ReturnsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    medicine_id?: StringFieldUpdateOperationsInput | string
  }

  export type ReturnsCreateManyInput = {
    id?: string
    product_name: string
    product_batch_number: string
    dosage_form_id: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    medicine_id: string
  }

  export type ReturnsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ReturnsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    medicine_id?: StringFieldUpdateOperationsInput | string
  }

  export type CustomersCreateInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
    Sales?: SalesCreateNestedManyWithoutCustomerInput
    CustomerCredit?: CustomerCreditCreateNestedManyWithoutCustomerInput
  }

  export type CustomersUncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
    Sales?: SalesUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCredit?: CustomerCreditUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    Sales?: SalesUpdateManyWithoutCustomerNestedInput
    CustomerCredit?: CustomerCreditUpdateManyWithoutCustomerNestedInput
  }

  export type CustomersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    Sales?: SalesUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCredit?: CustomerCreditUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomersCreateManyInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
  }

  export type CustomersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type CustomersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type SupplierCreditsCreateInput = {
    id?: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    supplier: SuppliersCreateNestedOneWithoutSupplierCreditsInput
    createdBy: UsersCreateNestedOneWithoutCreditsInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSupplierCreditsInput
  }

  export type SupplierCreditsUncheckedCreateInput = {
    id?: string
    supplier_id: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SupplierCreditsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SuppliersUpdateOneRequiredWithoutSupplierCreditsNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreditsNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSupplierCreditsNestedInput
  }

  export type SupplierCreditsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreditsCreateManyInput = {
    id?: string
    supplier_id: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SupplierCreditsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreditsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreditCreateInput = {
    id?: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    customer: CustomersCreateNestedOneWithoutCustomerCreditInput
    createdBy: UsersCreateNestedOneWithoutCustomerCreditsInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedCustomerCreditsInput
  }

  export type CustomerCreditUncheckedCreateInput = {
    id?: string
    customer_id: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    created_by: string
    updated_by?: string | null
  }

  export type CustomerCreditUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomersUpdateOneRequiredWithoutCustomerCreditNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCustomerCreditsNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedCustomerCreditsNestedInput
  }

  export type CustomerCreditUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customer_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerCreditCreateManyInput = {
    id?: string
    customer_id: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    created_by: string
    updated_by?: string | null
  }

  export type CustomerCreditUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreditUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customer_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObjectivesCreateInput = {
    id?: string
    title: string
    description: string
    time_period: string
    progress: number
    KeyResults?: KeyResultsCreateNestedManyWithoutObjectiveInput
  }

  export type ObjectivesUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    time_period: string
    progress: number
    KeyResults?: KeyResultsUncheckedCreateNestedManyWithoutObjectiveInput
  }

  export type ObjectivesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time_period?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    KeyResults?: KeyResultsUpdateManyWithoutObjectiveNestedInput
  }

  export type ObjectivesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time_period?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
    KeyResults?: KeyResultsUncheckedUpdateManyWithoutObjectiveNestedInput
  }

  export type ObjectivesCreateManyInput = {
    id?: string
    title: string
    description: string
    time_period: string
    progress: number
  }

  export type ObjectivesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time_period?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type ObjectivesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time_period?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyResultsCreateInput = {
    id?: string
    title: string
    description: string
    weight: number
    deadline: Date | string
    progress: number
    objective: ObjectivesCreateNestedOneWithoutKeyResultsInput
  }

  export type KeyResultsUncheckedCreateInput = {
    id?: string
    objective_id: string
    title: string
    description: string
    weight: number
    deadline: Date | string
    progress: number
  }

  export type KeyResultsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
    objective?: ObjectivesUpdateOneRequiredWithoutKeyResultsNestedInput
  }

  export type KeyResultsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    objective_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyResultsCreateManyInput = {
    id?: string
    objective_id: string
    title: string
    description: string
    weight: number
    deadline: Date | string
    progress: number
  }

  export type KeyResultsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyResultsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    objective_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type MembersNullableScalarRelationFilter = {
    is?: MembersWhereInput | null
    isNot?: MembersWhereInput | null
  }

  export type SupplierCreditsListRelationFilter = {
    every?: SupplierCreditsWhereInput
    some?: SupplierCreditsWhereInput
    none?: SupplierCreditsWhereInput
  }

  export type MedicinesListRelationFilter = {
    every?: MedicinesWhereInput
    some?: MedicinesWhereInput
    none?: MedicinesWhereInput
  }

  export type CustomerCreditListRelationFilter = {
    every?: CustomerCreditWhereInput
    some?: CustomerCreditWhereInput
    none?: CustomerCreditWhereInput
  }

  export type SalesListRelationFilter = {
    every?: SalesWhereInput
    some?: SalesWhereInput
    none?: SalesWhereInput
  }

  export type SupplierCreditsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCreditOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MembersCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    address?: SortOrder
    certificate?: SortOrder
    Photo?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    salary?: SortOrder
    joining_date?: SortOrder
    status?: SortOrder
    role?: SortOrder
    biography?: SortOrder
  }

  export type MembersAvgOrderByAggregateInput = {
    salary?: SortOrder
  }

  export type MembersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    address?: SortOrder
    certificate?: SortOrder
    Photo?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    salary?: SortOrder
    joining_date?: SortOrder
    status?: SortOrder
    role?: SortOrder
    biography?: SortOrder
  }

  export type MembersMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    address?: SortOrder
    certificate?: SortOrder
    Photo?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    salary?: SortOrder
    joining_date?: SortOrder
    status?: SortOrder
    role?: SortOrder
    biography?: SortOrder
  }

  export type MembersSumOrderByAggregateInput = {
    salary?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SuppliersCountOrderByAggregateInput = {
    id?: SortOrder
    supplier_name?: SortOrder
    contact_info?: SortOrder
    payment_info_cbe?: SortOrder
    payment_info_coop?: SortOrder
    payment_info_boa?: SortOrder
    payment_info_awash?: SortOrder
    payment_info_ebirr?: SortOrder
    location?: SortOrder
    email?: SortOrder
  }

  export type SuppliersMaxOrderByAggregateInput = {
    id?: SortOrder
    supplier_name?: SortOrder
    contact_info?: SortOrder
    payment_info_cbe?: SortOrder
    payment_info_coop?: SortOrder
    payment_info_boa?: SortOrder
    payment_info_awash?: SortOrder
    payment_info_ebirr?: SortOrder
    location?: SortOrder
    email?: SortOrder
  }

  export type SuppliersMinOrderByAggregateInput = {
    id?: SortOrder
    supplier_name?: SortOrder
    contact_info?: SortOrder
    payment_info_cbe?: SortOrder
    payment_info_coop?: SortOrder
    payment_info_boa?: SortOrder
    payment_info_awash?: SortOrder
    payment_info_ebirr?: SortOrder
    location?: SortOrder
    email?: SortOrder
  }

  export type CategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ReturnsListRelationFilter = {
    every?: ReturnsWhereInput
    some?: ReturnsWhereInput
    none?: ReturnsWhereInput
  }

  export type ReturnsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DosageFormsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DosageFormsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DosageFormsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type CategoriesScalarRelationFilter = {
    is?: CategoriesWhereInput
    isNot?: CategoriesWhereInput
  }

  export type DosageFormsScalarRelationFilter = {
    is?: DosageFormsWhereInput
    isNot?: DosageFormsWhereInput
  }

  export type SuppliersScalarRelationFilter = {
    is?: SuppliersWhereInput
    isNot?: SuppliersWhereInput
  }

  export type MedicinesCountOrderByAggregateInput = {
    id?: SortOrder
    medicine_name?: SortOrder
    brand_name?: SortOrder
    batch_number?: SortOrder
    category_id?: SortOrder
    dosage_form_id?: SortOrder
    medicine_weight?: SortOrder
    quantity?: SortOrder
    supplier_id?: SortOrder
    invoice_number?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrder
    total_price?: SortOrder
    expire_date?: SortOrder
    required_prescription?: SortOrder
    payment_method?: SortOrder
    Payment_file?: SortOrder
    details?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicinesAvgOrderByAggregateInput = {
    medicine_weight?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrder
    total_price?: SortOrder
  }

  export type MedicinesMaxOrderByAggregateInput = {
    id?: SortOrder
    medicine_name?: SortOrder
    brand_name?: SortOrder
    batch_number?: SortOrder
    category_id?: SortOrder
    dosage_form_id?: SortOrder
    medicine_weight?: SortOrder
    quantity?: SortOrder
    supplier_id?: SortOrder
    invoice_number?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrder
    total_price?: SortOrder
    expire_date?: SortOrder
    required_prescription?: SortOrder
    payment_method?: SortOrder
    Payment_file?: SortOrder
    details?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicinesMinOrderByAggregateInput = {
    id?: SortOrder
    medicine_name?: SortOrder
    brand_name?: SortOrder
    batch_number?: SortOrder
    category_id?: SortOrder
    dosage_form_id?: SortOrder
    medicine_weight?: SortOrder
    quantity?: SortOrder
    supplier_id?: SortOrder
    invoice_number?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrder
    total_price?: SortOrder
    expire_date?: SortOrder
    required_prescription?: SortOrder
    payment_method?: SortOrder
    Payment_file?: SortOrder
    details?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicinesSumOrderByAggregateInput = {
    medicine_weight?: SortOrder
    quantity?: SortOrder
    unit_price?: SortOrder
    sell_price?: SortOrder
    total_price?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type CustomersNullableScalarRelationFilter = {
    is?: CustomersWhereInput | null
    isNot?: CustomersWhereInput | null
  }

  export type MedicinesScalarRelationFilter = {
    is?: MedicinesWhereInput
    isNot?: MedicinesWhereInput
  }

  export type UsersNullableScalarRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type SalesCountOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
    payment_method?: SortOrder
    prescription?: SortOrder
    dosage_form_id?: SortOrder
    customer_id?: SortOrder
    sealed_date?: SortOrder
    medicine_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SalesAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
  }

  export type SalesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
    payment_method?: SortOrder
    prescription?: SortOrder
    dosage_form_id?: SortOrder
    customer_id?: SortOrder
    sealed_date?: SortOrder
    medicine_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SalesMinOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
    payment_method?: SortOrder
    prescription?: SortOrder
    dosage_form_id?: SortOrder
    customer_id?: SortOrder
    sealed_date?: SortOrder
    medicine_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SalesSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    total_amount?: SortOrder
  }

  export type EnumPaymentMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableFilter<$PrismaModel> | $Enums.PaymentMethod | null
  }

  export type ExpensesCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    payment_method?: SortOrder
    receipt?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    additional_info?: SortOrder
  }

  export type ExpensesAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ExpensesMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    payment_method?: SortOrder
    receipt?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    additional_info?: SortOrder
  }

  export type ExpensesMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    payment_method?: SortOrder
    receipt?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    additional_info?: SortOrder
  }

  export type ExpensesSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
  }

  export type ReturnsCountOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    dosage_form_id?: SortOrder
    return_date?: SortOrder
    reason_for_return?: SortOrder
    quantity?: SortOrder
    medicine_id?: SortOrder
  }

  export type ReturnsAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type ReturnsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    dosage_form_id?: SortOrder
    return_date?: SortOrder
    reason_for_return?: SortOrder
    quantity?: SortOrder
    medicine_id?: SortOrder
  }

  export type ReturnsMinOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    product_batch_number?: SortOrder
    dosage_form_id?: SortOrder
    return_date?: SortOrder
    reason_for_return?: SortOrder
    quantity?: SortOrder
    medicine_id?: SortOrder
  }

  export type ReturnsSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type CustomersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
  }

  export type CustomersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
  }

  export type CustomersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    status?: SortOrder
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type SupplierCreditsCountOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    credit_amount?: SortOrder
    medicine_name?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    description?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SupplierCreditsAvgOrderByAggregateInput = {
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
  }

  export type SupplierCreditsMaxOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    credit_amount?: SortOrder
    medicine_name?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    description?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SupplierCreditsMinOrderByAggregateInput = {
    id?: SortOrder
    supplier_id?: SortOrder
    credit_amount?: SortOrder
    medicine_name?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    description?: SortOrder
    payment_method?: SortOrder
    payment_status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SupplierCreditsSumOrderByAggregateInput = {
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type CustomersScalarRelationFilter = {
    is?: CustomersWhereInput
    isNot?: CustomersWhereInput
  }

  export type CustomerCreditCountOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    medicine_name?: SortOrder
    payment_method?: SortOrder
    description?: SortOrder
    status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type CustomerCreditAvgOrderByAggregateInput = {
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
  }

  export type CustomerCreditMaxOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    medicine_name?: SortOrder
    payment_method?: SortOrder
    description?: SortOrder
    status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type CustomerCreditMinOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
    medicine_name?: SortOrder
    payment_method?: SortOrder
    description?: SortOrder
    status?: SortOrder
    credit_date?: SortOrder
    payment_file?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type CustomerCreditSumOrderByAggregateInput = {
    credit_amount?: SortOrder
    paid_amount?: SortOrder
    unpaid_amount?: SortOrder
    total_unpaid_amount?: SortOrder
    total_paid_amount?: SortOrder
  }

  export type KeyResultsListRelationFilter = {
    every?: KeyResultsWhereInput
    some?: KeyResultsWhereInput
    none?: KeyResultsWhereInput
  }

  export type KeyResultsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ObjectivesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    time_period?: SortOrder
    progress?: SortOrder
  }

  export type ObjectivesAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type ObjectivesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    time_period?: SortOrder
    progress?: SortOrder
  }

  export type ObjectivesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    time_period?: SortOrder
    progress?: SortOrder
  }

  export type ObjectivesSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type ObjectivesScalarRelationFilter = {
    is?: ObjectivesWhereInput
    isNot?: ObjectivesWhereInput
  }

  export type KeyResultsCountOrderByAggregateInput = {
    id?: SortOrder
    objective_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deadline?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultsAvgOrderByAggregateInput = {
    weight?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultsMaxOrderByAggregateInput = {
    id?: SortOrder
    objective_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deadline?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultsMinOrderByAggregateInput = {
    id?: SortOrder
    objective_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deadline?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultsSumOrderByAggregateInput = {
    weight?: SortOrder
    progress?: SortOrder
  }

  export type MembersCreateNestedOneWithoutUserInput = {
    create?: XOR<MembersCreateWithoutUserInput, MembersUncheckedCreateWithoutUserInput>
    connectOrCreate?: MembersCreateOrConnectWithoutUserInput
    connect?: MembersWhereUniqueInput
  }

  export type SupplierCreditsCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SupplierCreditsCreateWithoutCreatedByInput, SupplierCreditsUncheckedCreateWithoutCreatedByInput> | SupplierCreditsCreateWithoutCreatedByInput[] | SupplierCreditsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutCreatedByInput | SupplierCreditsCreateOrConnectWithoutCreatedByInput[]
    createMany?: SupplierCreditsCreateManyCreatedByInputEnvelope
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
  }

  export type MedicinesCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MedicinesCreateWithoutCreatedByInput, MedicinesUncheckedCreateWithoutCreatedByInput> | MedicinesCreateWithoutCreatedByInput[] | MedicinesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCreatedByInput | MedicinesCreateOrConnectWithoutCreatedByInput[]
    createMany?: MedicinesCreateManyCreatedByInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type CustomerCreditCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CustomerCreditCreateWithoutCreatedByInput, CustomerCreditUncheckedCreateWithoutCreatedByInput> | CustomerCreditCreateWithoutCreatedByInput[] | CustomerCreditUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCreatedByInput | CustomerCreditCreateOrConnectWithoutCreatedByInput[]
    createMany?: CustomerCreditCreateManyCreatedByInputEnvelope
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
  }

  export type CustomerCreditCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CustomerCreditCreateWithoutUpdatedByInput, CustomerCreditUncheckedCreateWithoutUpdatedByInput> | CustomerCreditCreateWithoutUpdatedByInput[] | CustomerCreditUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutUpdatedByInput | CustomerCreditCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CustomerCreditCreateManyUpdatedByInputEnvelope
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
  }

  export type SupplierCreditsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SupplierCreditsCreateWithoutUpdatedByInput, SupplierCreditsUncheckedCreateWithoutUpdatedByInput> | SupplierCreditsCreateWithoutUpdatedByInput[] | SupplierCreditsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutUpdatedByInput | SupplierCreditsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SupplierCreditsCreateManyUpdatedByInputEnvelope
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
  }

  export type SalesCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SalesCreateWithoutCreatedByInput, SalesUncheckedCreateWithoutCreatedByInput> | SalesCreateWithoutCreatedByInput[] | SalesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCreatedByInput | SalesCreateOrConnectWithoutCreatedByInput[]
    createMany?: SalesCreateManyCreatedByInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type SalesCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SalesCreateWithoutUpdatedByInput, SalesUncheckedCreateWithoutUpdatedByInput> | SalesCreateWithoutUpdatedByInput[] | SalesUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutUpdatedByInput | SalesCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SalesCreateManyUpdatedByInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type MembersUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<MembersCreateWithoutUserInput, MembersUncheckedCreateWithoutUserInput>
    connectOrCreate?: MembersCreateOrConnectWithoutUserInput
    connect?: MembersWhereUniqueInput
  }

  export type SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SupplierCreditsCreateWithoutCreatedByInput, SupplierCreditsUncheckedCreateWithoutCreatedByInput> | SupplierCreditsCreateWithoutCreatedByInput[] | SupplierCreditsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutCreatedByInput | SupplierCreditsCreateOrConnectWithoutCreatedByInput[]
    createMany?: SupplierCreditsCreateManyCreatedByInputEnvelope
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
  }

  export type MedicinesUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MedicinesCreateWithoutCreatedByInput, MedicinesUncheckedCreateWithoutCreatedByInput> | MedicinesCreateWithoutCreatedByInput[] | MedicinesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCreatedByInput | MedicinesCreateOrConnectWithoutCreatedByInput[]
    createMany?: MedicinesCreateManyCreatedByInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CustomerCreditCreateWithoutCreatedByInput, CustomerCreditUncheckedCreateWithoutCreatedByInput> | CustomerCreditCreateWithoutCreatedByInput[] | CustomerCreditUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCreatedByInput | CustomerCreditCreateOrConnectWithoutCreatedByInput[]
    createMany?: CustomerCreditCreateManyCreatedByInputEnvelope
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
  }

  export type CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CustomerCreditCreateWithoutUpdatedByInput, CustomerCreditUncheckedCreateWithoutUpdatedByInput> | CustomerCreditCreateWithoutUpdatedByInput[] | CustomerCreditUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutUpdatedByInput | CustomerCreditCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CustomerCreditCreateManyUpdatedByInputEnvelope
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
  }

  export type SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SupplierCreditsCreateWithoutUpdatedByInput, SupplierCreditsUncheckedCreateWithoutUpdatedByInput> | SupplierCreditsCreateWithoutUpdatedByInput[] | SupplierCreditsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutUpdatedByInput | SupplierCreditsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SupplierCreditsCreateManyUpdatedByInputEnvelope
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
  }

  export type SalesUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SalesCreateWithoutCreatedByInput, SalesUncheckedCreateWithoutCreatedByInput> | SalesCreateWithoutCreatedByInput[] | SalesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCreatedByInput | SalesCreateOrConnectWithoutCreatedByInput[]
    createMany?: SalesCreateManyCreatedByInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type SalesUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SalesCreateWithoutUpdatedByInput, SalesUncheckedCreateWithoutUpdatedByInput> | SalesCreateWithoutUpdatedByInput[] | SalesUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutUpdatedByInput | SalesCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SalesCreateManyUpdatedByInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type MembersUpdateOneWithoutUserNestedInput = {
    create?: XOR<MembersCreateWithoutUserInput, MembersUncheckedCreateWithoutUserInput>
    connectOrCreate?: MembersCreateOrConnectWithoutUserInput
    upsert?: MembersUpsertWithoutUserInput
    disconnect?: MembersWhereInput | boolean
    delete?: MembersWhereInput | boolean
    connect?: MembersWhereUniqueInput
    update?: XOR<XOR<MembersUpdateToOneWithWhereWithoutUserInput, MembersUpdateWithoutUserInput>, MembersUncheckedUpdateWithoutUserInput>
  }

  export type SupplierCreditsUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SupplierCreditsCreateWithoutCreatedByInput, SupplierCreditsUncheckedCreateWithoutCreatedByInput> | SupplierCreditsCreateWithoutCreatedByInput[] | SupplierCreditsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutCreatedByInput | SupplierCreditsCreateOrConnectWithoutCreatedByInput[]
    upsert?: SupplierCreditsUpsertWithWhereUniqueWithoutCreatedByInput | SupplierCreditsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SupplierCreditsCreateManyCreatedByInputEnvelope
    set?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    disconnect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    delete?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    update?: SupplierCreditsUpdateWithWhereUniqueWithoutCreatedByInput | SupplierCreditsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SupplierCreditsUpdateManyWithWhereWithoutCreatedByInput | SupplierCreditsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
  }

  export type MedicinesUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MedicinesCreateWithoutCreatedByInput, MedicinesUncheckedCreateWithoutCreatedByInput> | MedicinesCreateWithoutCreatedByInput[] | MedicinesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCreatedByInput | MedicinesCreateOrConnectWithoutCreatedByInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutCreatedByInput | MedicinesUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MedicinesCreateManyCreatedByInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutCreatedByInput | MedicinesUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutCreatedByInput | MedicinesUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type CustomerCreditUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CustomerCreditCreateWithoutCreatedByInput, CustomerCreditUncheckedCreateWithoutCreatedByInput> | CustomerCreditCreateWithoutCreatedByInput[] | CustomerCreditUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCreatedByInput | CustomerCreditCreateOrConnectWithoutCreatedByInput[]
    upsert?: CustomerCreditUpsertWithWhereUniqueWithoutCreatedByInput | CustomerCreditUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CustomerCreditCreateManyCreatedByInputEnvelope
    set?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    disconnect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    delete?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    update?: CustomerCreditUpdateWithWhereUniqueWithoutCreatedByInput | CustomerCreditUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CustomerCreditUpdateManyWithWhereWithoutCreatedByInput | CustomerCreditUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
  }

  export type CustomerCreditUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CustomerCreditCreateWithoutUpdatedByInput, CustomerCreditUncheckedCreateWithoutUpdatedByInput> | CustomerCreditCreateWithoutUpdatedByInput[] | CustomerCreditUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutUpdatedByInput | CustomerCreditCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CustomerCreditUpsertWithWhereUniqueWithoutUpdatedByInput | CustomerCreditUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CustomerCreditCreateManyUpdatedByInputEnvelope
    set?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    disconnect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    delete?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    update?: CustomerCreditUpdateWithWhereUniqueWithoutUpdatedByInput | CustomerCreditUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CustomerCreditUpdateManyWithWhereWithoutUpdatedByInput | CustomerCreditUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
  }

  export type SupplierCreditsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SupplierCreditsCreateWithoutUpdatedByInput, SupplierCreditsUncheckedCreateWithoutUpdatedByInput> | SupplierCreditsCreateWithoutUpdatedByInput[] | SupplierCreditsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutUpdatedByInput | SupplierCreditsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SupplierCreditsUpsertWithWhereUniqueWithoutUpdatedByInput | SupplierCreditsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SupplierCreditsCreateManyUpdatedByInputEnvelope
    set?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    disconnect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    delete?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    update?: SupplierCreditsUpdateWithWhereUniqueWithoutUpdatedByInput | SupplierCreditsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SupplierCreditsUpdateManyWithWhereWithoutUpdatedByInput | SupplierCreditsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
  }

  export type SalesUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SalesCreateWithoutCreatedByInput, SalesUncheckedCreateWithoutCreatedByInput> | SalesCreateWithoutCreatedByInput[] | SalesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCreatedByInput | SalesCreateOrConnectWithoutCreatedByInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutCreatedByInput | SalesUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SalesCreateManyCreatedByInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutCreatedByInput | SalesUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutCreatedByInput | SalesUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type SalesUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SalesCreateWithoutUpdatedByInput, SalesUncheckedCreateWithoutUpdatedByInput> | SalesCreateWithoutUpdatedByInput[] | SalesUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutUpdatedByInput | SalesCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutUpdatedByInput | SalesUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SalesCreateManyUpdatedByInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutUpdatedByInput | SalesUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutUpdatedByInput | SalesUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type MembersUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<MembersCreateWithoutUserInput, MembersUncheckedCreateWithoutUserInput>
    connectOrCreate?: MembersCreateOrConnectWithoutUserInput
    upsert?: MembersUpsertWithoutUserInput
    disconnect?: MembersWhereInput | boolean
    delete?: MembersWhereInput | boolean
    connect?: MembersWhereUniqueInput
    update?: XOR<XOR<MembersUpdateToOneWithWhereWithoutUserInput, MembersUpdateWithoutUserInput>, MembersUncheckedUpdateWithoutUserInput>
  }

  export type SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SupplierCreditsCreateWithoutCreatedByInput, SupplierCreditsUncheckedCreateWithoutCreatedByInput> | SupplierCreditsCreateWithoutCreatedByInput[] | SupplierCreditsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutCreatedByInput | SupplierCreditsCreateOrConnectWithoutCreatedByInput[]
    upsert?: SupplierCreditsUpsertWithWhereUniqueWithoutCreatedByInput | SupplierCreditsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SupplierCreditsCreateManyCreatedByInputEnvelope
    set?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    disconnect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    delete?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    update?: SupplierCreditsUpdateWithWhereUniqueWithoutCreatedByInput | SupplierCreditsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SupplierCreditsUpdateManyWithWhereWithoutCreatedByInput | SupplierCreditsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
  }

  export type MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MedicinesCreateWithoutCreatedByInput, MedicinesUncheckedCreateWithoutCreatedByInput> | MedicinesCreateWithoutCreatedByInput[] | MedicinesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCreatedByInput | MedicinesCreateOrConnectWithoutCreatedByInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutCreatedByInput | MedicinesUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MedicinesCreateManyCreatedByInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutCreatedByInput | MedicinesUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutCreatedByInput | MedicinesUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CustomerCreditCreateWithoutCreatedByInput, CustomerCreditUncheckedCreateWithoutCreatedByInput> | CustomerCreditCreateWithoutCreatedByInput[] | CustomerCreditUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCreatedByInput | CustomerCreditCreateOrConnectWithoutCreatedByInput[]
    upsert?: CustomerCreditUpsertWithWhereUniqueWithoutCreatedByInput | CustomerCreditUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CustomerCreditCreateManyCreatedByInputEnvelope
    set?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    disconnect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    delete?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    update?: CustomerCreditUpdateWithWhereUniqueWithoutCreatedByInput | CustomerCreditUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CustomerCreditUpdateManyWithWhereWithoutCreatedByInput | CustomerCreditUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
  }

  export type CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CustomerCreditCreateWithoutUpdatedByInput, CustomerCreditUncheckedCreateWithoutUpdatedByInput> | CustomerCreditCreateWithoutUpdatedByInput[] | CustomerCreditUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutUpdatedByInput | CustomerCreditCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CustomerCreditUpsertWithWhereUniqueWithoutUpdatedByInput | CustomerCreditUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CustomerCreditCreateManyUpdatedByInputEnvelope
    set?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    disconnect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    delete?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    update?: CustomerCreditUpdateWithWhereUniqueWithoutUpdatedByInput | CustomerCreditUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CustomerCreditUpdateManyWithWhereWithoutUpdatedByInput | CustomerCreditUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
  }

  export type SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SupplierCreditsCreateWithoutUpdatedByInput, SupplierCreditsUncheckedCreateWithoutUpdatedByInput> | SupplierCreditsCreateWithoutUpdatedByInput[] | SupplierCreditsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutUpdatedByInput | SupplierCreditsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SupplierCreditsUpsertWithWhereUniqueWithoutUpdatedByInput | SupplierCreditsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SupplierCreditsCreateManyUpdatedByInputEnvelope
    set?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    disconnect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    delete?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    update?: SupplierCreditsUpdateWithWhereUniqueWithoutUpdatedByInput | SupplierCreditsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SupplierCreditsUpdateManyWithWhereWithoutUpdatedByInput | SupplierCreditsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
  }

  export type SalesUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SalesCreateWithoutCreatedByInput, SalesUncheckedCreateWithoutCreatedByInput> | SalesCreateWithoutCreatedByInput[] | SalesUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCreatedByInput | SalesCreateOrConnectWithoutCreatedByInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutCreatedByInput | SalesUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SalesCreateManyCreatedByInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutCreatedByInput | SalesUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutCreatedByInput | SalesUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type SalesUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SalesCreateWithoutUpdatedByInput, SalesUncheckedCreateWithoutUpdatedByInput> | SalesCreateWithoutUpdatedByInput[] | SalesUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutUpdatedByInput | SalesCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutUpdatedByInput | SalesUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SalesCreateManyUpdatedByInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutUpdatedByInput | SalesUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutUpdatedByInput | SalesUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutMemberInput = {
    create?: XOR<UsersCreateWithoutMemberInput, UsersUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMemberInput
    connect?: UsersWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsersUpdateOneRequiredWithoutMemberNestedInput = {
    create?: XOR<UsersCreateWithoutMemberInput, UsersUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMemberInput
    upsert?: UsersUpsertWithoutMemberInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMemberInput, UsersUpdateWithoutMemberInput>, UsersUncheckedUpdateWithoutMemberInput>
  }

  export type SupplierCreditsCreateNestedManyWithoutSupplierInput = {
    create?: XOR<SupplierCreditsCreateWithoutSupplierInput, SupplierCreditsUncheckedCreateWithoutSupplierInput> | SupplierCreditsCreateWithoutSupplierInput[] | SupplierCreditsUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutSupplierInput | SupplierCreditsCreateOrConnectWithoutSupplierInput[]
    createMany?: SupplierCreditsCreateManySupplierInputEnvelope
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
  }

  export type MedicinesCreateNestedManyWithoutSupplierInput = {
    create?: XOR<MedicinesCreateWithoutSupplierInput, MedicinesUncheckedCreateWithoutSupplierInput> | MedicinesCreateWithoutSupplierInput[] | MedicinesUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutSupplierInput | MedicinesCreateOrConnectWithoutSupplierInput[]
    createMany?: MedicinesCreateManySupplierInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type SupplierCreditsUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<SupplierCreditsCreateWithoutSupplierInput, SupplierCreditsUncheckedCreateWithoutSupplierInput> | SupplierCreditsCreateWithoutSupplierInput[] | SupplierCreditsUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutSupplierInput | SupplierCreditsCreateOrConnectWithoutSupplierInput[]
    createMany?: SupplierCreditsCreateManySupplierInputEnvelope
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
  }

  export type MedicinesUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<MedicinesCreateWithoutSupplierInput, MedicinesUncheckedCreateWithoutSupplierInput> | MedicinesCreateWithoutSupplierInput[] | MedicinesUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutSupplierInput | MedicinesCreateOrConnectWithoutSupplierInput[]
    createMany?: MedicinesCreateManySupplierInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type SupplierCreditsUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<SupplierCreditsCreateWithoutSupplierInput, SupplierCreditsUncheckedCreateWithoutSupplierInput> | SupplierCreditsCreateWithoutSupplierInput[] | SupplierCreditsUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutSupplierInput | SupplierCreditsCreateOrConnectWithoutSupplierInput[]
    upsert?: SupplierCreditsUpsertWithWhereUniqueWithoutSupplierInput | SupplierCreditsUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: SupplierCreditsCreateManySupplierInputEnvelope
    set?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    disconnect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    delete?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    update?: SupplierCreditsUpdateWithWhereUniqueWithoutSupplierInput | SupplierCreditsUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: SupplierCreditsUpdateManyWithWhereWithoutSupplierInput | SupplierCreditsUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
  }

  export type MedicinesUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<MedicinesCreateWithoutSupplierInput, MedicinesUncheckedCreateWithoutSupplierInput> | MedicinesCreateWithoutSupplierInput[] | MedicinesUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutSupplierInput | MedicinesCreateOrConnectWithoutSupplierInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutSupplierInput | MedicinesUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: MedicinesCreateManySupplierInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutSupplierInput | MedicinesUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutSupplierInput | MedicinesUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type SupplierCreditsUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<SupplierCreditsCreateWithoutSupplierInput, SupplierCreditsUncheckedCreateWithoutSupplierInput> | SupplierCreditsCreateWithoutSupplierInput[] | SupplierCreditsUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierCreditsCreateOrConnectWithoutSupplierInput | SupplierCreditsCreateOrConnectWithoutSupplierInput[]
    upsert?: SupplierCreditsUpsertWithWhereUniqueWithoutSupplierInput | SupplierCreditsUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: SupplierCreditsCreateManySupplierInputEnvelope
    set?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    disconnect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    delete?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    connect?: SupplierCreditsWhereUniqueInput | SupplierCreditsWhereUniqueInput[]
    update?: SupplierCreditsUpdateWithWhereUniqueWithoutSupplierInput | SupplierCreditsUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: SupplierCreditsUpdateManyWithWhereWithoutSupplierInput | SupplierCreditsUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
  }

  export type MedicinesUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<MedicinesCreateWithoutSupplierInput, MedicinesUncheckedCreateWithoutSupplierInput> | MedicinesCreateWithoutSupplierInput[] | MedicinesUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutSupplierInput | MedicinesCreateOrConnectWithoutSupplierInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutSupplierInput | MedicinesUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: MedicinesCreateManySupplierInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutSupplierInput | MedicinesUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutSupplierInput | MedicinesUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type MedicinesCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MedicinesCreateWithoutCategoryInput, MedicinesUncheckedCreateWithoutCategoryInput> | MedicinesCreateWithoutCategoryInput[] | MedicinesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCategoryInput | MedicinesCreateOrConnectWithoutCategoryInput[]
    createMany?: MedicinesCreateManyCategoryInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type MedicinesUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MedicinesCreateWithoutCategoryInput, MedicinesUncheckedCreateWithoutCategoryInput> | MedicinesCreateWithoutCategoryInput[] | MedicinesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCategoryInput | MedicinesCreateOrConnectWithoutCategoryInput[]
    createMany?: MedicinesCreateManyCategoryInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type MedicinesUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MedicinesCreateWithoutCategoryInput, MedicinesUncheckedCreateWithoutCategoryInput> | MedicinesCreateWithoutCategoryInput[] | MedicinesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCategoryInput | MedicinesCreateOrConnectWithoutCategoryInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutCategoryInput | MedicinesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MedicinesCreateManyCategoryInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutCategoryInput | MedicinesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutCategoryInput | MedicinesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type MedicinesUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MedicinesCreateWithoutCategoryInput, MedicinesUncheckedCreateWithoutCategoryInput> | MedicinesCreateWithoutCategoryInput[] | MedicinesUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutCategoryInput | MedicinesCreateOrConnectWithoutCategoryInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutCategoryInput | MedicinesUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MedicinesCreateManyCategoryInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutCategoryInput | MedicinesUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutCategoryInput | MedicinesUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type MedicinesCreateNestedManyWithoutDosage_formInput = {
    create?: XOR<MedicinesCreateWithoutDosage_formInput, MedicinesUncheckedCreateWithoutDosage_formInput> | MedicinesCreateWithoutDosage_formInput[] | MedicinesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutDosage_formInput | MedicinesCreateOrConnectWithoutDosage_formInput[]
    createMany?: MedicinesCreateManyDosage_formInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type SalesCreateNestedManyWithoutDosage_formInput = {
    create?: XOR<SalesCreateWithoutDosage_formInput, SalesUncheckedCreateWithoutDosage_formInput> | SalesCreateWithoutDosage_formInput[] | SalesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutDosage_formInput | SalesCreateOrConnectWithoutDosage_formInput[]
    createMany?: SalesCreateManyDosage_formInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type ReturnsCreateNestedManyWithoutDosage_formInput = {
    create?: XOR<ReturnsCreateWithoutDosage_formInput, ReturnsUncheckedCreateWithoutDosage_formInput> | ReturnsCreateWithoutDosage_formInput[] | ReturnsUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutDosage_formInput | ReturnsCreateOrConnectWithoutDosage_formInput[]
    createMany?: ReturnsCreateManyDosage_formInputEnvelope
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
  }

  export type MedicinesUncheckedCreateNestedManyWithoutDosage_formInput = {
    create?: XOR<MedicinesCreateWithoutDosage_formInput, MedicinesUncheckedCreateWithoutDosage_formInput> | MedicinesCreateWithoutDosage_formInput[] | MedicinesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutDosage_formInput | MedicinesCreateOrConnectWithoutDosage_formInput[]
    createMany?: MedicinesCreateManyDosage_formInputEnvelope
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
  }

  export type SalesUncheckedCreateNestedManyWithoutDosage_formInput = {
    create?: XOR<SalesCreateWithoutDosage_formInput, SalesUncheckedCreateWithoutDosage_formInput> | SalesCreateWithoutDosage_formInput[] | SalesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutDosage_formInput | SalesCreateOrConnectWithoutDosage_formInput[]
    createMany?: SalesCreateManyDosage_formInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type ReturnsUncheckedCreateNestedManyWithoutDosage_formInput = {
    create?: XOR<ReturnsCreateWithoutDosage_formInput, ReturnsUncheckedCreateWithoutDosage_formInput> | ReturnsCreateWithoutDosage_formInput[] | ReturnsUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutDosage_formInput | ReturnsCreateOrConnectWithoutDosage_formInput[]
    createMany?: ReturnsCreateManyDosage_formInputEnvelope
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
  }

  export type MedicinesUpdateManyWithoutDosage_formNestedInput = {
    create?: XOR<MedicinesCreateWithoutDosage_formInput, MedicinesUncheckedCreateWithoutDosage_formInput> | MedicinesCreateWithoutDosage_formInput[] | MedicinesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutDosage_formInput | MedicinesCreateOrConnectWithoutDosage_formInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutDosage_formInput | MedicinesUpsertWithWhereUniqueWithoutDosage_formInput[]
    createMany?: MedicinesCreateManyDosage_formInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutDosage_formInput | MedicinesUpdateWithWhereUniqueWithoutDosage_formInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutDosage_formInput | MedicinesUpdateManyWithWhereWithoutDosage_formInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type SalesUpdateManyWithoutDosage_formNestedInput = {
    create?: XOR<SalesCreateWithoutDosage_formInput, SalesUncheckedCreateWithoutDosage_formInput> | SalesCreateWithoutDosage_formInput[] | SalesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutDosage_formInput | SalesCreateOrConnectWithoutDosage_formInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutDosage_formInput | SalesUpsertWithWhereUniqueWithoutDosage_formInput[]
    createMany?: SalesCreateManyDosage_formInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutDosage_formInput | SalesUpdateWithWhereUniqueWithoutDosage_formInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutDosage_formInput | SalesUpdateManyWithWhereWithoutDosage_formInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type ReturnsUpdateManyWithoutDosage_formNestedInput = {
    create?: XOR<ReturnsCreateWithoutDosage_formInput, ReturnsUncheckedCreateWithoutDosage_formInput> | ReturnsCreateWithoutDosage_formInput[] | ReturnsUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutDosage_formInput | ReturnsCreateOrConnectWithoutDosage_formInput[]
    upsert?: ReturnsUpsertWithWhereUniqueWithoutDosage_formInput | ReturnsUpsertWithWhereUniqueWithoutDosage_formInput[]
    createMany?: ReturnsCreateManyDosage_formInputEnvelope
    set?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    disconnect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    delete?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    update?: ReturnsUpdateWithWhereUniqueWithoutDosage_formInput | ReturnsUpdateWithWhereUniqueWithoutDosage_formInput[]
    updateMany?: ReturnsUpdateManyWithWhereWithoutDosage_formInput | ReturnsUpdateManyWithWhereWithoutDosage_formInput[]
    deleteMany?: ReturnsScalarWhereInput | ReturnsScalarWhereInput[]
  }

  export type MedicinesUncheckedUpdateManyWithoutDosage_formNestedInput = {
    create?: XOR<MedicinesCreateWithoutDosage_formInput, MedicinesUncheckedCreateWithoutDosage_formInput> | MedicinesCreateWithoutDosage_formInput[] | MedicinesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: MedicinesCreateOrConnectWithoutDosage_formInput | MedicinesCreateOrConnectWithoutDosage_formInput[]
    upsert?: MedicinesUpsertWithWhereUniqueWithoutDosage_formInput | MedicinesUpsertWithWhereUniqueWithoutDosage_formInput[]
    createMany?: MedicinesCreateManyDosage_formInputEnvelope
    set?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    disconnect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    delete?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    connect?: MedicinesWhereUniqueInput | MedicinesWhereUniqueInput[]
    update?: MedicinesUpdateWithWhereUniqueWithoutDosage_formInput | MedicinesUpdateWithWhereUniqueWithoutDosage_formInput[]
    updateMany?: MedicinesUpdateManyWithWhereWithoutDosage_formInput | MedicinesUpdateManyWithWhereWithoutDosage_formInput[]
    deleteMany?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
  }

  export type SalesUncheckedUpdateManyWithoutDosage_formNestedInput = {
    create?: XOR<SalesCreateWithoutDosage_formInput, SalesUncheckedCreateWithoutDosage_formInput> | SalesCreateWithoutDosage_formInput[] | SalesUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutDosage_formInput | SalesCreateOrConnectWithoutDosage_formInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutDosage_formInput | SalesUpsertWithWhereUniqueWithoutDosage_formInput[]
    createMany?: SalesCreateManyDosage_formInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutDosage_formInput | SalesUpdateWithWhereUniqueWithoutDosage_formInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutDosage_formInput | SalesUpdateManyWithWhereWithoutDosage_formInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type ReturnsUncheckedUpdateManyWithoutDosage_formNestedInput = {
    create?: XOR<ReturnsCreateWithoutDosage_formInput, ReturnsUncheckedCreateWithoutDosage_formInput> | ReturnsCreateWithoutDosage_formInput[] | ReturnsUncheckedCreateWithoutDosage_formInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutDosage_formInput | ReturnsCreateOrConnectWithoutDosage_formInput[]
    upsert?: ReturnsUpsertWithWhereUniqueWithoutDosage_formInput | ReturnsUpsertWithWhereUniqueWithoutDosage_formInput[]
    createMany?: ReturnsCreateManyDosage_formInputEnvelope
    set?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    disconnect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    delete?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    update?: ReturnsUpdateWithWhereUniqueWithoutDosage_formInput | ReturnsUpdateWithWhereUniqueWithoutDosage_formInput[]
    updateMany?: ReturnsUpdateManyWithWhereWithoutDosage_formInput | ReturnsUpdateManyWithWhereWithoutDosage_formInput[]
    deleteMany?: ReturnsScalarWhereInput | ReturnsScalarWhereInput[]
  }

  export type CategoriesCreateNestedOneWithoutMedicinesInput = {
    create?: XOR<CategoriesCreateWithoutMedicinesInput, CategoriesUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutMedicinesInput
    connect?: CategoriesWhereUniqueInput
  }

  export type DosageFormsCreateNestedOneWithoutMedicinesInput = {
    create?: XOR<DosageFormsCreateWithoutMedicinesInput, DosageFormsUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: DosageFormsCreateOrConnectWithoutMedicinesInput
    connect?: DosageFormsWhereUniqueInput
  }

  export type SuppliersCreateNestedOneWithoutMedicinesInput = {
    create?: XOR<SuppliersCreateWithoutMedicinesInput, SuppliersUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: SuppliersCreateOrConnectWithoutMedicinesInput
    connect?: SuppliersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutMedicinesInput = {
    create?: XOR<UsersCreateWithoutMedicinesInput, UsersUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMedicinesInput
    connect?: UsersWhereUniqueInput
  }

  export type SalesCreateNestedManyWithoutMedicineInput = {
    create?: XOR<SalesCreateWithoutMedicineInput, SalesUncheckedCreateWithoutMedicineInput> | SalesCreateWithoutMedicineInput[] | SalesUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutMedicineInput | SalesCreateOrConnectWithoutMedicineInput[]
    createMany?: SalesCreateManyMedicineInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type ReturnsCreateNestedManyWithoutMedicineInput = {
    create?: XOR<ReturnsCreateWithoutMedicineInput, ReturnsUncheckedCreateWithoutMedicineInput> | ReturnsCreateWithoutMedicineInput[] | ReturnsUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutMedicineInput | ReturnsCreateOrConnectWithoutMedicineInput[]
    createMany?: ReturnsCreateManyMedicineInputEnvelope
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
  }

  export type SalesUncheckedCreateNestedManyWithoutMedicineInput = {
    create?: XOR<SalesCreateWithoutMedicineInput, SalesUncheckedCreateWithoutMedicineInput> | SalesCreateWithoutMedicineInput[] | SalesUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutMedicineInput | SalesCreateOrConnectWithoutMedicineInput[]
    createMany?: SalesCreateManyMedicineInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type ReturnsUncheckedCreateNestedManyWithoutMedicineInput = {
    create?: XOR<ReturnsCreateWithoutMedicineInput, ReturnsUncheckedCreateWithoutMedicineInput> | ReturnsCreateWithoutMedicineInput[] | ReturnsUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutMedicineInput | ReturnsCreateOrConnectWithoutMedicineInput[]
    createMany?: ReturnsCreateManyMedicineInputEnvelope
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type CategoriesUpdateOneRequiredWithoutMedicinesNestedInput = {
    create?: XOR<CategoriesCreateWithoutMedicinesInput, CategoriesUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutMedicinesInput
    upsert?: CategoriesUpsertWithoutMedicinesInput
    connect?: CategoriesWhereUniqueInput
    update?: XOR<XOR<CategoriesUpdateToOneWithWhereWithoutMedicinesInput, CategoriesUpdateWithoutMedicinesInput>, CategoriesUncheckedUpdateWithoutMedicinesInput>
  }

  export type DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput = {
    create?: XOR<DosageFormsCreateWithoutMedicinesInput, DosageFormsUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: DosageFormsCreateOrConnectWithoutMedicinesInput
    upsert?: DosageFormsUpsertWithoutMedicinesInput
    connect?: DosageFormsWhereUniqueInput
    update?: XOR<XOR<DosageFormsUpdateToOneWithWhereWithoutMedicinesInput, DosageFormsUpdateWithoutMedicinesInput>, DosageFormsUncheckedUpdateWithoutMedicinesInput>
  }

  export type SuppliersUpdateOneRequiredWithoutMedicinesNestedInput = {
    create?: XOR<SuppliersCreateWithoutMedicinesInput, SuppliersUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: SuppliersCreateOrConnectWithoutMedicinesInput
    upsert?: SuppliersUpsertWithoutMedicinesInput
    connect?: SuppliersWhereUniqueInput
    update?: XOR<XOR<SuppliersUpdateToOneWithWhereWithoutMedicinesInput, SuppliersUpdateWithoutMedicinesInput>, SuppliersUncheckedUpdateWithoutMedicinesInput>
  }

  export type UsersUpdateOneRequiredWithoutMedicinesNestedInput = {
    create?: XOR<UsersCreateWithoutMedicinesInput, UsersUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMedicinesInput
    upsert?: UsersUpsertWithoutMedicinesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMedicinesInput, UsersUpdateWithoutMedicinesInput>, UsersUncheckedUpdateWithoutMedicinesInput>
  }

  export type SalesUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<SalesCreateWithoutMedicineInput, SalesUncheckedCreateWithoutMedicineInput> | SalesCreateWithoutMedicineInput[] | SalesUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutMedicineInput | SalesCreateOrConnectWithoutMedicineInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutMedicineInput | SalesUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: SalesCreateManyMedicineInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutMedicineInput | SalesUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutMedicineInput | SalesUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type ReturnsUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<ReturnsCreateWithoutMedicineInput, ReturnsUncheckedCreateWithoutMedicineInput> | ReturnsCreateWithoutMedicineInput[] | ReturnsUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutMedicineInput | ReturnsCreateOrConnectWithoutMedicineInput[]
    upsert?: ReturnsUpsertWithWhereUniqueWithoutMedicineInput | ReturnsUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: ReturnsCreateManyMedicineInputEnvelope
    set?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    disconnect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    delete?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    update?: ReturnsUpdateWithWhereUniqueWithoutMedicineInput | ReturnsUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: ReturnsUpdateManyWithWhereWithoutMedicineInput | ReturnsUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: ReturnsScalarWhereInput | ReturnsScalarWhereInput[]
  }

  export type SalesUncheckedUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<SalesCreateWithoutMedicineInput, SalesUncheckedCreateWithoutMedicineInput> | SalesCreateWithoutMedicineInput[] | SalesUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutMedicineInput | SalesCreateOrConnectWithoutMedicineInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutMedicineInput | SalesUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: SalesCreateManyMedicineInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutMedicineInput | SalesUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutMedicineInput | SalesUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type ReturnsUncheckedUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<ReturnsCreateWithoutMedicineInput, ReturnsUncheckedCreateWithoutMedicineInput> | ReturnsCreateWithoutMedicineInput[] | ReturnsUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: ReturnsCreateOrConnectWithoutMedicineInput | ReturnsCreateOrConnectWithoutMedicineInput[]
    upsert?: ReturnsUpsertWithWhereUniqueWithoutMedicineInput | ReturnsUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: ReturnsCreateManyMedicineInputEnvelope
    set?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    disconnect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    delete?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    connect?: ReturnsWhereUniqueInput | ReturnsWhereUniqueInput[]
    update?: ReturnsUpdateWithWhereUniqueWithoutMedicineInput | ReturnsUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: ReturnsUpdateManyWithWhereWithoutMedicineInput | ReturnsUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: ReturnsScalarWhereInput | ReturnsScalarWhereInput[]
  }

  export type DosageFormsCreateNestedOneWithoutSalesInput = {
    create?: XOR<DosageFormsCreateWithoutSalesInput, DosageFormsUncheckedCreateWithoutSalesInput>
    connectOrCreate?: DosageFormsCreateOrConnectWithoutSalesInput
    connect?: DosageFormsWhereUniqueInput
  }

  export type CustomersCreateNestedOneWithoutSalesInput = {
    create?: XOR<CustomersCreateWithoutSalesInput, CustomersUncheckedCreateWithoutSalesInput>
    connectOrCreate?: CustomersCreateOrConnectWithoutSalesInput
    connect?: CustomersWhereUniqueInput
  }

  export type MedicinesCreateNestedOneWithoutSalesInput = {
    create?: XOR<MedicinesCreateWithoutSalesInput, MedicinesUncheckedCreateWithoutSalesInput>
    connectOrCreate?: MedicinesCreateOrConnectWithoutSalesInput
    connect?: MedicinesWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutCreatedSalesInput = {
    create?: XOR<UsersCreateWithoutCreatedSalesInput, UsersUncheckedCreateWithoutCreatedSalesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCreatedSalesInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutUpdatedSalesInput = {
    create?: XOR<UsersCreateWithoutUpdatedSalesInput, UsersUncheckedCreateWithoutUpdatedSalesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUpdatedSalesInput
    connect?: UsersWhereUniqueInput
  }

  export type DosageFormsUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<DosageFormsCreateWithoutSalesInput, DosageFormsUncheckedCreateWithoutSalesInput>
    connectOrCreate?: DosageFormsCreateOrConnectWithoutSalesInput
    upsert?: DosageFormsUpsertWithoutSalesInput
    connect?: DosageFormsWhereUniqueInput
    update?: XOR<XOR<DosageFormsUpdateToOneWithWhereWithoutSalesInput, DosageFormsUpdateWithoutSalesInput>, DosageFormsUncheckedUpdateWithoutSalesInput>
  }

  export type CustomersUpdateOneWithoutSalesNestedInput = {
    create?: XOR<CustomersCreateWithoutSalesInput, CustomersUncheckedCreateWithoutSalesInput>
    connectOrCreate?: CustomersCreateOrConnectWithoutSalesInput
    upsert?: CustomersUpsertWithoutSalesInput
    disconnect?: CustomersWhereInput | boolean
    delete?: CustomersWhereInput | boolean
    connect?: CustomersWhereUniqueInput
    update?: XOR<XOR<CustomersUpdateToOneWithWhereWithoutSalesInput, CustomersUpdateWithoutSalesInput>, CustomersUncheckedUpdateWithoutSalesInput>
  }

  export type MedicinesUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<MedicinesCreateWithoutSalesInput, MedicinesUncheckedCreateWithoutSalesInput>
    connectOrCreate?: MedicinesCreateOrConnectWithoutSalesInput
    upsert?: MedicinesUpsertWithoutSalesInput
    connect?: MedicinesWhereUniqueInput
    update?: XOR<XOR<MedicinesUpdateToOneWithWhereWithoutSalesInput, MedicinesUpdateWithoutSalesInput>, MedicinesUncheckedUpdateWithoutSalesInput>
  }

  export type UsersUpdateOneRequiredWithoutCreatedSalesNestedInput = {
    create?: XOR<UsersCreateWithoutCreatedSalesInput, UsersUncheckedCreateWithoutCreatedSalesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCreatedSalesInput
    upsert?: UsersUpsertWithoutCreatedSalesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCreatedSalesInput, UsersUpdateWithoutCreatedSalesInput>, UsersUncheckedUpdateWithoutCreatedSalesInput>
  }

  export type UsersUpdateOneWithoutUpdatedSalesNestedInput = {
    create?: XOR<UsersCreateWithoutUpdatedSalesInput, UsersUncheckedCreateWithoutUpdatedSalesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUpdatedSalesInput
    upsert?: UsersUpsertWithoutUpdatedSalesInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUpdatedSalesInput, UsersUpdateWithoutUpdatedSalesInput>, UsersUncheckedUpdateWithoutUpdatedSalesInput>
  }

  export type NullableEnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod | null
  }

  export type DosageFormsCreateNestedOneWithoutReturnsInput = {
    create?: XOR<DosageFormsCreateWithoutReturnsInput, DosageFormsUncheckedCreateWithoutReturnsInput>
    connectOrCreate?: DosageFormsCreateOrConnectWithoutReturnsInput
    connect?: DosageFormsWhereUniqueInput
  }

  export type MedicinesCreateNestedOneWithoutReturnsInput = {
    create?: XOR<MedicinesCreateWithoutReturnsInput, MedicinesUncheckedCreateWithoutReturnsInput>
    connectOrCreate?: MedicinesCreateOrConnectWithoutReturnsInput
    connect?: MedicinesWhereUniqueInput
  }

  export type DosageFormsUpdateOneRequiredWithoutReturnsNestedInput = {
    create?: XOR<DosageFormsCreateWithoutReturnsInput, DosageFormsUncheckedCreateWithoutReturnsInput>
    connectOrCreate?: DosageFormsCreateOrConnectWithoutReturnsInput
    upsert?: DosageFormsUpsertWithoutReturnsInput
    connect?: DosageFormsWhereUniqueInput
    update?: XOR<XOR<DosageFormsUpdateToOneWithWhereWithoutReturnsInput, DosageFormsUpdateWithoutReturnsInput>, DosageFormsUncheckedUpdateWithoutReturnsInput>
  }

  export type MedicinesUpdateOneRequiredWithoutReturnsNestedInput = {
    create?: XOR<MedicinesCreateWithoutReturnsInput, MedicinesUncheckedCreateWithoutReturnsInput>
    connectOrCreate?: MedicinesCreateOrConnectWithoutReturnsInput
    upsert?: MedicinesUpsertWithoutReturnsInput
    connect?: MedicinesWhereUniqueInput
    update?: XOR<XOR<MedicinesUpdateToOneWithWhereWithoutReturnsInput, MedicinesUpdateWithoutReturnsInput>, MedicinesUncheckedUpdateWithoutReturnsInput>
  }

  export type SalesCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SalesCreateWithoutCustomerInput, SalesUncheckedCreateWithoutCustomerInput> | SalesCreateWithoutCustomerInput[] | SalesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCustomerInput | SalesCreateOrConnectWithoutCustomerInput[]
    createMany?: SalesCreateManyCustomerInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type CustomerCreditCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerCreditCreateWithoutCustomerInput, CustomerCreditUncheckedCreateWithoutCustomerInput> | CustomerCreditCreateWithoutCustomerInput[] | CustomerCreditUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCustomerInput | CustomerCreditCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerCreditCreateManyCustomerInputEnvelope
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
  }

  export type SalesUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SalesCreateWithoutCustomerInput, SalesUncheckedCreateWithoutCustomerInput> | SalesCreateWithoutCustomerInput[] | SalesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCustomerInput | SalesCreateOrConnectWithoutCustomerInput[]
    createMany?: SalesCreateManyCustomerInputEnvelope
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
  }

  export type CustomerCreditUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerCreditCreateWithoutCustomerInput, CustomerCreditUncheckedCreateWithoutCustomerInput> | CustomerCreditCreateWithoutCustomerInput[] | CustomerCreditUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCustomerInput | CustomerCreditCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerCreditCreateManyCustomerInputEnvelope
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
  }

  export type SalesUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SalesCreateWithoutCustomerInput, SalesUncheckedCreateWithoutCustomerInput> | SalesCreateWithoutCustomerInput[] | SalesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCustomerInput | SalesCreateOrConnectWithoutCustomerInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutCustomerInput | SalesUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SalesCreateManyCustomerInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutCustomerInput | SalesUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutCustomerInput | SalesUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type CustomerCreditUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerCreditCreateWithoutCustomerInput, CustomerCreditUncheckedCreateWithoutCustomerInput> | CustomerCreditCreateWithoutCustomerInput[] | CustomerCreditUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCustomerInput | CustomerCreditCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerCreditUpsertWithWhereUniqueWithoutCustomerInput | CustomerCreditUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerCreditCreateManyCustomerInputEnvelope
    set?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    disconnect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    delete?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    update?: CustomerCreditUpdateWithWhereUniqueWithoutCustomerInput | CustomerCreditUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerCreditUpdateManyWithWhereWithoutCustomerInput | CustomerCreditUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
  }

  export type SalesUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SalesCreateWithoutCustomerInput, SalesUncheckedCreateWithoutCustomerInput> | SalesCreateWithoutCustomerInput[] | SalesUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SalesCreateOrConnectWithoutCustomerInput | SalesCreateOrConnectWithoutCustomerInput[]
    upsert?: SalesUpsertWithWhereUniqueWithoutCustomerInput | SalesUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SalesCreateManyCustomerInputEnvelope
    set?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    disconnect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    delete?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    connect?: SalesWhereUniqueInput | SalesWhereUniqueInput[]
    update?: SalesUpdateWithWhereUniqueWithoutCustomerInput | SalesUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SalesUpdateManyWithWhereWithoutCustomerInput | SalesUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SalesScalarWhereInput | SalesScalarWhereInput[]
  }

  export type CustomerCreditUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerCreditCreateWithoutCustomerInput, CustomerCreditUncheckedCreateWithoutCustomerInput> | CustomerCreditCreateWithoutCustomerInput[] | CustomerCreditUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerCreditCreateOrConnectWithoutCustomerInput | CustomerCreditCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerCreditUpsertWithWhereUniqueWithoutCustomerInput | CustomerCreditUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerCreditCreateManyCustomerInputEnvelope
    set?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    disconnect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    delete?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    connect?: CustomerCreditWhereUniqueInput | CustomerCreditWhereUniqueInput[]
    update?: CustomerCreditUpdateWithWhereUniqueWithoutCustomerInput | CustomerCreditUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerCreditUpdateManyWithWhereWithoutCustomerInput | CustomerCreditUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
  }

  export type SuppliersCreateNestedOneWithoutSupplierCreditsInput = {
    create?: XOR<SuppliersCreateWithoutSupplierCreditsInput, SuppliersUncheckedCreateWithoutSupplierCreditsInput>
    connectOrCreate?: SuppliersCreateOrConnectWithoutSupplierCreditsInput
    connect?: SuppliersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutCreditsInput = {
    create?: XOR<UsersCreateWithoutCreditsInput, UsersUncheckedCreateWithoutCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCreditsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutUpdatedSupplierCreditsInput = {
    create?: XOR<UsersCreateWithoutUpdatedSupplierCreditsInput, UsersUncheckedCreateWithoutUpdatedSupplierCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUpdatedSupplierCreditsInput
    connect?: UsersWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type SuppliersUpdateOneRequiredWithoutSupplierCreditsNestedInput = {
    create?: XOR<SuppliersCreateWithoutSupplierCreditsInput, SuppliersUncheckedCreateWithoutSupplierCreditsInput>
    connectOrCreate?: SuppliersCreateOrConnectWithoutSupplierCreditsInput
    upsert?: SuppliersUpsertWithoutSupplierCreditsInput
    connect?: SuppliersWhereUniqueInput
    update?: XOR<XOR<SuppliersUpdateToOneWithWhereWithoutSupplierCreditsInput, SuppliersUpdateWithoutSupplierCreditsInput>, SuppliersUncheckedUpdateWithoutSupplierCreditsInput>
  }

  export type UsersUpdateOneRequiredWithoutCreditsNestedInput = {
    create?: XOR<UsersCreateWithoutCreditsInput, UsersUncheckedCreateWithoutCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCreditsInput
    upsert?: UsersUpsertWithoutCreditsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCreditsInput, UsersUpdateWithoutCreditsInput>, UsersUncheckedUpdateWithoutCreditsInput>
  }

  export type UsersUpdateOneWithoutUpdatedSupplierCreditsNestedInput = {
    create?: XOR<UsersCreateWithoutUpdatedSupplierCreditsInput, UsersUncheckedCreateWithoutUpdatedSupplierCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUpdatedSupplierCreditsInput
    upsert?: UsersUpsertWithoutUpdatedSupplierCreditsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUpdatedSupplierCreditsInput, UsersUpdateWithoutUpdatedSupplierCreditsInput>, UsersUncheckedUpdateWithoutUpdatedSupplierCreditsInput>
  }

  export type CustomersCreateNestedOneWithoutCustomerCreditInput = {
    create?: XOR<CustomersCreateWithoutCustomerCreditInput, CustomersUncheckedCreateWithoutCustomerCreditInput>
    connectOrCreate?: CustomersCreateOrConnectWithoutCustomerCreditInput
    connect?: CustomersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutCustomerCreditsInput = {
    create?: XOR<UsersCreateWithoutCustomerCreditsInput, UsersUncheckedCreateWithoutCustomerCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCustomerCreditsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutUpdatedCustomerCreditsInput = {
    create?: XOR<UsersCreateWithoutUpdatedCustomerCreditsInput, UsersUncheckedCreateWithoutUpdatedCustomerCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUpdatedCustomerCreditsInput
    connect?: UsersWhereUniqueInput
  }

  export type CustomersUpdateOneRequiredWithoutCustomerCreditNestedInput = {
    create?: XOR<CustomersCreateWithoutCustomerCreditInput, CustomersUncheckedCreateWithoutCustomerCreditInput>
    connectOrCreate?: CustomersCreateOrConnectWithoutCustomerCreditInput
    upsert?: CustomersUpsertWithoutCustomerCreditInput
    connect?: CustomersWhereUniqueInput
    update?: XOR<XOR<CustomersUpdateToOneWithWhereWithoutCustomerCreditInput, CustomersUpdateWithoutCustomerCreditInput>, CustomersUncheckedUpdateWithoutCustomerCreditInput>
  }

  export type UsersUpdateOneRequiredWithoutCustomerCreditsNestedInput = {
    create?: XOR<UsersCreateWithoutCustomerCreditsInput, UsersUncheckedCreateWithoutCustomerCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCustomerCreditsInput
    upsert?: UsersUpsertWithoutCustomerCreditsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCustomerCreditsInput, UsersUpdateWithoutCustomerCreditsInput>, UsersUncheckedUpdateWithoutCustomerCreditsInput>
  }

  export type UsersUpdateOneWithoutUpdatedCustomerCreditsNestedInput = {
    create?: XOR<UsersCreateWithoutUpdatedCustomerCreditsInput, UsersUncheckedCreateWithoutUpdatedCustomerCreditsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUpdatedCustomerCreditsInput
    upsert?: UsersUpsertWithoutUpdatedCustomerCreditsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUpdatedCustomerCreditsInput, UsersUpdateWithoutUpdatedCustomerCreditsInput>, UsersUncheckedUpdateWithoutUpdatedCustomerCreditsInput>
  }

  export type KeyResultsCreateNestedManyWithoutObjectiveInput = {
    create?: XOR<KeyResultsCreateWithoutObjectiveInput, KeyResultsUncheckedCreateWithoutObjectiveInput> | KeyResultsCreateWithoutObjectiveInput[] | KeyResultsUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultsCreateOrConnectWithoutObjectiveInput | KeyResultsCreateOrConnectWithoutObjectiveInput[]
    createMany?: KeyResultsCreateManyObjectiveInputEnvelope
    connect?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
  }

  export type KeyResultsUncheckedCreateNestedManyWithoutObjectiveInput = {
    create?: XOR<KeyResultsCreateWithoutObjectiveInput, KeyResultsUncheckedCreateWithoutObjectiveInput> | KeyResultsCreateWithoutObjectiveInput[] | KeyResultsUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultsCreateOrConnectWithoutObjectiveInput | KeyResultsCreateOrConnectWithoutObjectiveInput[]
    createMany?: KeyResultsCreateManyObjectiveInputEnvelope
    connect?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
  }

  export type KeyResultsUpdateManyWithoutObjectiveNestedInput = {
    create?: XOR<KeyResultsCreateWithoutObjectiveInput, KeyResultsUncheckedCreateWithoutObjectiveInput> | KeyResultsCreateWithoutObjectiveInput[] | KeyResultsUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultsCreateOrConnectWithoutObjectiveInput | KeyResultsCreateOrConnectWithoutObjectiveInput[]
    upsert?: KeyResultsUpsertWithWhereUniqueWithoutObjectiveInput | KeyResultsUpsertWithWhereUniqueWithoutObjectiveInput[]
    createMany?: KeyResultsCreateManyObjectiveInputEnvelope
    set?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    disconnect?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    delete?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    connect?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    update?: KeyResultsUpdateWithWhereUniqueWithoutObjectiveInput | KeyResultsUpdateWithWhereUniqueWithoutObjectiveInput[]
    updateMany?: KeyResultsUpdateManyWithWhereWithoutObjectiveInput | KeyResultsUpdateManyWithWhereWithoutObjectiveInput[]
    deleteMany?: KeyResultsScalarWhereInput | KeyResultsScalarWhereInput[]
  }

  export type KeyResultsUncheckedUpdateManyWithoutObjectiveNestedInput = {
    create?: XOR<KeyResultsCreateWithoutObjectiveInput, KeyResultsUncheckedCreateWithoutObjectiveInput> | KeyResultsCreateWithoutObjectiveInput[] | KeyResultsUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultsCreateOrConnectWithoutObjectiveInput | KeyResultsCreateOrConnectWithoutObjectiveInput[]
    upsert?: KeyResultsUpsertWithWhereUniqueWithoutObjectiveInput | KeyResultsUpsertWithWhereUniqueWithoutObjectiveInput[]
    createMany?: KeyResultsCreateManyObjectiveInputEnvelope
    set?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    disconnect?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    delete?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    connect?: KeyResultsWhereUniqueInput | KeyResultsWhereUniqueInput[]
    update?: KeyResultsUpdateWithWhereUniqueWithoutObjectiveInput | KeyResultsUpdateWithWhereUniqueWithoutObjectiveInput[]
    updateMany?: KeyResultsUpdateManyWithWhereWithoutObjectiveInput | KeyResultsUpdateManyWithWhereWithoutObjectiveInput[]
    deleteMany?: KeyResultsScalarWhereInput | KeyResultsScalarWhereInput[]
  }

  export type ObjectivesCreateNestedOneWithoutKeyResultsInput = {
    create?: XOR<ObjectivesCreateWithoutKeyResultsInput, ObjectivesUncheckedCreateWithoutKeyResultsInput>
    connectOrCreate?: ObjectivesCreateOrConnectWithoutKeyResultsInput
    connect?: ObjectivesWhereUniqueInput
  }

  export type ObjectivesUpdateOneRequiredWithoutKeyResultsNestedInput = {
    create?: XOR<ObjectivesCreateWithoutKeyResultsInput, ObjectivesUncheckedCreateWithoutKeyResultsInput>
    connectOrCreate?: ObjectivesCreateOrConnectWithoutKeyResultsInput
    upsert?: ObjectivesUpsertWithoutKeyResultsInput
    connect?: ObjectivesWhereUniqueInput
    update?: XOR<XOR<ObjectivesUpdateToOneWithWhereWithoutKeyResultsInput, ObjectivesUpdateWithoutKeyResultsInput>, ObjectivesUncheckedUpdateWithoutKeyResultsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableFilter<$PrismaModel> | $Enums.PaymentMethod | null
  }

  export type NestedEnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type MembersCreateWithoutUserInput = {
    id?: string
    FirstName: string
    LastName: string
    phone?: string | null
    position: string
    address?: string | null
    certificate?: string | null
    Photo?: string | null
    gender?: $Enums.Gender | null
    dob?: Date | string | null
    salary: number
    joining_date: Date | string
    status?: $Enums.Status
    role: $Enums.Role
    biography?: string | null
  }

  export type MembersUncheckedCreateWithoutUserInput = {
    id?: string
    FirstName: string
    LastName: string
    phone?: string | null
    position: string
    address?: string | null
    certificate?: string | null
    Photo?: string | null
    gender?: $Enums.Gender | null
    dob?: Date | string | null
    salary: number
    joining_date: Date | string
    status?: $Enums.Status
    role: $Enums.Role
    biography?: string | null
  }

  export type MembersCreateOrConnectWithoutUserInput = {
    where: MembersWhereUniqueInput
    create: XOR<MembersCreateWithoutUserInput, MembersUncheckedCreateWithoutUserInput>
  }

  export type SupplierCreditsCreateWithoutCreatedByInput = {
    id?: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    supplier: SuppliersCreateNestedOneWithoutSupplierCreditsInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSupplierCreditsInput
  }

  export type SupplierCreditsUncheckedCreateWithoutCreatedByInput = {
    id?: string
    supplier_id: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SupplierCreditsCreateOrConnectWithoutCreatedByInput = {
    where: SupplierCreditsWhereUniqueInput
    create: XOR<SupplierCreditsCreateWithoutCreatedByInput, SupplierCreditsUncheckedCreateWithoutCreatedByInput>
  }

  export type SupplierCreditsCreateManyCreatedByInputEnvelope = {
    data: SupplierCreditsCreateManyCreatedByInput | SupplierCreditsCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type MedicinesCreateWithoutCreatedByInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoriesCreateNestedOneWithoutMedicinesInput
    dosage_form: DosageFormsCreateNestedOneWithoutMedicinesInput
    supplier: SuppliersCreateNestedOneWithoutMedicinesInput
    Sales?: SalesCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateWithoutCreatedByInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Sales?: SalesUncheckedCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesCreateOrConnectWithoutCreatedByInput = {
    where: MedicinesWhereUniqueInput
    create: XOR<MedicinesCreateWithoutCreatedByInput, MedicinesUncheckedCreateWithoutCreatedByInput>
  }

  export type MedicinesCreateManyCreatedByInputEnvelope = {
    data: MedicinesCreateManyCreatedByInput | MedicinesCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreditCreateWithoutCreatedByInput = {
    id?: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    customer: CustomersCreateNestedOneWithoutCustomerCreditInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedCustomerCreditsInput
  }

  export type CustomerCreditUncheckedCreateWithoutCreatedByInput = {
    id?: string
    customer_id: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    updated_by?: string | null
  }

  export type CustomerCreditCreateOrConnectWithoutCreatedByInput = {
    where: CustomerCreditWhereUniqueInput
    create: XOR<CustomerCreditCreateWithoutCreatedByInput, CustomerCreditUncheckedCreateWithoutCreatedByInput>
  }

  export type CustomerCreditCreateManyCreatedByInputEnvelope = {
    data: CustomerCreditCreateManyCreatedByInput | CustomerCreditCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreditCreateWithoutUpdatedByInput = {
    id?: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    customer: CustomersCreateNestedOneWithoutCustomerCreditInput
    createdBy: UsersCreateNestedOneWithoutCustomerCreditsInput
  }

  export type CustomerCreditUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    customer_id: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    created_by: string
  }

  export type CustomerCreditCreateOrConnectWithoutUpdatedByInput = {
    where: CustomerCreditWhereUniqueInput
    create: XOR<CustomerCreditCreateWithoutUpdatedByInput, CustomerCreditUncheckedCreateWithoutUpdatedByInput>
  }

  export type CustomerCreditCreateManyUpdatedByInputEnvelope = {
    data: CustomerCreditCreateManyUpdatedByInput | CustomerCreditCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCreditsCreateWithoutUpdatedByInput = {
    id?: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    supplier: SuppliersCreateNestedOneWithoutSupplierCreditsInput
    createdBy: UsersCreateNestedOneWithoutCreditsInput
  }

  export type SupplierCreditsUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    supplier_id: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SupplierCreditsCreateOrConnectWithoutUpdatedByInput = {
    where: SupplierCreditsWhereUniqueInput
    create: XOR<SupplierCreditsCreateWithoutUpdatedByInput, SupplierCreditsUncheckedCreateWithoutUpdatedByInput>
  }

  export type SupplierCreditsCreateManyUpdatedByInputEnvelope = {
    data: SupplierCreditsCreateManyUpdatedByInput | SupplierCreditsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type SalesCreateWithoutCreatedByInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    sealed_date: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    dosage_form: DosageFormsCreateNestedOneWithoutSalesInput
    customer?: CustomersCreateNestedOneWithoutSalesInput
    medicine: MedicinesCreateNestedOneWithoutSalesInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSalesInput
  }

  export type SalesUncheckedCreateWithoutCreatedByInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateOrConnectWithoutCreatedByInput = {
    where: SalesWhereUniqueInput
    create: XOR<SalesCreateWithoutCreatedByInput, SalesUncheckedCreateWithoutCreatedByInput>
  }

  export type SalesCreateManyCreatedByInputEnvelope = {
    data: SalesCreateManyCreatedByInput | SalesCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SalesCreateWithoutUpdatedByInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    sealed_date: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    dosage_form: DosageFormsCreateNestedOneWithoutSalesInput
    customer?: CustomersCreateNestedOneWithoutSalesInput
    medicine: MedicinesCreateNestedOneWithoutSalesInput
    createdBy: UsersCreateNestedOneWithoutCreatedSalesInput
  }

  export type SalesUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateOrConnectWithoutUpdatedByInput = {
    where: SalesWhereUniqueInput
    create: XOR<SalesCreateWithoutUpdatedByInput, SalesUncheckedCreateWithoutUpdatedByInput>
  }

  export type SalesCreateManyUpdatedByInputEnvelope = {
    data: SalesCreateManyUpdatedByInput | SalesCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type MembersUpsertWithoutUserInput = {
    update: XOR<MembersUpdateWithoutUserInput, MembersUncheckedUpdateWithoutUserInput>
    create: XOR<MembersCreateWithoutUserInput, MembersUncheckedCreateWithoutUserInput>
    where?: MembersWhereInput
  }

  export type MembersUpdateToOneWithWhereWithoutUserInput = {
    where?: MembersWhereInput
    data: XOR<MembersUpdateWithoutUserInput, MembersUncheckedUpdateWithoutUserInput>
  }

  export type MembersUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: FloatFieldUpdateOperationsInput | number
    joining_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    biography?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembersUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    certificate?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: FloatFieldUpdateOperationsInput | number
    joining_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    biography?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SupplierCreditsUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SupplierCreditsWhereUniqueInput
    update: XOR<SupplierCreditsUpdateWithoutCreatedByInput, SupplierCreditsUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SupplierCreditsCreateWithoutCreatedByInput, SupplierCreditsUncheckedCreateWithoutCreatedByInput>
  }

  export type SupplierCreditsUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SupplierCreditsWhereUniqueInput
    data: XOR<SupplierCreditsUpdateWithoutCreatedByInput, SupplierCreditsUncheckedUpdateWithoutCreatedByInput>
  }

  export type SupplierCreditsUpdateManyWithWhereWithoutCreatedByInput = {
    where: SupplierCreditsScalarWhereInput
    data: XOR<SupplierCreditsUpdateManyMutationInput, SupplierCreditsUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SupplierCreditsScalarWhereInput = {
    AND?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
    OR?: SupplierCreditsScalarWhereInput[]
    NOT?: SupplierCreditsScalarWhereInput | SupplierCreditsScalarWhereInput[]
    id?: StringFilter<"SupplierCredits"> | string
    supplier_id?: StringFilter<"SupplierCredits"> | string
    credit_amount?: FloatFilter<"SupplierCredits"> | number
    medicine_name?: StringNullableFilter<"SupplierCredits"> | string | null
    paid_amount?: FloatFilter<"SupplierCredits"> | number
    unpaid_amount?: FloatFilter<"SupplierCredits"> | number
    total_unpaid_amount?: FloatFilter<"SupplierCredits"> | number
    total_paid_amount?: FloatFilter<"SupplierCredits"> | number
    description?: StringNullableFilter<"SupplierCredits"> | string | null
    payment_method?: EnumPaymentMethodNullableFilter<"SupplierCredits"> | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFilter<"SupplierCredits"> | $Enums.PaymentStatus
    credit_date?: DateTimeFilter<"SupplierCredits"> | Date | string
    payment_file?: StringNullableFilter<"SupplierCredits"> | string | null
    created_by?: StringFilter<"SupplierCredits"> | string
    updated_by?: StringNullableFilter<"SupplierCredits"> | string | null
    created_at?: DateTimeFilter<"SupplierCredits"> | Date | string
    updated_at?: DateTimeFilter<"SupplierCredits"> | Date | string
  }

  export type MedicinesUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: MedicinesWhereUniqueInput
    update: XOR<MedicinesUpdateWithoutCreatedByInput, MedicinesUncheckedUpdateWithoutCreatedByInput>
    create: XOR<MedicinesCreateWithoutCreatedByInput, MedicinesUncheckedCreateWithoutCreatedByInput>
  }

  export type MedicinesUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: MedicinesWhereUniqueInput
    data: XOR<MedicinesUpdateWithoutCreatedByInput, MedicinesUncheckedUpdateWithoutCreatedByInput>
  }

  export type MedicinesUpdateManyWithWhereWithoutCreatedByInput = {
    where: MedicinesScalarWhereInput
    data: XOR<MedicinesUpdateManyMutationInput, MedicinesUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type MedicinesScalarWhereInput = {
    AND?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
    OR?: MedicinesScalarWhereInput[]
    NOT?: MedicinesScalarWhereInput | MedicinesScalarWhereInput[]
    id?: StringFilter<"Medicines"> | string
    medicine_name?: StringFilter<"Medicines"> | string
    brand_name?: StringNullableFilter<"Medicines"> | string | null
    batch_number?: StringNullableFilter<"Medicines"> | string | null
    category_id?: StringFilter<"Medicines"> | string
    dosage_form_id?: StringFilter<"Medicines"> | string
    medicine_weight?: FloatNullableFilter<"Medicines"> | number | null
    quantity?: IntFilter<"Medicines"> | number
    supplier_id?: StringFilter<"Medicines"> | string
    invoice_number?: StringFilter<"Medicines"> | string
    unit_price?: FloatFilter<"Medicines"> | number
    sell_price?: FloatNullableFilter<"Medicines"> | number | null
    total_price?: FloatFilter<"Medicines"> | number
    expire_date?: DateTimeFilter<"Medicines"> | Date | string
    required_prescription?: BoolFilter<"Medicines"> | boolean
    payment_method?: EnumPaymentMethodFilter<"Medicines"> | $Enums.PaymentMethod
    Payment_file?: StringNullableFilter<"Medicines"> | string | null
    details?: StringNullableFilter<"Medicines"> | string | null
    createdById?: StringFilter<"Medicines"> | string
    createdAt?: DateTimeFilter<"Medicines"> | Date | string
    updatedAt?: DateTimeFilter<"Medicines"> | Date | string
  }

  export type CustomerCreditUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CustomerCreditWhereUniqueInput
    update: XOR<CustomerCreditUpdateWithoutCreatedByInput, CustomerCreditUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CustomerCreditCreateWithoutCreatedByInput, CustomerCreditUncheckedCreateWithoutCreatedByInput>
  }

  export type CustomerCreditUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CustomerCreditWhereUniqueInput
    data: XOR<CustomerCreditUpdateWithoutCreatedByInput, CustomerCreditUncheckedUpdateWithoutCreatedByInput>
  }

  export type CustomerCreditUpdateManyWithWhereWithoutCreatedByInput = {
    where: CustomerCreditScalarWhereInput
    data: XOR<CustomerCreditUpdateManyMutationInput, CustomerCreditUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CustomerCreditScalarWhereInput = {
    AND?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
    OR?: CustomerCreditScalarWhereInput[]
    NOT?: CustomerCreditScalarWhereInput | CustomerCreditScalarWhereInput[]
    id?: StringFilter<"CustomerCredit"> | string
    customer_id?: StringFilter<"CustomerCredit"> | string
    credit_amount?: FloatFilter<"CustomerCredit"> | number
    paid_amount?: FloatFilter<"CustomerCredit"> | number
    unpaid_amount?: FloatFilter<"CustomerCredit"> | number
    total_unpaid_amount?: FloatFilter<"CustomerCredit"> | number
    total_paid_amount?: FloatFilter<"CustomerCredit"> | number
    medicine_name?: StringNullableFilter<"CustomerCredit"> | string | null
    payment_method?: EnumPaymentMethodFilter<"CustomerCredit"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"CustomerCredit"> | string | null
    status?: EnumPaymentStatusFilter<"CustomerCredit"> | $Enums.PaymentStatus
    credit_date?: DateTimeFilter<"CustomerCredit"> | Date | string
    payment_file?: StringNullableFilter<"CustomerCredit"> | string | null
    updated_at?: DateTimeFilter<"CustomerCredit"> | Date | string
    created_by?: StringFilter<"CustomerCredit"> | string
    updated_by?: StringNullableFilter<"CustomerCredit"> | string | null
  }

  export type CustomerCreditUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: CustomerCreditWhereUniqueInput
    update: XOR<CustomerCreditUpdateWithoutUpdatedByInput, CustomerCreditUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<CustomerCreditCreateWithoutUpdatedByInput, CustomerCreditUncheckedCreateWithoutUpdatedByInput>
  }

  export type CustomerCreditUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: CustomerCreditWhereUniqueInput
    data: XOR<CustomerCreditUpdateWithoutUpdatedByInput, CustomerCreditUncheckedUpdateWithoutUpdatedByInput>
  }

  export type CustomerCreditUpdateManyWithWhereWithoutUpdatedByInput = {
    where: CustomerCreditScalarWhereInput
    data: XOR<CustomerCreditUpdateManyMutationInput, CustomerCreditUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SupplierCreditsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SupplierCreditsWhereUniqueInput
    update: XOR<SupplierCreditsUpdateWithoutUpdatedByInput, SupplierCreditsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SupplierCreditsCreateWithoutUpdatedByInput, SupplierCreditsUncheckedCreateWithoutUpdatedByInput>
  }

  export type SupplierCreditsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SupplierCreditsWhereUniqueInput
    data: XOR<SupplierCreditsUpdateWithoutUpdatedByInput, SupplierCreditsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SupplierCreditsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SupplierCreditsScalarWhereInput
    data: XOR<SupplierCreditsUpdateManyMutationInput, SupplierCreditsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SalesUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SalesWhereUniqueInput
    update: XOR<SalesUpdateWithoutCreatedByInput, SalesUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SalesCreateWithoutCreatedByInput, SalesUncheckedCreateWithoutCreatedByInput>
  }

  export type SalesUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SalesWhereUniqueInput
    data: XOR<SalesUpdateWithoutCreatedByInput, SalesUncheckedUpdateWithoutCreatedByInput>
  }

  export type SalesUpdateManyWithWhereWithoutCreatedByInput = {
    where: SalesScalarWhereInput
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SalesScalarWhereInput = {
    AND?: SalesScalarWhereInput | SalesScalarWhereInput[]
    OR?: SalesScalarWhereInput[]
    NOT?: SalesScalarWhereInput | SalesScalarWhereInput[]
    id?: StringFilter<"Sales"> | string
    product_name?: StringNullableFilter<"Sales"> | string | null
    product_batch_number?: StringNullableFilter<"Sales"> | string | null
    quantity?: IntFilter<"Sales"> | number
    price?: FloatFilter<"Sales"> | number
    total_amount?: FloatFilter<"Sales"> | number
    payment_method?: EnumPaymentMethodFilter<"Sales"> | $Enums.PaymentMethod
    prescription?: BoolFilter<"Sales"> | boolean
    dosage_form_id?: StringFilter<"Sales"> | string
    customer_id?: StringNullableFilter<"Sales"> | string | null
    sealed_date?: DateTimeFilter<"Sales"> | Date | string
    medicine_id?: StringFilter<"Sales"> | string
    created_by?: StringFilter<"Sales"> | string
    updated_by?: StringNullableFilter<"Sales"> | string | null
    created_at?: DateTimeFilter<"Sales"> | Date | string
    updated_at?: DateTimeFilter<"Sales"> | Date | string
  }

  export type SalesUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SalesWhereUniqueInput
    update: XOR<SalesUpdateWithoutUpdatedByInput, SalesUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SalesCreateWithoutUpdatedByInput, SalesUncheckedCreateWithoutUpdatedByInput>
  }

  export type SalesUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SalesWhereUniqueInput
    data: XOR<SalesUpdateWithoutUpdatedByInput, SalesUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SalesUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SalesScalarWhereInput
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type UsersCreateWithoutMemberInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutMemberInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutMemberInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMemberInput, UsersUncheckedCreateWithoutMemberInput>
  }

  export type UsersUpsertWithoutMemberInput = {
    update: XOR<UsersUpdateWithoutMemberInput, UsersUncheckedUpdateWithoutMemberInput>
    create: XOR<UsersCreateWithoutMemberInput, UsersUncheckedCreateWithoutMemberInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMemberInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMemberInput, UsersUncheckedUpdateWithoutMemberInput>
  }

  export type UsersUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type SupplierCreditsCreateWithoutSupplierInput = {
    id?: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: UsersCreateNestedOneWithoutCreditsInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSupplierCreditsInput
  }

  export type SupplierCreditsUncheckedCreateWithoutSupplierInput = {
    id?: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SupplierCreditsCreateOrConnectWithoutSupplierInput = {
    where: SupplierCreditsWhereUniqueInput
    create: XOR<SupplierCreditsCreateWithoutSupplierInput, SupplierCreditsUncheckedCreateWithoutSupplierInput>
  }

  export type SupplierCreditsCreateManySupplierInputEnvelope = {
    data: SupplierCreditsCreateManySupplierInput | SupplierCreditsCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type MedicinesCreateWithoutSupplierInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoriesCreateNestedOneWithoutMedicinesInput
    dosage_form: DosageFormsCreateNestedOneWithoutMedicinesInput
    createdBy: UsersCreateNestedOneWithoutMedicinesInput
    Sales?: SalesCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateWithoutSupplierInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Sales?: SalesUncheckedCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesCreateOrConnectWithoutSupplierInput = {
    where: MedicinesWhereUniqueInput
    create: XOR<MedicinesCreateWithoutSupplierInput, MedicinesUncheckedCreateWithoutSupplierInput>
  }

  export type MedicinesCreateManySupplierInputEnvelope = {
    data: MedicinesCreateManySupplierInput | MedicinesCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCreditsUpsertWithWhereUniqueWithoutSupplierInput = {
    where: SupplierCreditsWhereUniqueInput
    update: XOR<SupplierCreditsUpdateWithoutSupplierInput, SupplierCreditsUncheckedUpdateWithoutSupplierInput>
    create: XOR<SupplierCreditsCreateWithoutSupplierInput, SupplierCreditsUncheckedCreateWithoutSupplierInput>
  }

  export type SupplierCreditsUpdateWithWhereUniqueWithoutSupplierInput = {
    where: SupplierCreditsWhereUniqueInput
    data: XOR<SupplierCreditsUpdateWithoutSupplierInput, SupplierCreditsUncheckedUpdateWithoutSupplierInput>
  }

  export type SupplierCreditsUpdateManyWithWhereWithoutSupplierInput = {
    where: SupplierCreditsScalarWhereInput
    data: XOR<SupplierCreditsUpdateManyMutationInput, SupplierCreditsUncheckedUpdateManyWithoutSupplierInput>
  }

  export type MedicinesUpsertWithWhereUniqueWithoutSupplierInput = {
    where: MedicinesWhereUniqueInput
    update: XOR<MedicinesUpdateWithoutSupplierInput, MedicinesUncheckedUpdateWithoutSupplierInput>
    create: XOR<MedicinesCreateWithoutSupplierInput, MedicinesUncheckedCreateWithoutSupplierInput>
  }

  export type MedicinesUpdateWithWhereUniqueWithoutSupplierInput = {
    where: MedicinesWhereUniqueInput
    data: XOR<MedicinesUpdateWithoutSupplierInput, MedicinesUncheckedUpdateWithoutSupplierInput>
  }

  export type MedicinesUpdateManyWithWhereWithoutSupplierInput = {
    where: MedicinesScalarWhereInput
    data: XOR<MedicinesUpdateManyMutationInput, MedicinesUncheckedUpdateManyWithoutSupplierInput>
  }

  export type MedicinesCreateWithoutCategoryInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dosage_form: DosageFormsCreateNestedOneWithoutMedicinesInput
    supplier: SuppliersCreateNestedOneWithoutMedicinesInput
    createdBy: UsersCreateNestedOneWithoutMedicinesInput
    Sales?: SalesCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateWithoutCategoryInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Sales?: SalesUncheckedCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesCreateOrConnectWithoutCategoryInput = {
    where: MedicinesWhereUniqueInput
    create: XOR<MedicinesCreateWithoutCategoryInput, MedicinesUncheckedCreateWithoutCategoryInput>
  }

  export type MedicinesCreateManyCategoryInputEnvelope = {
    data: MedicinesCreateManyCategoryInput | MedicinesCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MedicinesUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MedicinesWhereUniqueInput
    update: XOR<MedicinesUpdateWithoutCategoryInput, MedicinesUncheckedUpdateWithoutCategoryInput>
    create: XOR<MedicinesCreateWithoutCategoryInput, MedicinesUncheckedCreateWithoutCategoryInput>
  }

  export type MedicinesUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MedicinesWhereUniqueInput
    data: XOR<MedicinesUpdateWithoutCategoryInput, MedicinesUncheckedUpdateWithoutCategoryInput>
  }

  export type MedicinesUpdateManyWithWhereWithoutCategoryInput = {
    where: MedicinesScalarWhereInput
    data: XOR<MedicinesUpdateManyMutationInput, MedicinesUncheckedUpdateManyWithoutCategoryInput>
  }

  export type MedicinesCreateWithoutDosage_formInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoriesCreateNestedOneWithoutMedicinesInput
    supplier: SuppliersCreateNestedOneWithoutMedicinesInput
    createdBy: UsersCreateNestedOneWithoutMedicinesInput
    Sales?: SalesCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateWithoutDosage_formInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Sales?: SalesUncheckedCreateNestedManyWithoutMedicineInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesCreateOrConnectWithoutDosage_formInput = {
    where: MedicinesWhereUniqueInput
    create: XOR<MedicinesCreateWithoutDosage_formInput, MedicinesUncheckedCreateWithoutDosage_formInput>
  }

  export type MedicinesCreateManyDosage_formInputEnvelope = {
    data: MedicinesCreateManyDosage_formInput | MedicinesCreateManyDosage_formInput[]
    skipDuplicates?: boolean
  }

  export type SalesCreateWithoutDosage_formInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    sealed_date: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    customer?: CustomersCreateNestedOneWithoutSalesInput
    medicine: MedicinesCreateNestedOneWithoutSalesInput
    createdBy: UsersCreateNestedOneWithoutCreatedSalesInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSalesInput
  }

  export type SalesUncheckedCreateWithoutDosage_formInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateOrConnectWithoutDosage_formInput = {
    where: SalesWhereUniqueInput
    create: XOR<SalesCreateWithoutDosage_formInput, SalesUncheckedCreateWithoutDosage_formInput>
  }

  export type SalesCreateManyDosage_formInputEnvelope = {
    data: SalesCreateManyDosage_formInput | SalesCreateManyDosage_formInput[]
    skipDuplicates?: boolean
  }

  export type ReturnsCreateWithoutDosage_formInput = {
    id?: string
    product_name: string
    product_batch_number: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    medicine: MedicinesCreateNestedOneWithoutReturnsInput
  }

  export type ReturnsUncheckedCreateWithoutDosage_formInput = {
    id?: string
    product_name: string
    product_batch_number: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    medicine_id: string
  }

  export type ReturnsCreateOrConnectWithoutDosage_formInput = {
    where: ReturnsWhereUniqueInput
    create: XOR<ReturnsCreateWithoutDosage_formInput, ReturnsUncheckedCreateWithoutDosage_formInput>
  }

  export type ReturnsCreateManyDosage_formInputEnvelope = {
    data: ReturnsCreateManyDosage_formInput | ReturnsCreateManyDosage_formInput[]
    skipDuplicates?: boolean
  }

  export type MedicinesUpsertWithWhereUniqueWithoutDosage_formInput = {
    where: MedicinesWhereUniqueInput
    update: XOR<MedicinesUpdateWithoutDosage_formInput, MedicinesUncheckedUpdateWithoutDosage_formInput>
    create: XOR<MedicinesCreateWithoutDosage_formInput, MedicinesUncheckedCreateWithoutDosage_formInput>
  }

  export type MedicinesUpdateWithWhereUniqueWithoutDosage_formInput = {
    where: MedicinesWhereUniqueInput
    data: XOR<MedicinesUpdateWithoutDosage_formInput, MedicinesUncheckedUpdateWithoutDosage_formInput>
  }

  export type MedicinesUpdateManyWithWhereWithoutDosage_formInput = {
    where: MedicinesScalarWhereInput
    data: XOR<MedicinesUpdateManyMutationInput, MedicinesUncheckedUpdateManyWithoutDosage_formInput>
  }

  export type SalesUpsertWithWhereUniqueWithoutDosage_formInput = {
    where: SalesWhereUniqueInput
    update: XOR<SalesUpdateWithoutDosage_formInput, SalesUncheckedUpdateWithoutDosage_formInput>
    create: XOR<SalesCreateWithoutDosage_formInput, SalesUncheckedCreateWithoutDosage_formInput>
  }

  export type SalesUpdateWithWhereUniqueWithoutDosage_formInput = {
    where: SalesWhereUniqueInput
    data: XOR<SalesUpdateWithoutDosage_formInput, SalesUncheckedUpdateWithoutDosage_formInput>
  }

  export type SalesUpdateManyWithWhereWithoutDosage_formInput = {
    where: SalesScalarWhereInput
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyWithoutDosage_formInput>
  }

  export type ReturnsUpsertWithWhereUniqueWithoutDosage_formInput = {
    where: ReturnsWhereUniqueInput
    update: XOR<ReturnsUpdateWithoutDosage_formInput, ReturnsUncheckedUpdateWithoutDosage_formInput>
    create: XOR<ReturnsCreateWithoutDosage_formInput, ReturnsUncheckedCreateWithoutDosage_formInput>
  }

  export type ReturnsUpdateWithWhereUniqueWithoutDosage_formInput = {
    where: ReturnsWhereUniqueInput
    data: XOR<ReturnsUpdateWithoutDosage_formInput, ReturnsUncheckedUpdateWithoutDosage_formInput>
  }

  export type ReturnsUpdateManyWithWhereWithoutDosage_formInput = {
    where: ReturnsScalarWhereInput
    data: XOR<ReturnsUpdateManyMutationInput, ReturnsUncheckedUpdateManyWithoutDosage_formInput>
  }

  export type ReturnsScalarWhereInput = {
    AND?: ReturnsScalarWhereInput | ReturnsScalarWhereInput[]
    OR?: ReturnsScalarWhereInput[]
    NOT?: ReturnsScalarWhereInput | ReturnsScalarWhereInput[]
    id?: StringFilter<"Returns"> | string
    product_name?: StringFilter<"Returns"> | string
    product_batch_number?: StringFilter<"Returns"> | string
    dosage_form_id?: StringFilter<"Returns"> | string
    return_date?: DateTimeFilter<"Returns"> | Date | string
    reason_for_return?: StringFilter<"Returns"> | string
    quantity?: IntFilter<"Returns"> | number
    medicine_id?: StringFilter<"Returns"> | string
  }

  export type CategoriesCreateWithoutMedicinesInput = {
    id?: string
    name: string
  }

  export type CategoriesUncheckedCreateWithoutMedicinesInput = {
    id?: string
    name: string
  }

  export type CategoriesCreateOrConnectWithoutMedicinesInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutMedicinesInput, CategoriesUncheckedCreateWithoutMedicinesInput>
  }

  export type DosageFormsCreateWithoutMedicinesInput = {
    id?: string
    name: string
    Sales?: SalesCreateNestedManyWithoutDosage_formInput
    Returns?: ReturnsCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsUncheckedCreateWithoutMedicinesInput = {
    id?: string
    name: string
    Sales?: SalesUncheckedCreateNestedManyWithoutDosage_formInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsCreateOrConnectWithoutMedicinesInput = {
    where: DosageFormsWhereUniqueInput
    create: XOR<DosageFormsCreateWithoutMedicinesInput, DosageFormsUncheckedCreateWithoutMedicinesInput>
  }

  export type SuppliersCreateWithoutMedicinesInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
    SupplierCredits?: SupplierCreditsCreateNestedManyWithoutSupplierInput
  }

  export type SuppliersUncheckedCreateWithoutMedicinesInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
    SupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SuppliersCreateOrConnectWithoutMedicinesInput = {
    where: SuppliersWhereUniqueInput
    create: XOR<SuppliersCreateWithoutMedicinesInput, SuppliersUncheckedCreateWithoutMedicinesInput>
  }

  export type UsersCreateWithoutMedicinesInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutMedicinesInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutMedicinesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMedicinesInput, UsersUncheckedCreateWithoutMedicinesInput>
  }

  export type SalesCreateWithoutMedicineInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    sealed_date: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    dosage_form: DosageFormsCreateNestedOneWithoutSalesInput
    customer?: CustomersCreateNestedOneWithoutSalesInput
    createdBy: UsersCreateNestedOneWithoutCreatedSalesInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSalesInput
  }

  export type SalesUncheckedCreateWithoutMedicineInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateOrConnectWithoutMedicineInput = {
    where: SalesWhereUniqueInput
    create: XOR<SalesCreateWithoutMedicineInput, SalesUncheckedCreateWithoutMedicineInput>
  }

  export type SalesCreateManyMedicineInputEnvelope = {
    data: SalesCreateManyMedicineInput | SalesCreateManyMedicineInput[]
    skipDuplicates?: boolean
  }

  export type ReturnsCreateWithoutMedicineInput = {
    id?: string
    product_name: string
    product_batch_number: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    dosage_form: DosageFormsCreateNestedOneWithoutReturnsInput
  }

  export type ReturnsUncheckedCreateWithoutMedicineInput = {
    id?: string
    product_name: string
    product_batch_number: string
    dosage_form_id: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
  }

  export type ReturnsCreateOrConnectWithoutMedicineInput = {
    where: ReturnsWhereUniqueInput
    create: XOR<ReturnsCreateWithoutMedicineInput, ReturnsUncheckedCreateWithoutMedicineInput>
  }

  export type ReturnsCreateManyMedicineInputEnvelope = {
    data: ReturnsCreateManyMedicineInput | ReturnsCreateManyMedicineInput[]
    skipDuplicates?: boolean
  }

  export type CategoriesUpsertWithoutMedicinesInput = {
    update: XOR<CategoriesUpdateWithoutMedicinesInput, CategoriesUncheckedUpdateWithoutMedicinesInput>
    create: XOR<CategoriesCreateWithoutMedicinesInput, CategoriesUncheckedCreateWithoutMedicinesInput>
    where?: CategoriesWhereInput
  }

  export type CategoriesUpdateToOneWithWhereWithoutMedicinesInput = {
    where?: CategoriesWhereInput
    data: XOR<CategoriesUpdateWithoutMedicinesInput, CategoriesUncheckedUpdateWithoutMedicinesInput>
  }

  export type CategoriesUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesUncheckedUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DosageFormsUpsertWithoutMedicinesInput = {
    update: XOR<DosageFormsUpdateWithoutMedicinesInput, DosageFormsUncheckedUpdateWithoutMedicinesInput>
    create: XOR<DosageFormsCreateWithoutMedicinesInput, DosageFormsUncheckedCreateWithoutMedicinesInput>
    where?: DosageFormsWhereInput
  }

  export type DosageFormsUpdateToOneWithWhereWithoutMedicinesInput = {
    where?: DosageFormsWhereInput
    data: XOR<DosageFormsUpdateWithoutMedicinesInput, DosageFormsUncheckedUpdateWithoutMedicinesInput>
  }

  export type DosageFormsUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Sales?: SalesUpdateManyWithoutDosage_formNestedInput
    Returns?: ReturnsUpdateManyWithoutDosage_formNestedInput
  }

  export type DosageFormsUncheckedUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Sales?: SalesUncheckedUpdateManyWithoutDosage_formNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutDosage_formNestedInput
  }

  export type SuppliersUpsertWithoutMedicinesInput = {
    update: XOR<SuppliersUpdateWithoutMedicinesInput, SuppliersUncheckedUpdateWithoutMedicinesInput>
    create: XOR<SuppliersCreateWithoutMedicinesInput, SuppliersUncheckedCreateWithoutMedicinesInput>
    where?: SuppliersWhereInput
  }

  export type SuppliersUpdateToOneWithWhereWithoutMedicinesInput = {
    where?: SuppliersWhereInput
    data: XOR<SuppliersUpdateWithoutMedicinesInput, SuppliersUncheckedUpdateWithoutMedicinesInput>
  }

  export type SuppliersUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    SupplierCredits?: SupplierCreditsUpdateManyWithoutSupplierNestedInput
  }

  export type SuppliersUncheckedUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    SupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type UsersUpsertWithoutMedicinesInput = {
    update: XOR<UsersUpdateWithoutMedicinesInput, UsersUncheckedUpdateWithoutMedicinesInput>
    create: XOR<UsersCreateWithoutMedicinesInput, UsersUncheckedCreateWithoutMedicinesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMedicinesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMedicinesInput, UsersUncheckedUpdateWithoutMedicinesInput>
  }

  export type UsersUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutMedicinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type SalesUpsertWithWhereUniqueWithoutMedicineInput = {
    where: SalesWhereUniqueInput
    update: XOR<SalesUpdateWithoutMedicineInput, SalesUncheckedUpdateWithoutMedicineInput>
    create: XOR<SalesCreateWithoutMedicineInput, SalesUncheckedCreateWithoutMedicineInput>
  }

  export type SalesUpdateWithWhereUniqueWithoutMedicineInput = {
    where: SalesWhereUniqueInput
    data: XOR<SalesUpdateWithoutMedicineInput, SalesUncheckedUpdateWithoutMedicineInput>
  }

  export type SalesUpdateManyWithWhereWithoutMedicineInput = {
    where: SalesScalarWhereInput
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyWithoutMedicineInput>
  }

  export type ReturnsUpsertWithWhereUniqueWithoutMedicineInput = {
    where: ReturnsWhereUniqueInput
    update: XOR<ReturnsUpdateWithoutMedicineInput, ReturnsUncheckedUpdateWithoutMedicineInput>
    create: XOR<ReturnsCreateWithoutMedicineInput, ReturnsUncheckedCreateWithoutMedicineInput>
  }

  export type ReturnsUpdateWithWhereUniqueWithoutMedicineInput = {
    where: ReturnsWhereUniqueInput
    data: XOR<ReturnsUpdateWithoutMedicineInput, ReturnsUncheckedUpdateWithoutMedicineInput>
  }

  export type ReturnsUpdateManyWithWhereWithoutMedicineInput = {
    where: ReturnsScalarWhereInput
    data: XOR<ReturnsUpdateManyMutationInput, ReturnsUncheckedUpdateManyWithoutMedicineInput>
  }

  export type DosageFormsCreateWithoutSalesInput = {
    id?: string
    name: string
    Medicines?: MedicinesCreateNestedManyWithoutDosage_formInput
    Returns?: ReturnsCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsUncheckedCreateWithoutSalesInput = {
    id?: string
    name: string
    Medicines?: MedicinesUncheckedCreateNestedManyWithoutDosage_formInput
    Returns?: ReturnsUncheckedCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsCreateOrConnectWithoutSalesInput = {
    where: DosageFormsWhereUniqueInput
    create: XOR<DosageFormsCreateWithoutSalesInput, DosageFormsUncheckedCreateWithoutSalesInput>
  }

  export type CustomersCreateWithoutSalesInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
    CustomerCredit?: CustomerCreditCreateNestedManyWithoutCustomerInput
  }

  export type CustomersUncheckedCreateWithoutSalesInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
    CustomerCredit?: CustomerCreditUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomersCreateOrConnectWithoutSalesInput = {
    where: CustomersWhereUniqueInput
    create: XOR<CustomersCreateWithoutSalesInput, CustomersUncheckedCreateWithoutSalesInput>
  }

  export type MedicinesCreateWithoutSalesInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoriesCreateNestedOneWithoutMedicinesInput
    dosage_form: DosageFormsCreateNestedOneWithoutMedicinesInput
    supplier: SuppliersCreateNestedOneWithoutMedicinesInput
    createdBy: UsersCreateNestedOneWithoutMedicinesInput
    Returns?: ReturnsCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateWithoutSalesInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Returns?: ReturnsUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesCreateOrConnectWithoutSalesInput = {
    where: MedicinesWhereUniqueInput
    create: XOR<MedicinesCreateWithoutSalesInput, MedicinesUncheckedCreateWithoutSalesInput>
  }

  export type UsersCreateWithoutCreatedSalesInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutCreatedSalesInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutCreatedSalesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCreatedSalesInput, UsersUncheckedCreateWithoutCreatedSalesInput>
  }

  export type UsersCreateWithoutUpdatedSalesInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
  }

  export type UsersUncheckedCreateWithoutUpdatedSalesInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UsersCreateOrConnectWithoutUpdatedSalesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUpdatedSalesInput, UsersUncheckedCreateWithoutUpdatedSalesInput>
  }

  export type DosageFormsUpsertWithoutSalesInput = {
    update: XOR<DosageFormsUpdateWithoutSalesInput, DosageFormsUncheckedUpdateWithoutSalesInput>
    create: XOR<DosageFormsCreateWithoutSalesInput, DosageFormsUncheckedCreateWithoutSalesInput>
    where?: DosageFormsWhereInput
  }

  export type DosageFormsUpdateToOneWithWhereWithoutSalesInput = {
    where?: DosageFormsWhereInput
    data: XOR<DosageFormsUpdateWithoutSalesInput, DosageFormsUncheckedUpdateWithoutSalesInput>
  }

  export type DosageFormsUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUpdateManyWithoutDosage_formNestedInput
    Returns?: ReturnsUpdateManyWithoutDosage_formNestedInput
  }

  export type DosageFormsUncheckedUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUncheckedUpdateManyWithoutDosage_formNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutDosage_formNestedInput
  }

  export type CustomersUpsertWithoutSalesInput = {
    update: XOR<CustomersUpdateWithoutSalesInput, CustomersUncheckedUpdateWithoutSalesInput>
    create: XOR<CustomersCreateWithoutSalesInput, CustomersUncheckedCreateWithoutSalesInput>
    where?: CustomersWhereInput
  }

  export type CustomersUpdateToOneWithWhereWithoutSalesInput = {
    where?: CustomersWhereInput
    data: XOR<CustomersUpdateWithoutSalesInput, CustomersUncheckedUpdateWithoutSalesInput>
  }

  export type CustomersUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    CustomerCredit?: CustomerCreditUpdateManyWithoutCustomerNestedInput
  }

  export type CustomersUncheckedUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    CustomerCredit?: CustomerCreditUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type MedicinesUpsertWithoutSalesInput = {
    update: XOR<MedicinesUpdateWithoutSalesInput, MedicinesUncheckedUpdateWithoutSalesInput>
    create: XOR<MedicinesCreateWithoutSalesInput, MedicinesUncheckedCreateWithoutSalesInput>
    where?: MedicinesWhereInput
  }

  export type MedicinesUpdateToOneWithWhereWithoutSalesInput = {
    where?: MedicinesWhereInput
    data: XOR<MedicinesUpdateWithoutSalesInput, MedicinesUncheckedUpdateWithoutSalesInput>
  }

  export type MedicinesUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutMedicinesNestedInput
    dosage_form?: DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SuppliersUpdateOneRequiredWithoutMedicinesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutMedicinesNestedInput
    Returns?: ReturnsUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Returns?: ReturnsUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type UsersUpsertWithoutCreatedSalesInput = {
    update: XOR<UsersUpdateWithoutCreatedSalesInput, UsersUncheckedUpdateWithoutCreatedSalesInput>
    create: XOR<UsersCreateWithoutCreatedSalesInput, UsersUncheckedCreateWithoutCreatedSalesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCreatedSalesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCreatedSalesInput, UsersUncheckedUpdateWithoutCreatedSalesInput>
  }

  export type UsersUpdateWithoutCreatedSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutCreatedSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUpsertWithoutUpdatedSalesInput = {
    update: XOR<UsersUpdateWithoutUpdatedSalesInput, UsersUncheckedUpdateWithoutUpdatedSalesInput>
    create: XOR<UsersCreateWithoutUpdatedSalesInput, UsersUncheckedCreateWithoutUpdatedSalesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUpdatedSalesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUpdatedSalesInput, UsersUncheckedUpdateWithoutUpdatedSalesInput>
  }

  export type UsersUpdateWithoutUpdatedSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutUpdatedSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DosageFormsCreateWithoutReturnsInput = {
    id?: string
    name: string
    Medicines?: MedicinesCreateNestedManyWithoutDosage_formInput
    Sales?: SalesCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsUncheckedCreateWithoutReturnsInput = {
    id?: string
    name: string
    Medicines?: MedicinesUncheckedCreateNestedManyWithoutDosage_formInput
    Sales?: SalesUncheckedCreateNestedManyWithoutDosage_formInput
  }

  export type DosageFormsCreateOrConnectWithoutReturnsInput = {
    where: DosageFormsWhereUniqueInput
    create: XOR<DosageFormsCreateWithoutReturnsInput, DosageFormsUncheckedCreateWithoutReturnsInput>
  }

  export type MedicinesCreateWithoutReturnsInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoriesCreateNestedOneWithoutMedicinesInput
    dosage_form: DosageFormsCreateNestedOneWithoutMedicinesInput
    supplier: SuppliersCreateNestedOneWithoutMedicinesInput
    createdBy: UsersCreateNestedOneWithoutMedicinesInput
    Sales?: SalesCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesUncheckedCreateWithoutReturnsInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Sales?: SalesUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicinesCreateOrConnectWithoutReturnsInput = {
    where: MedicinesWhereUniqueInput
    create: XOR<MedicinesCreateWithoutReturnsInput, MedicinesUncheckedCreateWithoutReturnsInput>
  }

  export type DosageFormsUpsertWithoutReturnsInput = {
    update: XOR<DosageFormsUpdateWithoutReturnsInput, DosageFormsUncheckedUpdateWithoutReturnsInput>
    create: XOR<DosageFormsCreateWithoutReturnsInput, DosageFormsUncheckedCreateWithoutReturnsInput>
    where?: DosageFormsWhereInput
  }

  export type DosageFormsUpdateToOneWithWhereWithoutReturnsInput = {
    where?: DosageFormsWhereInput
    data: XOR<DosageFormsUpdateWithoutReturnsInput, DosageFormsUncheckedUpdateWithoutReturnsInput>
  }

  export type DosageFormsUpdateWithoutReturnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUpdateManyWithoutDosage_formNestedInput
    Sales?: SalesUpdateManyWithoutDosage_formNestedInput
  }

  export type DosageFormsUncheckedUpdateWithoutReturnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Medicines?: MedicinesUncheckedUpdateManyWithoutDosage_formNestedInput
    Sales?: SalesUncheckedUpdateManyWithoutDosage_formNestedInput
  }

  export type MedicinesUpsertWithoutReturnsInput = {
    update: XOR<MedicinesUpdateWithoutReturnsInput, MedicinesUncheckedUpdateWithoutReturnsInput>
    create: XOR<MedicinesCreateWithoutReturnsInput, MedicinesUncheckedCreateWithoutReturnsInput>
    where?: MedicinesWhereInput
  }

  export type MedicinesUpdateToOneWithWhereWithoutReturnsInput = {
    where?: MedicinesWhereInput
    data: XOR<MedicinesUpdateWithoutReturnsInput, MedicinesUncheckedUpdateWithoutReturnsInput>
  }

  export type MedicinesUpdateWithoutReturnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutMedicinesNestedInput
    dosage_form?: DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SuppliersUpdateOneRequiredWithoutMedicinesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutMedicinesNestedInput
    Sales?: SalesUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateWithoutReturnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sales?: SalesUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type SalesCreateWithoutCustomerInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    sealed_date: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    dosage_form: DosageFormsCreateNestedOneWithoutSalesInput
    medicine: MedicinesCreateNestedOneWithoutSalesInput
    createdBy: UsersCreateNestedOneWithoutCreatedSalesInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedSalesInput
  }

  export type SalesUncheckedCreateWithoutCustomerInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateOrConnectWithoutCustomerInput = {
    where: SalesWhereUniqueInput
    create: XOR<SalesCreateWithoutCustomerInput, SalesUncheckedCreateWithoutCustomerInput>
  }

  export type SalesCreateManyCustomerInputEnvelope = {
    data: SalesCreateManyCustomerInput | SalesCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreditCreateWithoutCustomerInput = {
    id?: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    createdBy: UsersCreateNestedOneWithoutCustomerCreditsInput
    updatedBy?: UsersCreateNestedOneWithoutUpdatedCustomerCreditsInput
  }

  export type CustomerCreditUncheckedCreateWithoutCustomerInput = {
    id?: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    created_by: string
    updated_by?: string | null
  }

  export type CustomerCreditCreateOrConnectWithoutCustomerInput = {
    where: CustomerCreditWhereUniqueInput
    create: XOR<CustomerCreditCreateWithoutCustomerInput, CustomerCreditUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerCreditCreateManyCustomerInputEnvelope = {
    data: CustomerCreditCreateManyCustomerInput | CustomerCreditCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type SalesUpsertWithWhereUniqueWithoutCustomerInput = {
    where: SalesWhereUniqueInput
    update: XOR<SalesUpdateWithoutCustomerInput, SalesUncheckedUpdateWithoutCustomerInput>
    create: XOR<SalesCreateWithoutCustomerInput, SalesUncheckedCreateWithoutCustomerInput>
  }

  export type SalesUpdateWithWhereUniqueWithoutCustomerInput = {
    where: SalesWhereUniqueInput
    data: XOR<SalesUpdateWithoutCustomerInput, SalesUncheckedUpdateWithoutCustomerInput>
  }

  export type SalesUpdateManyWithWhereWithoutCustomerInput = {
    where: SalesScalarWhereInput
    data: XOR<SalesUpdateManyMutationInput, SalesUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerCreditUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerCreditWhereUniqueInput
    update: XOR<CustomerCreditUpdateWithoutCustomerInput, CustomerCreditUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerCreditCreateWithoutCustomerInput, CustomerCreditUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerCreditUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerCreditWhereUniqueInput
    data: XOR<CustomerCreditUpdateWithoutCustomerInput, CustomerCreditUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerCreditUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerCreditScalarWhereInput
    data: XOR<CustomerCreditUpdateManyMutationInput, CustomerCreditUncheckedUpdateManyWithoutCustomerInput>
  }

  export type SuppliersCreateWithoutSupplierCreditsInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
    Medicines?: MedicinesCreateNestedManyWithoutSupplierInput
  }

  export type SuppliersUncheckedCreateWithoutSupplierCreditsInput = {
    id?: string
    supplier_name: string
    contact_info: string
    payment_info_cbe?: string | null
    payment_info_coop?: string | null
    payment_info_boa?: string | null
    payment_info_awash?: string | null
    payment_info_ebirr?: string | null
    location: string
    email?: string | null
    Medicines?: MedicinesUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SuppliersCreateOrConnectWithoutSupplierCreditsInput = {
    where: SuppliersWhereUniqueInput
    create: XOR<SuppliersCreateWithoutSupplierCreditsInput, SuppliersUncheckedCreateWithoutSupplierCreditsInput>
  }

  export type UsersCreateWithoutCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutCreditsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCreditsInput, UsersUncheckedCreateWithoutCreditsInput>
  }

  export type UsersCreateWithoutUpdatedSupplierCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutUpdatedSupplierCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutUpdatedSupplierCreditsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUpdatedSupplierCreditsInput, UsersUncheckedCreateWithoutUpdatedSupplierCreditsInput>
  }

  export type SuppliersUpsertWithoutSupplierCreditsInput = {
    update: XOR<SuppliersUpdateWithoutSupplierCreditsInput, SuppliersUncheckedUpdateWithoutSupplierCreditsInput>
    create: XOR<SuppliersCreateWithoutSupplierCreditsInput, SuppliersUncheckedCreateWithoutSupplierCreditsInput>
    where?: SuppliersWhereInput
  }

  export type SuppliersUpdateToOneWithWhereWithoutSupplierCreditsInput = {
    where?: SuppliersWhereInput
    data: XOR<SuppliersUpdateWithoutSupplierCreditsInput, SuppliersUncheckedUpdateWithoutSupplierCreditsInput>
  }

  export type SuppliersUpdateWithoutSupplierCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Medicines?: MedicinesUpdateManyWithoutSupplierNestedInput
  }

  export type SuppliersUncheckedUpdateWithoutSupplierCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_name?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    payment_info_cbe?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_coop?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_boa?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_awash?: NullableStringFieldUpdateOperationsInput | string | null
    payment_info_ebirr?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Medicines?: MedicinesUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type UsersUpsertWithoutCreditsInput = {
    update: XOR<UsersUpdateWithoutCreditsInput, UsersUncheckedUpdateWithoutCreditsInput>
    create: XOR<UsersCreateWithoutCreditsInput, UsersUncheckedCreateWithoutCreditsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCreditsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCreditsInput, UsersUncheckedUpdateWithoutCreditsInput>
  }

  export type UsersUpdateWithoutCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUpsertWithoutUpdatedSupplierCreditsInput = {
    update: XOR<UsersUpdateWithoutUpdatedSupplierCreditsInput, UsersUncheckedUpdateWithoutUpdatedSupplierCreditsInput>
    create: XOR<UsersCreateWithoutUpdatedSupplierCreditsInput, UsersUncheckedCreateWithoutUpdatedSupplierCreditsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUpdatedSupplierCreditsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUpdatedSupplierCreditsInput, UsersUncheckedUpdateWithoutUpdatedSupplierCreditsInput>
  }

  export type UsersUpdateWithoutUpdatedSupplierCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutUpdatedSupplierCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CustomersCreateWithoutCustomerCreditInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
    Sales?: SalesCreateNestedManyWithoutCustomerInput
  }

  export type CustomersUncheckedCreateWithoutCustomerCreditInput = {
    id?: string
    name: string
    phone: string
    address: string
    status?: $Enums.Status
    Sales?: SalesUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomersCreateOrConnectWithoutCustomerCreditInput = {
    where: CustomersWhereUniqueInput
    create: XOR<CustomersCreateWithoutCustomerCreditInput, CustomersUncheckedCreateWithoutCustomerCreditInput>
  }

  export type UsersCreateWithoutCustomerCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutCustomerCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCustomerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutCustomerCreditsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCustomerCreditsInput, UsersUncheckedCreateWithoutCustomerCreditsInput>
  }

  export type UsersCreateWithoutUpdatedCustomerCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditCreateNestedManyWithoutCreatedByInput
    updatedSupplierCredits?: SupplierCreditsCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersUncheckedCreateWithoutUpdatedCustomerCreditsInput = {
    id?: string
    FirstName: string
    LastName: string
    username: string
    password: string
    role: $Enums.Role
    status?: $Enums.Status
    member?: MembersUncheckedCreateNestedOneWithoutUserInput
    credits?: SupplierCreditsUncheckedCreateNestedManyWithoutCreatedByInput
    medicines?: MedicinesUncheckedCreateNestedManyWithoutCreatedByInput
    customerCredits?: CustomerCreditUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSupplierCredits?: SupplierCreditsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSales?: SalesUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSales?: SalesUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UsersCreateOrConnectWithoutUpdatedCustomerCreditsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUpdatedCustomerCreditsInput, UsersUncheckedCreateWithoutUpdatedCustomerCreditsInput>
  }

  export type CustomersUpsertWithoutCustomerCreditInput = {
    update: XOR<CustomersUpdateWithoutCustomerCreditInput, CustomersUncheckedUpdateWithoutCustomerCreditInput>
    create: XOR<CustomersCreateWithoutCustomerCreditInput, CustomersUncheckedCreateWithoutCustomerCreditInput>
    where?: CustomersWhereInput
  }

  export type CustomersUpdateToOneWithWhereWithoutCustomerCreditInput = {
    where?: CustomersWhereInput
    data: XOR<CustomersUpdateWithoutCustomerCreditInput, CustomersUncheckedUpdateWithoutCustomerCreditInput>
  }

  export type CustomersUpdateWithoutCustomerCreditInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    Sales?: SalesUpdateManyWithoutCustomerNestedInput
  }

  export type CustomersUncheckedUpdateWithoutCustomerCreditInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    Sales?: SalesUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UsersUpsertWithoutCustomerCreditsInput = {
    update: XOR<UsersUpdateWithoutCustomerCreditsInput, UsersUncheckedUpdateWithoutCustomerCreditsInput>
    create: XOR<UsersCreateWithoutCustomerCreditsInput, UsersUncheckedCreateWithoutCustomerCreditsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCustomerCreditsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCustomerCreditsInput, UsersUncheckedUpdateWithoutCustomerCreditsInput>
  }

  export type UsersUpdateWithoutCustomerCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutCustomerCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCustomerCredits?: CustomerCreditUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUpsertWithoutUpdatedCustomerCreditsInput = {
    update: XOR<UsersUpdateWithoutUpdatedCustomerCreditsInput, UsersUncheckedUpdateWithoutUpdatedCustomerCreditsInput>
    create: XOR<UsersCreateWithoutUpdatedCustomerCreditsInput, UsersUncheckedCreateWithoutUpdatedCustomerCreditsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUpdatedCustomerCreditsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUpdatedCustomerCreditsInput, UsersUncheckedUpdateWithoutUpdatedCustomerCreditsInput>
  }

  export type UsersUpdateWithoutUpdatedCustomerCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUpdateManyWithoutCreatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUpdateManyWithoutUpdatedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutUpdatedCustomerCreditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    member?: MembersUncheckedUpdateOneWithoutUserNestedInput
    credits?: SupplierCreditsUncheckedUpdateManyWithoutCreatedByNestedInput
    medicines?: MedicinesUncheckedUpdateManyWithoutCreatedByNestedInput
    customerCredits?: CustomerCreditUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSupplierCredits?: SupplierCreditsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSales?: SalesUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSales?: SalesUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type KeyResultsCreateWithoutObjectiveInput = {
    id?: string
    title: string
    description: string
    weight: number
    deadline: Date | string
    progress: number
  }

  export type KeyResultsUncheckedCreateWithoutObjectiveInput = {
    id?: string
    title: string
    description: string
    weight: number
    deadline: Date | string
    progress: number
  }

  export type KeyResultsCreateOrConnectWithoutObjectiveInput = {
    where: KeyResultsWhereUniqueInput
    create: XOR<KeyResultsCreateWithoutObjectiveInput, KeyResultsUncheckedCreateWithoutObjectiveInput>
  }

  export type KeyResultsCreateManyObjectiveInputEnvelope = {
    data: KeyResultsCreateManyObjectiveInput | KeyResultsCreateManyObjectiveInput[]
    skipDuplicates?: boolean
  }

  export type KeyResultsUpsertWithWhereUniqueWithoutObjectiveInput = {
    where: KeyResultsWhereUniqueInput
    update: XOR<KeyResultsUpdateWithoutObjectiveInput, KeyResultsUncheckedUpdateWithoutObjectiveInput>
    create: XOR<KeyResultsCreateWithoutObjectiveInput, KeyResultsUncheckedCreateWithoutObjectiveInput>
  }

  export type KeyResultsUpdateWithWhereUniqueWithoutObjectiveInput = {
    where: KeyResultsWhereUniqueInput
    data: XOR<KeyResultsUpdateWithoutObjectiveInput, KeyResultsUncheckedUpdateWithoutObjectiveInput>
  }

  export type KeyResultsUpdateManyWithWhereWithoutObjectiveInput = {
    where: KeyResultsScalarWhereInput
    data: XOR<KeyResultsUpdateManyMutationInput, KeyResultsUncheckedUpdateManyWithoutObjectiveInput>
  }

  export type KeyResultsScalarWhereInput = {
    AND?: KeyResultsScalarWhereInput | KeyResultsScalarWhereInput[]
    OR?: KeyResultsScalarWhereInput[]
    NOT?: KeyResultsScalarWhereInput | KeyResultsScalarWhereInput[]
    id?: StringFilter<"KeyResults"> | string
    objective_id?: StringFilter<"KeyResults"> | string
    title?: StringFilter<"KeyResults"> | string
    description?: StringFilter<"KeyResults"> | string
    weight?: FloatFilter<"KeyResults"> | number
    deadline?: DateTimeFilter<"KeyResults"> | Date | string
    progress?: FloatFilter<"KeyResults"> | number
  }

  export type ObjectivesCreateWithoutKeyResultsInput = {
    id?: string
    title: string
    description: string
    time_period: string
    progress: number
  }

  export type ObjectivesUncheckedCreateWithoutKeyResultsInput = {
    id?: string
    title: string
    description: string
    time_period: string
    progress: number
  }

  export type ObjectivesCreateOrConnectWithoutKeyResultsInput = {
    where: ObjectivesWhereUniqueInput
    create: XOR<ObjectivesCreateWithoutKeyResultsInput, ObjectivesUncheckedCreateWithoutKeyResultsInput>
  }

  export type ObjectivesUpsertWithoutKeyResultsInput = {
    update: XOR<ObjectivesUpdateWithoutKeyResultsInput, ObjectivesUncheckedUpdateWithoutKeyResultsInput>
    create: XOR<ObjectivesCreateWithoutKeyResultsInput, ObjectivesUncheckedCreateWithoutKeyResultsInput>
    where?: ObjectivesWhereInput
  }

  export type ObjectivesUpdateToOneWithWhereWithoutKeyResultsInput = {
    where?: ObjectivesWhereInput
    data: XOR<ObjectivesUpdateWithoutKeyResultsInput, ObjectivesUncheckedUpdateWithoutKeyResultsInput>
  }

  export type ObjectivesUpdateWithoutKeyResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time_period?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type ObjectivesUncheckedUpdateWithoutKeyResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time_period?: StringFieldUpdateOperationsInput | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type SupplierCreditsCreateManyCreatedByInput = {
    id?: string
    supplier_id: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MedicinesCreateManyCreatedByInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreditCreateManyCreatedByInput = {
    id?: string
    customer_id: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    updated_by?: string | null
  }

  export type CustomerCreditCreateManyUpdatedByInput = {
    id?: string
    customer_id: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    created_by: string
  }

  export type SupplierCreditsCreateManyUpdatedByInput = {
    id?: string
    supplier_id: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateManyCreatedByInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SalesCreateManyUpdatedByInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SupplierCreditsUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SuppliersUpdateOneRequiredWithoutSupplierCreditsNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSupplierCreditsNestedInput
  }

  export type SupplierCreditsUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreditsUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicinesUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutMedicinesNestedInput
    dosage_form?: DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SuppliersUpdateOneRequiredWithoutMedicinesNestedInput
    Sales?: SalesUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sales?: SalesUncheckedUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreditUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomersUpdateOneRequiredWithoutCustomerCreditNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedCustomerCreditsNestedInput
  }

  export type CustomerCreditUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customer_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerCreditUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customer_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerCreditUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomersUpdateOneRequiredWithoutCustomerCreditNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCustomerCreditsNestedInput
  }

  export type CustomerCreditUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customer_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreditUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    customer_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
  }

  export type SupplierCreditsUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SuppliersUpdateOneRequiredWithoutSupplierCreditsNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreditsNestedInput
  }

  export type SupplierCreditsUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreditsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    supplier_id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage_form?: DosageFormsUpdateOneRequiredWithoutSalesNestedInput
    customer?: CustomersUpdateOneWithoutSalesNestedInput
    medicine?: MedicinesUpdateOneRequiredWithoutSalesNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSalesNestedInput
  }

  export type SalesUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage_form?: DosageFormsUpdateOneRequiredWithoutSalesNestedInput
    customer?: CustomersUpdateOneWithoutSalesNestedInput
    medicine?: MedicinesUpdateOneRequiredWithoutSalesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreatedSalesNestedInput
  }

  export type SalesUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreditsCreateManySupplierInput = {
    id?: string
    credit_amount: number
    medicine_name?: string | null
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    description?: string | null
    payment_method?: $Enums.PaymentMethod | null
    payment_status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type MedicinesCreateManySupplierInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupplierCreditsUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UsersUpdateOneRequiredWithoutCreditsNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSupplierCreditsNestedInput
  }

  export type SupplierCreditsUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierCreditsUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicinesUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutMedicinesNestedInput
    dosage_form?: DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutMedicinesNestedInput
    Sales?: SalesUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sales?: SalesUncheckedUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicinesCreateManyCategoryInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    dosage_form_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicinesUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage_form?: DosageFormsUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SuppliersUpdateOneRequiredWithoutMedicinesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutMedicinesNestedInput
    Sales?: SalesUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sales?: SalesUncheckedUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicinesCreateManyDosage_formInput = {
    id?: string
    medicine_name: string
    brand_name?: string | null
    batch_number?: string | null
    category_id: string
    medicine_weight?: number | null
    quantity: number
    supplier_id: string
    invoice_number: string
    unit_price: number
    sell_price?: number | null
    total_price: number
    expire_date: Date | string
    required_prescription: boolean
    payment_method?: $Enums.PaymentMethod
    Payment_file?: string | null
    details?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesCreateManyDosage_formInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    customer_id?: string | null
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReturnsCreateManyDosage_formInput = {
    id?: string
    product_name: string
    product_batch_number: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
    medicine_id: string
  }

  export type MedicinesUpdateWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SuppliersUpdateOneRequiredWithoutMedicinesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutMedicinesNestedInput
    Sales?: SalesUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Sales?: SalesUncheckedUpdateManyWithoutMedicineNestedInput
    Returns?: ReturnsUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicinesUncheckedUpdateManyWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicine_name?: StringFieldUpdateOperationsInput | string
    brand_name?: NullableStringFieldUpdateOperationsInput | string | null
    batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    medicine_weight?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_id?: StringFieldUpdateOperationsInput | string
    invoice_number?: StringFieldUpdateOperationsInput | string
    unit_price?: FloatFieldUpdateOperationsInput | number
    sell_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: FloatFieldUpdateOperationsInput | number
    expire_date?: DateTimeFieldUpdateOperationsInput | Date | string
    required_prescription?: BoolFieldUpdateOperationsInput | boolean
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    Payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUpdateWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomersUpdateOneWithoutSalesNestedInput
    medicine?: MedicinesUpdateOneRequiredWithoutSalesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreatedSalesNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSalesNestedInput
  }

  export type SalesUncheckedUpdateWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUncheckedUpdateManyWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReturnsUpdateWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    medicine?: MedicinesUpdateOneRequiredWithoutReturnsNestedInput
  }

  export type ReturnsUncheckedUpdateWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    medicine_id?: StringFieldUpdateOperationsInput | string
  }

  export type ReturnsUncheckedUpdateManyWithoutDosage_formInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    medicine_id?: StringFieldUpdateOperationsInput | string
  }

  export type SalesCreateManyMedicineInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    customer_id?: string | null
    sealed_date: Date | string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReturnsCreateManyMedicineInput = {
    id?: string
    product_name: string
    product_batch_number: string
    dosage_form_id: string
    return_date: Date | string
    reason_for_return: string
    quantity: number
  }

  export type SalesUpdateWithoutMedicineInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage_form?: DosageFormsUpdateOneRequiredWithoutSalesNestedInput
    customer?: CustomersUpdateOneWithoutSalesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreatedSalesNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSalesNestedInput
  }

  export type SalesUncheckedUpdateWithoutMedicineInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUncheckedUpdateManyWithoutMedicineInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReturnsUpdateWithoutMedicineInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    dosage_form?: DosageFormsUpdateOneRequiredWithoutReturnsNestedInput
  }

  export type ReturnsUncheckedUpdateWithoutMedicineInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ReturnsUncheckedUpdateManyWithoutMedicineInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_batch_number?: StringFieldUpdateOperationsInput | string
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason_for_return?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SalesCreateManyCustomerInput = {
    id?: string
    product_name?: string | null
    product_batch_number?: string | null
    quantity: number
    price: number
    total_amount: number
    payment_method?: $Enums.PaymentMethod
    prescription: boolean
    dosage_form_id: string
    sealed_date: Date | string
    medicine_id: string
    created_by: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CustomerCreditCreateManyCustomerInput = {
    id?: string
    credit_amount: number
    paid_amount?: number
    unpaid_amount?: number
    total_unpaid_amount?: number
    total_paid_amount?: number
    medicine_name?: string | null
    payment_method?: $Enums.PaymentMethod
    description?: string | null
    status?: $Enums.PaymentStatus
    credit_date: Date | string
    payment_file?: string | null
    updated_at?: Date | string
    created_by: string
    updated_by?: string | null
  }

  export type SalesUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage_form?: DosageFormsUpdateOneRequiredWithoutSalesNestedInput
    medicine?: MedicinesUpdateOneRequiredWithoutSalesNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCreatedSalesNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedSalesNestedInput
  }

  export type SalesUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    product_batch_number?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total_amount?: FloatFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    prescription?: BoolFieldUpdateOperationsInput | boolean
    dosage_form_id?: StringFieldUpdateOperationsInput | string
    sealed_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine_id?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreditUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UsersUpdateOneRequiredWithoutCustomerCreditsNestedInput
    updatedBy?: UsersUpdateOneWithoutUpdatedCustomerCreditsNestedInput
  }

  export type CustomerCreditUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerCreditUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    credit_amount?: FloatFieldUpdateOperationsInput | number
    paid_amount?: FloatFieldUpdateOperationsInput | number
    unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_unpaid_amount?: FloatFieldUpdateOperationsInput | number
    total_paid_amount?: FloatFieldUpdateOperationsInput | number
    medicine_name?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    credit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_file?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KeyResultsCreateManyObjectiveInput = {
    id?: string
    title: string
    description: string
    weight: number
    deadline: Date | string
    progress: number
  }

  export type KeyResultsUpdateWithoutObjectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyResultsUncheckedUpdateWithoutObjectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyResultsUncheckedUpdateManyWithoutObjectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}